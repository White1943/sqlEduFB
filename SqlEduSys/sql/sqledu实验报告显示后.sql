/*
Navicat MySQL Data Transfer

Source Server         : localhost
Source Server Version : 80022
Source Host           : localhost:3306
Source Database       : sqledu

Target Server Type    : MYSQL
Target Server Version : 80022
File Encoding         : 65001

Date: 2025-03-29 23:28:34
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for alembic_version
-- ----------------------------
DROP TABLE IF EXISTS `alembic_version`;
CREATE TABLE `alembic_version` (
  `version_num` varchar(32) NOT NULL,
  PRIMARY KEY (`version_num`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of alembic_version
-- ----------------------------

-- ----------------------------
-- Table structure for chat_history
-- ----------------------------
DROP TABLE IF EXISTS `chat_history`;
CREATE TABLE `chat_history` (
  `id` int NOT NULL AUTO_INCREMENT,
  `user_id` int NOT NULL,
  `model_type` varchar(50) NOT NULL,
  `role` varchar(20) NOT NULL,
  `content` text NOT NULL,
  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  KEY `user_id` (`user_id`),
  CONSTRAINT `chat_history_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=29 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of chat_history
-- ----------------------------
INSERT INTO `chat_history` VALUES ('2', '2', 'qwen-7b-chat', 'system', 'You are a helpful assistant.', '2025-02-11 11:04:03');
INSERT INTO `chat_history` VALUES ('3', '2', 'qwen-7b-chat', 'user', '你是什么大模型\n', '2025-02-11 11:04:03');
INSERT INTO `chat_history` VALUES ('4', '2', 'qwen-7b-chat', 'assistant', '我是阿里云开发的通义千问模型，是预训练语言模型。', '2025-02-11 11:04:03');
INSERT INTO `chat_history` VALUES ('5', '2', 'qwen-7b-chat', 'system', 'You are a helpful assistant.', '2025-02-11 11:04:54');
INSERT INTO `chat_history` VALUES ('6', '2', 'qwen-7b-chat', 'user', '你是什么大模型\n', '2025-02-11 11:04:54');
INSERT INTO `chat_history` VALUES ('7', '2', 'qwen-7b-chat', 'assistant', '我是来自阿里云的大规模语言模型，我叫通义千问。', '2025-02-11 11:04:54');
INSERT INTO `chat_history` VALUES ('8', '2', 'qwen-7b-chat', 'system', 'You are a helpful assistant.', '2025-02-11 11:06:45');
INSERT INTO `chat_history` VALUES ('9', '2', 'qwen-7b-chat', 'user', '对的', '2025-02-11 11:06:45');
INSERT INTO `chat_history` VALUES ('10', '2', 'qwen-7b-chat', 'assistant', '好的，很高兴能帮到您！如果您还有其他问题，请随时告诉我。', '2025-02-11 11:06:45');
INSERT INTO `chat_history` VALUES ('11', '2', 'qwen-7b-chat', 'system', 'You are a helpful assistant.', '2025-02-11 11:08:54');
INSERT INTO `chat_history` VALUES ('12', '2', 'qwen-7b-chat', 'user', '你是什么类型的大模型\n', '2025-02-11 11:08:54');
INSERT INTO `chat_history` VALUES ('13', '2', 'qwen-7b-chat', 'assistant', '我是一个基于Transformer架构的预训练语言模型，被称作通义千问。我能够回答问题、创作文字，还能表达观点、撰写代码。', '2025-02-11 11:08:54');
INSERT INTO `chat_history` VALUES ('14', '2', 'qwen-7b-chat', 'system', 'You are a helpful assistant.', '2025-02-11 11:11:19');
INSERT INTO `chat_history` VALUES ('15', '2', 'qwen-7b-chat', 'user', 'nih\n', '2025-02-11 11:11:19');
INSERT INTO `chat_history` VALUES ('16', '2', 'qwen-7b-chat', 'assistant', 'I\'m sorry, I didn\'t understand your question. Could you please provide more context or information?', '2025-02-11 11:11:19');
INSERT INTO `chat_history` VALUES ('17', '2', 'qwen-7b-chat', 'system', 'You are a helpful assistant.', '2025-02-11 11:13:19');
INSERT INTO `chat_history` VALUES ('18', '2', 'qwen-7b-chat', 'user', '你是千问7b么\n', '2025-02-11 11:13:19');
INSERT INTO `chat_history` VALUES ('19', '2', 'qwen-7b-chat', 'assistant', '我是阿里云开发的语言模型，我叫通义千问。', '2025-02-11 11:13:19');
INSERT INTO `chat_history` VALUES ('20', '2', 'qwen-7b-chat', 'system', 'You are a helpful assistant.', '2025-02-11 11:23:57');
INSERT INTO `chat_history` VALUES ('21', '2', 'qwen-7b-chat', 'user', '你好\n', '2025-02-11 11:23:57');
INSERT INTO `chat_history` VALUES ('22', '2', 'qwen-7b-chat', 'assistant', '你好！有什么我可以帮助你的吗？', '2025-02-11 11:23:57');
INSERT INTO `chat_history` VALUES ('23', '2', 'qwen-turbo', 'system', 'You are a helpful assistant.', '2025-02-11 11:24:42');
INSERT INTO `chat_history` VALUES ('24', '2', 'qwen-turbo', 'user', '1+1等于', '2025-02-11 11:24:42');
INSERT INTO `chat_history` VALUES ('25', '2', 'qwen-turbo', 'assistant', '1+1等于2。', '2025-02-11 11:24:42');
INSERT INTO `chat_history` VALUES ('26', '2', 'qwen-long', 'system', 'You are a helpful assistant.', '2025-02-11 11:53:50');
INSERT INTO `chat_history` VALUES ('27', '2', 'qwen-long', 'user', '1+1', '2025-02-11 11:53:50');
INSERT INTO `chat_history` VALUES ('28', '2', 'qwen-long', 'assistant', '1 + 1 equals 2.', '2025-02-11 11:53:50');

-- ----------------------------
-- Table structure for experiments
-- ----------------------------
DROP TABLE IF EXISTS `experiments`;
CREATE TABLE `experiments` (
  `id` int NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL COMMENT '实验标题',
  `description` text COMMENT '实验描述',
  `created_at` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updated_at` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  `status` varchar(20) DEFAULT 'draft' COMMENT '状态：draft-草稿，published-已发布',
  `content` json DEFAULT NULL COMMENT '实验内容，包含查询等信息',
  `knowledge_points` json DEFAULT NULL COMMENT '关联的知识点信息',
  `report_content` varchar(16000) DEFAULT NULL COMMENT '实验报告内容，支持富文本格式',
  `objectives` text COMMENT '实验目标',
  `requirements` text COMMENT '实验要求',
  `steps` text COMMENT '实验步骤',
  `notes` text COMMENT '实验注意事项',
  `version` enum('teacher','student') DEFAULT 'student' COMMENT '实验报告版本：teacher-教师版，student-学生版',
  `points_category_id` int DEFAULT NULL COMMENT '知识点分类ID',
  PRIMARY KEY (`id`),
  KEY `idx_status` (`status`),
  KEY `idx_created_at` (`created_at`)
) ENGINE=InnoDB AUTO_INCREMENT=34 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='实验报告表';

-- ----------------------------
-- Records of experiments
-- ----------------------------
INSERT INTO `experiments` VALUES ('1', '2', null, '2025-03-06 13:25:00', '2025-03-06 13:25:00', 'draft', null, null, '# 实验报告：数据库插入操作实验\r\n\r\n## 一、实验目的\r\n1. 掌握MySQL数据库中数据插入的基本语法和使用方法。\r\n2. 理解外键约束在数据插入时的作用，确保数据的完整性和一致性。\r\n3. 学会通过`EXISTS`子查询来保证插入数据的前提条件。\r\n\r\n## 二、实验环境\r\n- 操作系统：Windows/Linux（根据实际环境填写）\r\n- 数据库管理系统：MySQL 8.0.22\r\n- 开发工具：Navicat for MySQL（或其他MySQL客户端工具）\r\n\r\n## 三、实验内容与步骤\r\n\r\n### （一）插入城市记录\r\n**题目描述**：\r\n向`city`表中插入一个新的城市记录，并确保该城市的国家代码存在于`country`表中。例如，插入一个名为“Newville”的城市，属于国家代码为“USA”的国家，位于“California”地区，人口为50000。\r\n\r\n**SQL语句**：\r\n```sql\r\nINSERT INTO city (Name, CountryCode, District, Population)\r\nSELECT \'Newville\', \'USA\', \'California\', 50000\r\nFROM dual\r\nWHERE EXISTS (SELECT 1 FROM country WHERE Code = \'USA\');\r\n```\r\n\r\n**执行结果分析**：\r\n当`country`表中存在`Code=\'USA\'`的记录时，上述语句将成功执行，在`city`表中添加一条新的记录；如果不存在，则不会执行插入操作，从而避免了违反外键约束的风险。\r\n\r\n### （二）插入国家记录\r\n**题目描述**：\r\n向`country`表中插入一条新的国家记录，包括国家代码、名称、所属大洲、地区、面积、独立年份、人口、预期寿命、GNP等信息。例如，插入一个名为“Atlantis”的新国家，位于“Oceania”，面积为100000平方公里，独立年份为2023，人口为1000000。\r\n\r\n**SQL语句**：\r\n```sql\r\nINSERT INTO country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, LocalName, GovernmentForm, HeadOfState, Code2)\r\nVALUES (\'ATL\', \'Atlantis\', \'Oceania\', \'South Pacific\', 100000.00, 2023, 1000000, NULL, NULL, \'Atlantis\', \'Republic\', NULL, \'AT\');\r\n```\r\n\r\n**执行结果分析**：\r\n这条语句直接向`country`表中插入了一条完整的国家记录。由于`country`表没有对外键的限制，因此只要提供的值符合字段类型要求就可以成功插入。需要注意的是，对于可以为空的字段如`LifeExpectancy`、`GNP`、`HeadOfState`等，可以根据实际情况决定是否提供值。\r\n\r\n### （三）插入官方语言记录\r\n**题目描述**：\r\n向`countrylanguage`表中插入一种新的官方语言，并确保该国家代码存在于`country`表中。例如，插入“Klingon”作为国家代码为“KLG”的国家的官方语言，官方语言比例为5.0%，并且设置为官方语言（IsOfficial=\'T\'）。\r\n\r\n**SQL语句**：\r\n```sql\r\nINSERT INTO countrylanguage (CountryCode, Language, IsOfficial, Percentage)\r\nSELECT \'KLG\', \'Klingon\', \'T\', 5.0\r\nFROM dual\r\nWHERE EXISTS (SELECT 1 FROM country WHERE Code = \'KLG\');\r\n```\r\n\r\n**执行结果分析**：\r\n与第一个题目类似，这里也使用了`EXISTS`子查询来确保只有当`country`表中存在`Code=\'KLG\'`的记录时才会执行插入操作。这有助于维护数据的一致性，防止出现孤立的语言记录（即对应国家不存在的情况）。\r\n\r\n## 四、注意事项\r\n1. 在进行数据插入之前，建议先查询相关表中的现有数据，以确保插入的数据不会导致重复或冲突。\r\n2. 注意检查各字段的数据类型，确保插入的数据格式正确。\r\n3. 对于涉及外键约束的操作，务必确认父表中存在相应的主键记录，以免违反约束规则。\r\n4. 使用`EXISTS`子查询是一种有效的方式，可以在插入数据的同时验证前提条件，提高数据的准确性。\r\n\r\n## 五、思考题\r\n1. 如果想要更新已经存在的城市记录而不是插入新记录，应该使用什么SQL语句？请举例说明。\r\n2. 在插入大量数据时，如何提高插入效率？请从SQL语句优化和数据库配置两方面进行阐述。\r\n3. 当插入的数据违反了某个约束（如唯一性约束），数据库系统会怎样处理？如何捕获并处理这类异常？\r\n\r\n---\r\n\r\n以上就是本次关于数据库插入操作的实验报告，通过对三个不同场景下的插入操作练习，同学们应该对MySQL中的数据插入有了更深入的理解。希望同学们能够举一反三，灵活运用所学知识解决实际问题。', null, null, null, null);
INSERT INTO `experiments` VALUES ('2', '的', null, '2025-03-06 16:08:03', '2025-03-06 16:08:03', 'draft', null, null, '## 实验题目：基于世界数据库的SQL查询练习\r\n\r\n### 实验目的\r\n通过本实验，学生将掌握如何使用SQL语句进行基本的数据查询操作，理解去除重复行的方法，并能够根据具体需求编写相应的SQL查询。\r\n\r\n### 实验环境\r\n- 数据库管理系统：MySQL 8.0.22\r\n- 数据库名称：world\r\n- 表结构：city、country、countrylanguage\r\n\r\n---\r\n\r\n### 实验内容与知识点解析\r\n\r\n#### 题目1：查询所有人口超过1000万的城市名称和所属国家代码，并将城市人口命名为 city_population\r\n**涉及知识点：SELECT语句基础**\r\n\r\n**答案：**\r\n```sql\r\nSELECT Name, CountryCode, Population AS city_population\r\nFROM city\r\nWHERE Population > 10000000;\r\n```\r\n\r\n**解题思路：**\r\n- 使用`SELECT`语句选择所需的列。\r\n- 使用`WHERE`子句筛选出人口大于1000万的城市。\r\n- 使用`AS`关键字为`Population`列重命名。\r\n\r\n---\r\n\r\n#### 题目2：获取所有不同城市名称\r\n**涉及知识点：去除重复行**\r\n\r\n**答案：**\r\n```sql\r\nSELECT DISTINCT Name \r\nFROM city;\r\n```\r\n\r\n**解题思路：**\r\n- 使用`SELECT DISTINCT`语句来确保返回的结果中没有重复的城市名称。\r\n\r\n---\r\n\r\n#### 题目3：查找不同国家首都的城市名称，且结果不重复\r\n**涉及知识点：去除重复行**\r\n\r\n**答案：**\r\n```sql\r\nSELECT DISTINCT c.Name \r\nFROM city c \r\nJOIN country co ON c.CountryCode = co.Code \r\nWHERE c.ID = co.Capital;\r\n```\r\n\r\n**解题思路：**\r\n- 使用`JOIN`语句连接`city`表和`country`表。\r\n- 使用`WHERE`子句筛选出首都城市。\r\n- 使用`DISTINCT`关键字确保结果中没有重复的城市名称。\r\n\r\n---\r\n\r\n### 知识点总结\r\n1. **SELECT语句基础（1个题目）**\r\n   - 掌握如何使用`SELECT`语句选择特定的列。\r\n   - 学会使用`WHERE`子句进行条件筛选。\r\n   - 了解如何使用`AS`关键字为列重命名。\r\n\r\n2. **去除重复行（2个题目）**\r\n   - 学习使用`DISTINCT`关键字去除查询结果中的重复行。\r\n   - 理解在多表联接查询中如何结合`DISTINCT`确保结果唯一性。\r\n\r\n### 实验要求\r\n- 每个学生需独立完成上述SQL查询任务。\r\n- 提交完整的SQL查询语句及查询结果截图。\r\n- 对每个查询语句进行简要说明，解释其功能和实现方法。\r\n\r\n---\r\n\r\n### 教师点评\r\n本次实验旨在帮助学生掌握SQL查询的基本语法和技巧，特别是`SELECT`语句的使用以及如何处理重复数据。通过这些练习，学生不仅能够加深对SQL的理解，还能提高解决实际问题的能力。建议学生在课后多加练习，尝试更多的查询组合，以巩固所学知识。\r\n\r\n---\r\n\r\n### 参考资料\r\n- MySQL官方文档：https://dev.mysql.com/doc/\r\n- SQL教程：https://www.w3schools.com/sql/', null, null, null, null);
INSERT INTO `experiments` VALUES ('3', '教师版实验报告 -  ', '根据选中的数据库模式生成的教师版实验报告', '2025-03-06 16:40:01', '2025-03-06 16:40:01', 'draft', null, null, null, null, null, null, null);
INSERT INTO `experiments` VALUES ('4', '学生版实验报告 -   ', '根据选中的数据库模式生成的学生版实验报告', '2025-03-06 16:40:53', '2025-03-06 16:40:53', 'draft', null, null, null, null, null, null, null);
INSERT INTO `experiments` VALUES ('5', '教师版实验报告 -  ', '根据选中的数据库模式生成的教师版实验报告', '2025-03-06 16:49:55', '2025-03-06 16:49:55', 'draft', '\"{\\\"schema_ids\\\": [11], \\\"points\\\": [{\\\"id\\\": 1, \\\"generateCount\\\": 1}, {\\\"id\\\": 2, \\\"generateCount\\\": 1}]}\"', null, null, null, null, null, null);
INSERT INTO `experiments` VALUES ('6', '教师版实验报告 -  ', '根据选中的数据库模式生成的教师版实验报告', '2025-03-06 17:00:33', '2025-03-06 17:00:33', 'draft', '\"{\\\"schema_ids\\\": [11], \\\"points\\\": [{\\\"id\\\": 1, \\\"generateCount\\\": 1}, {\\\"id\\\": 2, \\\"generateCount\\\": 1}]}\"', null, null, null, null, null, null);
INSERT INTO `experiments` VALUES ('7', '学生版实验报告 -   ', '根据选中的数据库模式生成的学生版实验报告', '2025-03-06 17:00:56', '2025-03-06 17:00:56', 'draft', '\"{\\\"schema_ids\\\": [11], \\\"points\\\": [{\\\"id\\\": 1, \\\"generateCount\\\": 1}, {\\\"id\\\": 2, \\\"generateCount\\\": 1}]}\"', null, null, null, null, null, null);
INSERT INTO `experiments` VALUES ('8', '教师版实验报告 -  ', '根据选中的数据库模式生成的教师版实验报告', '2025-03-06 17:04:04', '2025-03-06 17:04:04', 'draft', '\"{\\\"schema_ids\\\": [11], \\\"points\\\": [{\\\"id\\\": 2, \\\"generateCount\\\": 2}]}\"', null, null, null, null, null, null);
INSERT INTO `experiments` VALUES ('9', '学生版实验报告 -   ', '根据选中的数据库模式生成的学生版实验报告', '2025-03-06 17:04:43', '2025-03-06 17:04:43', 'draft', '\"{\\\"schema_ids\\\": [11], \\\"points\\\": [{\\\"id\\\": 2, \\\"generateCount\\\": 2}]}\"', null, null, null, null, null, null);
INSERT INTO `experiments` VALUES ('10', '教师版实验报告 -  ', '根据选中的数据库模式生成的教师版实验报告', '2025-03-06 17:41:49', '2025-03-06 17:41:49', 'draft', '\"{\\\"schema_ids\\\": [11], \\\"points\\\": [{\\\"id\\\": 2, \\\"generateCount\\\": 1}]}\"', null, null, null, null, null, null);
INSERT INTO `experiments` VALUES ('11', '学生版实验报告 -   ', '根据选中的数据库模式生成的学生版实验报告', '2025-03-06 17:42:19', '2025-03-06 17:42:19', 'draft', '\"{\\\"schema_ids\\\": [11], \\\"points\\\": [{\\\"id\\\": 2, \\\"generateCount\\\": 1}]}\"', null, null, null, null, null, null);
INSERT INTO `experiments` VALUES ('12', '教师版实验报告 - 2025-03-06-18-09-32', '根据选中的数据库模式生成的教师版实验报告', '2025-03-06 18:09:32', '2025-03-06 18:09:32', 'draft', null, null, '# 教师版实验报告\n\n## 实验标题：SQL查询与数据分析实验\n\n### 学习目标：\n通过本实验，学生将掌握如何使用SQL进行数据查询、统计分析，并理解数据库表之间的关联关系。实验内容涵盖了基本的SELECT语句使用、聚合函数、JOIN操作以及复杂条件查询。\n\n---\n\n### 实验题目1：查询人口超过1000万的城市\n**题目描述：**\n查询所有人口超过1000万的城市名称和所属国家代码，并将城市人口命名为 `city_population`。\n\n**涉及知识点：**\n- SELECT语句基础 (1)\n\n**答案：**\n```sql\nSELECT Name, CountryCode, Population AS city_population\nFROM city\nWHERE Population > 10000000;\n```\n\n**解题思路：**\n此题较为简单，主要考察学生对SELECT语句的基本用法掌握情况。学生需要从`city`表中选择符合条件（人口大于1000万）的城市记录，并且使用AS关键字为Population列重命名。\n\n---\n\n### 实验题目2：统计各大洲的国家数量\n**题目描述：**\n统计各大洲的国家数量，并按洲名排序，显示洲名和国家数量。\n\n**涉及知识点：**\n- SELECT语句基础 (1)\n- 聚合函数COUNT()\n- GROUP BY子句\n- ORDER BY子句\n\n**答案：**\n```sql\nSELECT \n  Continent, \n  COUNT(Code) AS CountryCount\nFROM \n  country\nGROUP BY \n  Continent\nORDER BY \n  Continent;\n```\n\n**解题思路：**\n此题要求学生使用COUNT()函数来计算每个大陆上的国家数目，并结合GROUP BY进行分组统计。最后通过ORDER BY按照大陆名称排序输出结果。\n\n---\n\n### 实验题目3：查找官方语言为英语的国家\n**题目描述：**\n查找官方语言为英语的国家代码和该语言的使用百分比，并将百分比命名为 `english_speaking_percentage`。\n\n**涉及知识点：**\n- SELECT语句基础 (1)\n- WHERE子句中的条件表达式\n- 列别名\n\n**答案：**\n```sql\nSELECT CountryCode, Percentage AS english_speaking_percentage\nFROM countrylanguage\nWHERE Language = \'English\' AND IsOfficial = \'T\';\n```\n\n**解题思路：**\n此题考查了学生对WHERE子句的理解和运用能力。需要注意的是，在countrylanguage表中，“IsOfficial”字段表示是否为官方语言，这里需要同时满足两个条件：语言为英语且是官方语言。\n\n---\n\n### 实验题目4：找出首都人口超过500万的国家信息\n**题目描述：**\n找出首都人口超过500万的国家名称、首都名称和首都人口，并将首都人口命名为 `capital_population`。\n\n**涉及知识点：**\n- SELECT语句基础 (1)\n- JOIN操作\n- 条件筛选\n\n**答案：**\n```sql\nSELECT ctry.Name AS 国家名称, ct.Name AS 首都名称, ct.Population AS capital_population\nFROM country ctry\nJOIN city ct ON ctry.Capital = ct.ID\nWHERE ct.Population > 5000000;\n```\n\n**解题思路：**\n此题涉及到多表连接查询，即需要从`country`表和`city`表中提取相关信息。首先通过JOIN将两个表连接起来，然后根据首都ID匹配对应的首都城市信息，最后再添加一个过滤条件限制首都人口数量。\n\n---\n\n### 实验题目5：计算并筛选人均GDP较高的国家\n**题目描述：**\n计算每个国家的人均GDP（GNP/Population），并筛选出人均GDP大于10000的国家，显示国家名称和人均GDP，将人均GDP命名为 `per_capita_GNP`。\n\n**涉及知识点：**\n- SELECT语句基础 (1)\n- 算术运算符\n- 条件筛选\n\n**答案：**\n```sql\nSELECT \n  Name, \n  (GNP / Population) AS per_capita_GNP\nFROM \n  country\nWHERE \n  (GNP / Population) > 10000;\n```\n\n**解题思路：**\n此题稍微复杂一些，因为它不仅要求学生能够正确地执行算术运算以计算人均GDP，还需要他们理解如何在WHERE子句中应用这样的表达式来进行进一步的数据筛选。注意处理可能出现的除零错误。\n\n---\n\n### 总结：\n本次实验涵盖了多个SQL查询的基础知识点，包括但不限于SELECT语句、聚合函数、JOIN操作等。通过这些练习，学生们可以更好地理解和掌握SQL语言的核心概念及其实际应用场景。希望每位同学都能认真完成每一道题目，并积极思考背后的逻辑原理。', null, null, null, '{\"schema_ids\": [11], \"points\": [{\"id\": 1, \"generateCount\": 1}]}');
INSERT INTO `experiments` VALUES ('13', '学生版实验报告 -   ', '根据选中的数据库模式生成的学生版实验报告', '2025-03-06 18:09:52', '2025-03-06 18:09:52', 'draft', '\"{\\\"schema_ids\\\": [11], \\\"points\\\": [{\\\"id\\\": 1, \\\"generateCount\\\": 1}]}\"', null, null, null, null, null, null);
INSERT INTO `experiments` VALUES ('14', '教师版实验报告 - 2025-03-06-23-11-25', '根据选中的数据库模式生成的教师版实验报告', '2025-03-06 23:11:25', '2025-03-06 23:11:25', 'draft', null, null, '# 教师版实验报告\n\n## 实验题目：基于World数据库的SQL查询练习\n\n### 一、去除重复行（1题）\n\n#### 题目1：\n获取所有不同城市名称。\n\n**涉及知识点：** 去除重复行\n\n**答案：**\n```sql\nSELECT DISTINCT Name \nFROM city;\n```\n\n**解题思路及答案讲解：**\n- 使用`DISTINCT`关键字可以去除查询结果中的重复项，确保每个城市名称只出现一次。\n- `Name`字段来自`city`表，表示城市名称。\n\n---\n\n### 二、WHERE子句使用（1题）\n\n#### 题目2：\n查找人口超过100万且位于欧洲的城市及其所属国家的名称和区域。\n\n**涉及知识点：** WHERE子句使用\n\n**答案：**\n```sql\nSELECT city.Name AS CityName, country.Name AS CountryName, country.Region \nFROM city \nJOIN country ON city.CountryCode = country.Code \nWHERE city.Population > 1000000 AND country.Continent = \'Europe\';\n```\n\n**解题思路及答案讲解：**\n- 使用`WHERE`子句来筛选满足条件的数据行。\n- 条件包括两部分：城市人口大于100万(`city.Population > 1000000`)以及国家所在大洲为欧洲(`country.Continent = \'Europe\'`)。\n- 使用`JOIN`将`city`表与`country`表连接起来，以便获取城市对应的国家信息。\n- 使用别名（如`CityName`、`CountryName`）使结果更易读。\n\n---\n\n### 三、SELECT语句基础（2题）\n\n#### 题目3：\n统计各大洲中不同的政府形式数量。\n\n**涉及知识点：** SELECT语句基础\n\n**答案：**\n```sql\nSELECT Continent, COUNT(DISTINCT GovernmentForm) AS DifferentGovernmentForms\nFROM country\nGROUP BY Continent;\n```\n\n**解题思路及答案讲解：**\n- 使用`COUNT(DISTINCT ...)`统计每一大洲中不同政府形式的数量。\n- `GROUP BY Continent`按大洲分组，确保每个大洲的结果单独显示。\n- `DifferentGovernmentForms`是给计数结果起的别名，便于理解输出内容。\n\n#### 题目4：\n列出人口在500万到1000万之间的城市名称及其所在地区。\n\n**涉及知识点：** SELECT语句基础\n\n**答案：**\n```sql\nSELECT city.Name, city.District \nFROM city \nWHERE city.Population BETWEEN 5000000 AND 10000000;\n```\n\n**解题思路及答案讲解：**\n- 使用`BETWEEN ... AND ...`来限定人口范围。\n- 直接从`city`表中选择所需字段（城市名称和所在地区）。\n- `WHERE`子句用于筛选符合条件的城市。\n\n---\n\n### 总结\n\n本实验通过一系列SQL查询练习，帮助学生掌握以下知识点：\n1. **去除重复行**：使用`DISTINCT`关键字避免结果集中出现重复记录。\n2. **WHERE子句使用**：利用条件表达式精确筛选数据。\n3. **SELECT语句基础**：掌握基本的字段选择、聚合函数应用及分组操作。\n\n这些技能对于理解和操作关系型数据库至关重要。通过实际操作，学生能够加深对SQL语法的理解，并提高解决实际问题的能力。', null, null, null, '{\"schema_ids\": [11], \"points\": [{\"id\": 2, \"generateCount\": 1}, {\"id\": 3, \"generateCount\": 1}, {\"id\": 1, \"generateCount\": 2}]}');
INSERT INTO `experiments` VALUES ('15', '学生版实验报告 -   ', '根据选中的数据库模式生成的学生版实验报告', '2025-03-06 23:11:43', '2025-03-06 23:11:43', 'draft', '\"{\\\"schema_ids\\\": [11], \\\"points\\\": [{\\\"id\\\": 2, \\\"generateCount\\\": 1}, {\\\"id\\\": 3, \\\"generateCount\\\": 1}, {\\\"id\\\": 1, \\\"generateCount\\\": 2}]}\"', null, '### 学生版实验报告\n\n#### 实验题目：数据库查询与SQL语句应用\n\n---\n\n#### 实验目的：\n通过本实验，学生将掌握如何使用SQL语句进行数据查询，理解去除重复行、WHERE子句的使用以及SELECT语句的基础操作。\n\n---\n\n#### 实验内容：\n\n1. **获取所有不同城市名称**\n   - **知识点**：去除重复行\n   - **答题区**：\n     ```\n     _______________________________________________________\n     _______________________________________________________\n     ```\n\n2. **查找人口超过100万且位于欧洲的城市及其所属国家的名称和区域**\n   - **知识点**：WHERE子句使用\n   - **答题区**：\n     ```\n     _______________________________________________________\n     _______________________________________________________\n     ```\n\n3. **统计各大洲中不同的政府形式数量**\n   - **知识点**：SELECT语句基础\n   - **答题区**：\n     ```\n     _______________________________________________________\n     _______________________________________________________\n     ```\n\n4. **列出人口在500万到1000万之间的城市名称及其所在地区**\n   - **知识点**：SELECT语句基础\n   - **答题区**：\n     ```\n     _______________________________________________________\n     _______________________________________________________\n     ```\n\n---\n\n#### 注意事项：\n- 每个题目后请在答题区填写相应的SQL语句。\n- 确保SQL语句语法正确，并能返回预期结果。\n- 请仔细阅读每个题目的要求，确保理解涉及的知识点。\n\n---\n\n#### 实验总结：\n通过本次实验，学生应能够熟练掌握以下知识点：\n- 如何使用`DISTINCT`关键字去除重复行。\n- 如何使用`WHERE`子句进行条件筛选。\n- 如何使用`SELECT`语句进行基本的数据查询。\n\n请在完成实验后，认真思考并总结每个知识点的应用场景和注意事项。\n\n---\n\n祝实验顺利！\n\n---\n\n**教师批改区**：\n```\n___________________________________________________________\n___________________________________________________________\n```', null, null, null, null);
INSERT INTO `experiments` VALUES ('16', '教师版实验报告 - 2025-03-06-23-27-42', '根据选中的数据库模式生成的教师版实验报告', '2025-03-06 23:27:42', '2025-03-06 23:27:42', 'draft', null, null, '# 教师版实验报告\n\n## 实验题目：基于World数据库的SQL查询练习\n\n### 一、实验目的\n通过本实验，学生将掌握如何使用SQL语句进行数据查询，特别是针对去除重复行的操作。同时，了解如何从多个表中提取和整合信息。\n\n### 二、实验环境\n- 数据库类型：MySQL\n- 数据库版本：8.0.22\n- 数据库名称：world\n- 表结构：\n  - city（城市）\n  - country（国家）\n  - countrylanguage（国家语言）\n\n### 三、实验内容及答案\n\n#### 题目1：获取所有不同城市名称\n**知识点：去除重复行**\n\n**答案：**\n```sql\nSELECT DISTINCT Name \nFROM city;\n```\n\n**解题思路及答案讲解：**\n本题要求获取所有不同的城市名称，即去除重复的城市名。`DISTINCT`关键字用于返回唯一不同的值，因此直接在`SELECT`语句后加上`DISTINCT`即可实现去重。\n\n---\n\n#### 题目2：统计各个大洲中不同的政府形式数量\n**知识点：分组与聚合函数、去除重复行**\n\n**答案：**\n```sql\nSELECT \n  Continent, \n  COUNT(DISTINCT GovernmentForm) AS DifferentGovernmentForms\nFROM \n  country\nGROUP BY \n  Continent;\n```\n\n**解题思路及答案讲解：**\n此题需要统计每个大洲中不同政府形式的数量。首先使用`COUNT(DISTINCT ...)`来计算每个大洲内不同政府形式的数量，然后用`GROUP BY`按大洲分组。这里`DISTINCT`确保了我们只统计不同的政府形式。\n\n---\n\n#### 题目3：查询所有不同的官方语言\n**知识点：去除重复行、条件筛选**\n\n**答案：**\n```sql\nSELECT DISTINCT Language \nFROM countrylanguage \nWHERE IsOfficial = \'T\';\n```\n\n**解题思路及答案讲解：**\n题目要求查询所有的官方语言。`WHERE IsOfficial = \'T\'`用于筛选出官方语言，而`DISTINCT`则确保结果集中没有重复的语言。\n\n---\n\n#### 题目4：查找不同国家首都的城市名称，且结果不重复\n**知识点：多表连接、去除重复行**\n\n**答案：**\n```sql\nSELECT DISTINCT c.Name \nFROM city c \nJOIN country co ON c.CountryCode = co.Code \nWHERE c.ID = co.Capital;\n```\n\n**解题思路及答案讲解：**\n此题涉及两个表之间的连接操作。首先通过`JOIN`将`city`表和`country`表关联起来，再利用`WHERE`子句限定只选择那些ID等于国家首都ID的城市记录。最后使用`DISTINCT`确保结果集中没有重复的城市名称。\n\n---\n\n#### 题目5：获取每个国家不同语言的种类数量，并确保国家不重复\n**知识点：多表连接、分组与聚合函数、去除重复行**\n\n**答案：**\n```sql\nSELECT \n    c.Code, \n    c.Name, \n    COUNT(DISTINCT cl.Language) AS LanguageCount\nFROM \n    country c\nJOIN \n    countrylanguage cl \nON \n    c.Code = cl.CountryCode\nGROUP BY \n    c.Code, c.Name;\n```\n\n**解题思路及答案讲解：**\n题目要求统计每个国家拥有的不同语言数量。首先通过`JOIN`将`country`表和`countrylanguage`表关联起来，接着使用`COUNT(DISTINCT ...)`计算每个国家的不同语言数量。最后用`GROUP BY`按国家代码和名称分组，以确保每个国家只出现一次。\n\n---\n\n### 四、总结\n本次实验主要围绕“去除重复行”这一知识点展开，结合了单表查询、多表连接、分组与聚合函数等SQL基本操作。通过对这些题目的练习，学生能够更好地理解如何在实际应用中灵活运用SQL语句解决具体问题。\n\n---\n\n### 五、注意事项\n1. 在编写SQL语句时要注意语法正确性；\n2. 确保查询结果符合预期逻辑；\n3. 尽量优化查询性能，避免不必要的全表扫描；\n4. 注意SQL注入风险，确保输入安全。\n\n---\n\n### 六、思考题\n1. 如果想要进一步提高查询效率，可以考虑哪些优化措施？\n2. 对于大数据量的情况下，如何评估SQL查询的性能？\n\n---\n\n希望这份实验报告能帮助学生更好地理解和掌握相关知识，为后续学习打下坚实的基础。', null, null, null, '{\"schema_ids\": [11], \"points\": [{\"id\": 2, \"generateCount\": 1}]}');
INSERT INTO `experiments` VALUES ('17', '学生版实验报告 -   ', '根据选中的数据库模式生成的学生版实验报告', '2025-03-06 23:28:06', '2025-03-06 23:28:06', 'draft', '\"{\\\"schema_ids\\\": [11], \\\"points\\\": [{\\\"id\\\": 2, \\\"generateCount\\\": 1}]}\"', null, '### 学生版实验报告\n\n#### 实验题目：基于世界数据库的SQL查询练习\n\n---\n\n**实验目的**：通过本实验，学生将掌握如何使用SQL查询语句从数据库中获取特定信息，并理解SQL中去除重复行的操作。\n\n---\n\n### 1. 获取所有不同城市名称\n\n**题目描述**：\n请编写一条SQL查询语句，用于获取`city`表中的所有不同城市名称。\n\n**涉及知识点**：\n- 去除重复行\n\n**答题区**：\n\n```sql\n-- 请在此处填写您的SQL查询语句\n```\n\n---\n\n### 2. 统计各个大洲中不同的政府形式数量\n\n**题目描述**：\n请编写一条SQL查询语句，统计每个大洲中不同的政府形式数量。结果应按大洲分组显示。\n\n**涉及知识点**：\n- 去除重复行\n\n**答题区**：\n\n```sql\n-- 请在此处填写您的SQL查询语句\n```\n\n---\n\n### 3. 查询所有不同的官方语言\n\n**题目描述**：\n请编写一条SQL查询语句，查询`countrylanguage`表中所有不同的官方语言（即`IsOfficial`为\'T\'的语言）。\n\n**涉及知识点**：\n- 去除重复行\n\n**答题区**：\n\n```sql\n-- 请在此处填写您的SQL查询语句\n```\n\n---\n\n### 4. 查找不同国家首都的城市名称，且结果不重复\n\n**题目描述**：\n请编写一条SQL查询语句，查找不同国家首都的城市名称，并确保结果不重复。需要连接`city`表和`country`表进行查询。\n\n**涉及知识点**：\n- 去除重复行\n\n**答题区**：\n\n```sql\n-- 请在此处填写您的SQL查询语句\n```\n\n---\n\n### 5. 获取每个国家不同语言的种类数量，并确保国家不重复\n\n**题目描述**：\n请编写一条SQL查询语句，获取每个国家不同语言的种类数量，并确保国家不重复。需要连接`country`表和`countrylanguage`表进行查询。\n\n**涉及知识点**：\n- 去除重复行\n\n**答题区**：\n\n```sql\n-- 请在此处填写您的SQL查询语句\n```\n\n---\n\n**总结**：\n\n在本次实验中，我们主要练习了如何使用`DISTINCT`关键字去除查询结果中的重复行。通过这些练习，学生可以更好地理解和掌握SQL查询的基本操作，并能够灵活运用这些技能解决实际问题。\n\n---\n\n**注意事项**：\n\n1. 在编写SQL查询时，请确保语法正确。\n2. 注意表与表之间的关系，合理使用`JOIN`语句。\n3. 确保查询结果符合题目要求，特别是去重的要求。\n\n---\n\n**提交要求**：\n\n请将完成的SQL查询语句提交给教师进行批改。每个查询语句应确保逻辑正确且结果符合预期。', null, null, null, null);
INSERT INTO `experiments` VALUES ('18', '教师版实验报告 - 2025-03-06-23-31-51', '根据选中的数据库模式生成的教师版实验报告', '2025-03-06 23:31:51', '2025-03-06 23:31:51', 'draft', null, null, '# 教师版实验报告\n\n## 实验题目：基于World数据库的SQL查询练习\n\n### 实验目的：\n通过本实验，学生将掌握如何使用SQL语句从多个表中提取和处理数据，了解如何去除重复行、分组统计以及多表联结查询等常用操作。\n\n---\n\n### 实验内容：\n\n#### 1. 获取所有不同城市名称\n**题目描述：**\n编写SQL语句，获取`city`表中所有不同的城市名称。\n\n**涉及知识点：**\n- 去除重复行\n\n**答案：**\n```sql\nSELECT DISTINCT Name \nFROM city;\n```\n\n**解题思路及答案讲解：**\n- 使用`DISTINCT`关键字可以确保返回的结果集中每个城市名称只出现一次。这里我们只需要从`city`表中选择`Name`列，并用`DISTINCT`来消除重复的城市名称。\n\n---\n\n#### 2. 统计各个大洲中不同的政府形式数量\n**题目描述：**\n编写SQL语句，统计每个大洲中不同的政府形式的数量。\n\n**涉及知识点：**\n- 分组统计\n- 去除重复行\n\n**答案：**\n```sql\nSELECT \n  Continent, \n  COUNT(DISTINCT GovernmentForm) AS DifferentGovernmentForms\nFROM \n  country\nGROUP BY \n  Continent;\n```\n\n**解题思路及答案讲解：**\n- 首先按`Continent`进行分组（`GROUP BY`），然后在每个分组内统计不同的政府形式数量。\n- 使用`COUNT(DISTINCT GovernmentForm)`来计算每个大洲中不同政府形式的数量，确保不会重复计数相同的政府形式。\n\n---\n\n#### 3. 查询所有不同的官方语言\n**题目描述：**\n编写SQL语句，查询`countrylanguage`表中所有的官方语言（即`IsOfficial`为\'T\'）。\n\n**涉及知识点：**\n- 条件筛选\n- 去除重复行\n\n**答案：**\n```sql\nSELECT DISTINCT Language \nFROM countrylanguage \nWHERE IsOfficial = \'T\';\n```\n\n**解题思路及答案讲解：**\n- 使用`WHERE`子句筛选出官方语言（`IsOfficial = \'T\'`）。\n- 使用`DISTINCT`关键字确保结果集中每种语言只出现一次。\n\n---\n\n#### 4. 查找不同国家首都的城市名称，且结果不重复\n**题目描述：**\n编写SQL语句，查找不同国家首都的城市名称，确保结果不重复。\n\n**涉及知识点：**\n- 多表联结查询\n- 去除重复行\n\n**答案：**\n```sql\nSELECT DISTINCT c.Name \nFROM city c \nJOIN country co ON c.CountryCode = co.Code \nWHERE c.ID = co.Capital;\n```\n\n**解题思路及答案讲解：**\n- 使用`JOIN`语句将`city`表和`country`表联结起来，条件是城市的`CountryCode`与国家的`Code`相匹配。\n- 使用`WHERE`子句筛选出首都城市（`c.ID = co.Capital`）。\n- 使用`DISTINCT`关键字确保结果集中每个首都名称只出现一次。\n\n---\n\n#### 5. 获取每个国家不同语言的种类数量，并确保国家不重复\n**题目描述：**\n编写SQL语句，获取每个国家不同语言的种类数量，并确保国家不重复。\n\n**涉及知识点：**\n- 多表联结查询\n- 分组统计\n- 去除重复行\n\n**答案：**\n```sql\nSELECT \n    c.Code, \n    c.Name, \n    COUNT(DISTINCT cl.Language) AS LanguageCount\nFROM \n    country c\nJOIN \n    countrylanguage cl \nON \n    c.Code = cl.CountryCode\nGROUP BY \n    c.Code, c.Name;\n```\n\n**解题思路及答案讲解：**\n- 使用`JOIN`语句将`country`表和`countrylanguage`表联结起来，条件是国家代码相同。\n- 按照国家代码和国家名称进行分组（`GROUP BY c.Code, c.Name`）。\n- 使用`COUNT(DISTINCT cl.Language)`统计每个国家中不同语言的数量，确保不会重复计数相同的语言。\n\n---\n\n### 总结：\n本次实验主要涵盖了SQL中的去重操作（`DISTINCT`）、分组统计（`GROUP BY`）、条件筛选（`WHERE`）以及多表联结查询（`JOIN`）。通过这些练习，学生可以更好地理解如何利用SQL对关系型数据库进行有效的数据检索和分析。', null, null, null, '{\"schema_ids\": [11], \"points\": [{\"id\": 2, \"generateCount\": 1}]}');
INSERT INTO `experiments` VALUES ('19', '学生版实验报告 -   ', '根据选中的数据库模式生成的学生版实验报告', '2025-03-06 23:32:20', '2025-03-06 23:32:20', 'draft', '\"{\\\"schema_ids\\\": [11], \\\"points\\\": [{\\\"id\\\": 2, \\\"generateCount\\\": 1}]}\"', null, '### 学生版实验报告\n\n#### 实验题目：基于世界数据库的SQL查询练习\n\n---\n\n#### 1. 获取所有不同城市名称\n\n**题目描述：**\n编写一条SQL语句，获取`city`表中所有的不同城市名称。\n\n**涉及知识点：**\n- 去除重复行\n\n**答题区：**\n\n```\n-- 请在此处填写你的SQL查询语句\n```\n\n\n---\n\n#### 2. 统计各个大洲中不同的政府形式数量\n\n**题目描述：**\n编写一条SQL语句，统计`country`表中各个大洲中不同的政府形式数量。\n\n**涉及知识点：**\n- 分组统计\n- 去除重复行\n\n**答题区：**\n\n```\n-- 请在此处填写你的SQL查询语句\n```\n\n\n---\n\n#### 3. 查询所有不同的官方语言\n\n**题目描述：**\n编写一条SQL语句，查询`countrylanguage`表中所有不同的官方语言。\n\n**涉及知识点：**\n- 条件筛选\n- 去除重复行\n\n**答题区：**\n\n```\n-- 请在此处填写你的SQL查询语句\n```\n\n\n---\n\n#### 4. 查找不同国家首都的城市名称，且结果不重复\n\n**题目描述：**\n编写一条SQL语句，查找`city`表和`country`表中不同国家首都的城市名称，并确保结果不重复。\n\n**涉及知识点：**\n- 表连接\n- 条件筛选\n- 去除重复行\n\n**答题区：**\n\n```\n-- 请在此处填写你的SQL查询语句\n```\n\n\n---\n\n#### 5. 获取每个国家不同语言的种类数量，并确保国家不重复\n\n**题目描述：**\n编写一条SQL语句，获取`country`表和`countrylanguage`表中每个国家不同语言的种类数量，并确保国家不重复。\n\n**涉及知识点：**\n- 表连接\n- 分组统计\n- 去除重复行\n\n**答题区：**\n\n```\n-- 请在此处填写你的SQL查询语句\n```\n\n\n---\n\n### 总结\n\n本次实验主要围绕世界数据库中的`city`、`country`和`countrylanguage`三个表进行SQL查询练习。通过这些题目，学生可以掌握以下知识点：\n\n- **去除重复行**：使用`DISTINCT`关键字来去除查询结果中的重复行。\n- **分组统计**：使用`GROUP BY`子句对数据进行分组，并结合聚合函数（如`COUNT`）进行统计。\n- **条件筛选**：使用`WHERE`子句根据特定条件过滤数据。\n- **表连接**：使用`JOIN`操作将多个表的数据关联起来进行查询。\n\n希望同学们通过本次实验，能够更加熟练地掌握SQL查询的基本语法和常用技巧。', null, null, null, null);
INSERT INTO `experiments` VALUES ('20', '教师版实验报告 - 2025-03-06-23-32-59', '根据选中的数据库模式生成的教师版实验报告', '2025-03-06 23:32:59', '2025-03-06 23:32:59', 'draft', null, null, '### 教师版实验报告\n\n#### 实验题目：基于World数据库的SQL查询练习\n\n本实验旨在通过一系列SQL查询，帮助学生掌握如何从关系型数据库中提取和分析数据。我们将使用包含城市、国家和语言信息的`world`数据库进行查询练习。\n\n---\n\n### 1. 获取所有不同城市名称\n\n**题目描述：**\n编写一个SQL查询，获取所有不同的城市名称。\n\n**涉及知识点：**\n- 去除重复行（1题）\n\n**答案：**\n```sql\nSELECT DISTINCT Name \nFROM city;\n```\n\n**解题思路：**\n使用`DISTINCT`关键字可以确保查询结果中的每一行都是唯一的。这里我们只需要从`city`表中选择不同的城市名称。\n\n---\n\n### 2. 统计各个大洲中不同的政府形式数量\n\n**题目描述：**\n编写一个SQL查询，统计每个大洲中不同的政府形式的数量。\n\n**涉及知识点：**\n- 分组与聚合函数（COUNT, GROUP BY）\n\n**答案：**\n```sql\nSELECT \n  Continent, \n  COUNT(DISTINCT GovernmentForm) AS DifferentGovernmentForms\nFROM \n  country\nGROUP BY \n  Continent;\n```\n\n**解题思路：**\n首先，我们需要按大洲分组（`GROUP BY Continent`），然后在每个分组内统计不同的政府形式数量（`COUNT(DISTINCT GovernmentForm)`）。这样可以得到每个大洲的不同政府形式数量。\n\n---\n\n### 3. 查询所有不同的官方语言\n\n**题目描述：**\n编写一个SQL查询，查询所有不同的官方语言。\n\n**涉及知识点：**\n- 条件筛选（WHERE子句）\n- 去除重复行（1题）\n\n**答案：**\n```sql\nSELECT DISTINCT Language \nFROM countrylanguage \nWHERE IsOfficial = \'T\';\n```\n\n**解题思路：**\n我们需要从`countrylanguage`表中筛选出所有官方语言（`IsOfficial = \'T\'`），并使用`DISTINCT`关键字确保结果中的每种语言只出现一次。\n\n---\n\n### 4. 查找不同国家首都的城市名称，且结果不重复\n\n**题目描述：**\n编写一个SQL查询，查找不同国家首都的城市名称，并确保结果不重复。\n\n**涉及知识点：**\n- 内连接（JOIN）\n- 去除重复行（1题）\n\n**答案：**\n```sql\nSELECT DISTINCT c.Name \nFROM city c \nJOIN country co ON c.CountryCode = co.Code \nWHERE c.ID = co.Capital;\n```\n\n**解题思路：**\n我们需要将`city`表和`country`表通过`CountryCode`字段进行内连接（`JOIN`），并筛选出那些城市ID等于国家首都ID的记录（`c.ID = co.Capital`）。最后，使用`DISTINCT`关键字确保结果中的每个首都名称只出现一次。\n\n---\n\n### 5. 获取每个国家不同语言的种类数量，并确保国家不重复\n\n**题目描述：**\n编写一个SQL查询，获取每个国家不同语言的种类数量，并确保国家不重复。\n\n**涉及知识点：**\n- 内连接（JOIN）\n- 分组与聚合函数（COUNT, GROUP BY）\n\n**答案：**\n```sql\nSELECT \n    c.Code, \n    c.Name, \n    COUNT(DISTINCT cl.Language) AS LanguageCount\nFROM \n    country c\nJOIN \n    countrylanguage cl \nON \n    c.Code = cl.CountryCode\nGROUP BY \n    c.Code, c.Name;\n```\n\n**解题思路：**\n首先，我们将`country`表和`countrylanguage`表通过`Code`字段进行内连接（`JOIN`），然后按国家代码和名称分组（`GROUP BY c.Code, c.Name`），最后统计每个国家中不同语言的数量（`COUNT(DISTINCT cl.Language)`）。\n\n---\n\n### 总结\n\n本实验涵盖了多个SQL查询技巧，包括去除重复行、条件筛选、内连接以及分组与聚合函数的应用。通过这些练习，学生可以更好地理解如何从关系型数据库中提取和分析数据。每个题目都提供了详细的解题思路和答案讲解，帮助学生巩固所学知识。\n\n---\n\n### 知识点总结\n\n- **去除重复行**（共出现4次）：使用`DISTINCT`关键字确保查询结果中的每一行都是唯一的。\n- **条件筛选**（出现1次）：使用`WHERE`子句对查询结果进行过滤。\n- **内连接**（出现2次）：使用`JOIN`将两个或多个表关联起来。\n- **分组与聚合函数**（出现2次）：使用`GROUP BY`和聚合函数（如`COUNT`）对数据进行分组和统计。\n\n希望这份实验报告能帮助学生更好地理解和掌握SQL查询的基础知识。', null, null, null, '{\"schema_ids\": [11], \"points\": [{\"id\": 2, \"generateCount\": 1}]}');
INSERT INTO `experiments` VALUES ('21', '学生版实验报告 -   ', '根据选中的数据库模式生成的学生版实验报告', '2025-03-06 23:33:28', '2025-03-06 23:33:28', 'draft', '\"{\\\"schema_ids\\\": [11], \\\"points\\\": [{\\\"id\\\": 2, \\\"generateCount\\\": 1}]}\"', null, '### 学生版实验报告\n\n#### 实验题目：基于World数据库的SQL查询练习\n\n本实验旨在通过一系列SQL查询练习，帮助学生掌握如何使用SQL进行数据查询、聚合和连接操作。我们将基于`world`数据库中的`city`、`country`和`countrylanguage`三个表进行查询。\n\n---\n\n#### 1. 获取所有不同城市名称\n\n**题目描述：**\n请编写SQL语句，获取数据库中所有不同的城市名称。\n\n**涉及知识点：**\n- 去除重复行\n\n**答题区：**\n\n```sql\n-- 请在此处编写SQL语句\n```\n\n---\n\n#### 2. 统计各个大洲中不同的政府形式数量\n\n**题目描述：**\n请编写SQL语句，统计每个大洲中不同政府形式的数量。\n\n**涉及知识点：**\n- 聚合函数（COUNT）\n- 分组（GROUP BY）\n\n**答题区：**\n\n```sql\n-- 请在此处编写SQL语句\n```\n\n---\n\n#### 3. 查询所有不同的官方语言\n\n**题目描述：**\n请编写SQL语句，查询所有不同的官方语言。\n\n**涉及知识点：**\n- 去除重复行\n- 条件过滤（WHERE）\n\n**答题区：**\n\n```sql\n-- 请在此处编写SQL语句\n```\n\n---\n\n#### 4. 查找不同国家首都的城市名称，且结果不重复\n\n**题目描述：**\n请编写SQL语句，查找不同国家首都的城市名称，并确保结果不重复。\n\n**涉及知识点：**\n- 去除重复行\n- 表连接（JOIN）\n\n**答题区：**\n\n```sql\n-- 请在此处编写SQL语句\n```\n\n---\n\n#### 5. 获取每个国家不同语言的种类数量，并确保国家不重复\n\n**题目描述：**\n请编写SQL语句，获取每个国家不同语言的种类数量，并确保国家不重复。\n\n**涉及知识点：**\n- 聚合函数（COUNT）\n- 分组（GROUP BY）\n- 表连接（JOIN）\n\n**答题区：**\n\n```sql\n-- 请在此处编写SQL语句\n```\n\n---\n\n### 总结\n\n本次实验主要涵盖了以下知识点：\n- **去除重复行**：通过`DISTINCT`关键字去除查询结果中的重复行。\n- **聚合函数**：如`COUNT`用于统计数量。\n- **分组**：通过`GROUP BY`对数据进行分组汇总。\n- **条件过滤**：通过`WHERE`子句筛选符合条件的数据。\n- **表连接**：通过`JOIN`将多个表的数据关联起来进行查询。\n\n希望通过对这些题目的练习，能够加深对SQL查询的理解和应用能力。\n\n---\n\n**注意事项：**\n- 在编写SQL语句时，请注意语法正确性。\n- 确保查询结果符合题目要求。\n- 提交实验报告前，请仔细检查并运行每条SQL语句，确保其正确性和完整性。\n\n祝你学习愉快！', null, null, null, null);
INSERT INTO `experiments` VALUES ('22', '教师版实验报告 - 2025-03-06-23-36-34', '根据选中的数据库模式生成的教师版实验报告', '2025-03-06 23:36:34', '2025-03-06 23:36:34', 'draft', null, null, '# 教师版实验报告\n\n## 实验题目：基于世界数据库的SQL查询与操作\n\n### 实验目的\n通过本实验，学生将掌握以下技能：\n- 使用SQL创建和管理临时表、视图\n- 理解并应用外键约束、主键约束等数据库设计概念\n- 执行各种类型的SQL查询（包括内连接、外连接、聚合函数等）\n- 插入和编辑数据\n- 使用日期函数和字符函数进行数据处理\n- 去除重复行及复杂条件查询\n\n### 实验环境\n- 数据库类型：MySQL\n- 数据库版本：8.0.22\n- 数据库名称：world\n\n### 实验内容及答案解析\n\n#### 1. 创建一个临时表，包含人口超过100万的城市及其所属国家的名称和大洲信息\n**知识点：创建临时表**\n\n```sql\nCREATE TEMPORARY TABLE LargeCities AS\nSELECT \n    c.Name AS CityName,\n    co.Name AS CountryName,\n    co.Continent\nFROM \n    city c\nJOIN \n    country co ON c.CountryCode = co.Code\nWHERE \n    c.Population > 1000000;\n```\n\n**解题思路：**\n- 使用`CREATE TEMPORARY TABLE`语句创建一个临时表。\n- 通过`JOIN`语句连接`city`和`country`表，筛选出人口大于100万的城市，并选择所需的字段。\n\n#### 2. 创建一个临时表，统计每个大洲的国家数量，并按国家数量降序排列\n**知识点：创建临时表**\n\n```sql\nCREATE TEMPORARY TABLE continent_country_count AS\nSELECT \n  Continent, \n  COUNT(*) AS CountryCount\nFROM \n  country\nGROUP BY \n  Continent\nORDER BY \n  CountryCount DESC;\n```\n\n**解题思路：**\n- 使用`CREATE TEMPORARY TABLE`语句创建一个临时表。\n- 使用`GROUP BY`和`COUNT`函数统计每个大洲的国家数量。\n- 使用`ORDER BY`对结果进行排序。\n\n#### 3. 创建一个视图，显示每个国家的首都城市信息，包括国家名称、首都名称、所在大洲和首都人口\n**知识点：创建视图**\n\n```sql\nCREATE VIEW CapitalCityInfo AS\nSELECT \n    ctry.Name AS CountryName, \n    cit.Name AS CapitalName, \n    ctry.Continent AS Continent, \n    cit.Population AS CapitalPopulation\nFROM \n    country ctry\nJOIN \n    city cit ON ctry.Capital = cit.ID;\n```\n\n**解题思路：**\n- 使用`CREATE VIEW`语句创建一个视图。\n- 通过`JOIN`语句连接`country`和`city`表，选择所需的字段。\n\n#### 4. 插入一个新的城市记录，并确保该城市的国家代码存在于国家表中\n**知识点：插入数据**\n\n```sql\nINSERT INTO city (Name, CountryCode, District, Population)\nSELECT \'Newville\', \'USA\', \'California\', 50000\nFROM dual\nWHERE EXISTS (SELECT 1 FROM country WHERE Code = \'USA\');\n```\n\n**解题思路：**\n- 使用`INSERT INTO`语句插入新记录。\n- 使用`EXISTS`子查询确保国家代码存在。\n\n#### 5. 统计每个大洲中人口最多的前5个城市及其所在国家\n**知识点：聚合函数、外连接**\n\n```sql\nSELECT \n    c.Continent,\n    ci.Name AS CityName,\n    co.Name AS CountryName,\n    ci.Population\nFROM \n    country co\nJOIN \n    city ci ON co.Code = ci.CountryCode\nWHERE \n    (c.Continent, ci.Population) IN (\n        SELECT \n            c2.Continent, \n            Population\n        FROM \n            city ci2\n        JOIN \n            country co2 ON ci2.CountryCode = co2.Code\n        WHERE \n            c2.Continent = c.Continent\n        ORDER BY \n            Population DESC\n        LIMIT 5\n    )\nORDER BY \n    c.Continent, \n    ci.Population DESC;\n```\n\n**解题思路：**\n- 使用`JOIN`语句连接`country`和`city`表。\n- 使用子查询获取每个大洲中人口最多的前5个城市。\n- 使用`IN`关键字筛选符合条件的城市。\n\n#### 6. 分析各国最大城市的人口占全国总人口的比例，并按比例降序排列\n**知识点：聚合函数、复杂条件查询**\n\n```sql\nSELECT \n    ctry.Name AS CountryName,\n    ct.Name AS MaxCityName,\n    (ct.Population / ctry.Population) * 100 AS PopulationRatio\nFROM \n    country ctry\nJOIN \n    city ct ON ctry.Code = ct.CountryCode\nWHERE \n    ct.ID IN (\n        SELECT \n            c.ID\n        FROM \n            city c\n        WHERE \n            c.CountryCode = ctry.Code\n        ORDER BY \n            c.Population DESC\n        LIMIT 1\n    )\nORDER BY \n    PopulationRatio DESC;\n```\n\n**解题思路：**\n- 使用`JOIN`语句连接`country`和`city`表。\n- 使用子查询获取每个国家的最大城市。\n- 计算最大城市人口占全国总人口的比例。\n- 使用`ORDER BY`对结果进行排序。\n\n#### 7. 查找独立年份（IndepYear）不为空且生命预期（LifeExpectancy）大于70岁的所有国家信息\n**知识点：WHERE子句使用**\n\n```sql\nSELECT *\nFROM country\nWHERE IndepYear IS NOT NULL AND LifeExpectancy > 70;\n```\n\n**解题思路：**\n- 使用`WHERE`子句筛选符合条件的记录。\n\n#### 8. 获取官方语言为英语的国家列表及其对应的政府形式和国家元首\n**知识点：内连接**\n\n```sql\nSELECT c.Name, c.GovernmentForm, c.HeadOfState\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE cl.Language = \'English\' AND cl.IsOfficial = \'T\';\n```\n\n**解题思路：**\n- 使用`JOIN`语句连接`country`和`countrylanguage`表。\n- 使用`WHERE`子句筛选官方语言为英语的国家。\n\n#### 9. 统计每个国家的官方语言数量，并显示没有官方语言的国家\n**知识点：去除重复行**\n\n```sql\nSELECT \n  c.Code,\n  c.Name,\n  COUNT(cl.Language) AS OfficialLanguageCount\nFROM \n  country c\n  LEFT JOIN countrylanguage cl ON c.Code = cl.CountryCode AND cl.IsOfficial = \'T\'\nGROUP BY \n  c.Code, c.Name\nHAVING \n  OfficialLanguageCount = 0 OR OfficialLanguageCount IS NOT NULL\nORDER BY \n  OfficialLanguageCount ASC;\n```\n\n**解题思路：**\n- 使用`LEFT JOIN`语句连接`country`和`countrylanguage`表。\n- 使用`GROUP BY`和`COUNT`函数统计每个国家的官方语言数量。\n- 使用`HAVING`子句筛选没有官方语言的国家。\n\n#### 10. 分析各地区（Region）的城市分布情况，统计每个地区拥有的城市数量以及平均城市人口，结果按照地区名称排序，并显示查询执行的日期\n**知识点：聚合函数、日期函数**\n\n```sql\nSELECT \n    c.Region, \n    COUNT(ci.ID) AS CityCount, \n    AVG(ci.Population) AS AvgCityPopulation,\n    CURDATE() AS QueryDate\nFROM \n    country c\nJOIN \n    city ci ON c.Code = ci.CountryCode\nGROUP BY \n    c.Region\nORDER BY \n    c.Region ASC;\n```\n\n**解题思路：**\n- 使用`JOIN`语句连接`country`和`city`表。\n- 使用`GROUP BY`和`COUNT`、`AVG`函数统计每个地区的城市数量和平均人口。\n- 使用`CURDATE()`函数获取当前日期。\n\n---\n\n### 总结\n通过本次实验，学生应能熟练掌握SQL的基本语法和常用操作，包括创建临时表、视图、插入数据、聚合函数、连接查询等。同时，学生还应理解如何使用复杂的条件查询和去除重复行等高级技巧。希望学生在完成实验后，能够更加深入地理解SQL查询的设计与实现。', null, null, null, '{\"schema_ids\": [9], \"points\": [{\"id\": 22, \"generateCount\": 2}, {\"id\": 21, \"generateCount\": 1}, {\"id\": 20, \"generateCount\": 1}, {\"id\": 15, \"generateCount\": 1}, {\"id\": 14, \"generateCount\": 1}, {\"id\": 13, \"generateCount\": 1}, {\"id\": 12, \"generateCount\": 1}, {\"id\": 11, \"generateCount\": 1}, {\"id\": 10, \"generateCount\": 1}, {\"id\": 9, \"generateCount\": 1}, {\"id\": 8, \"generateCount\": 1}, {\"id\": 7, \"generateCount\": 1}, {\"id\": 6, \"generateCount\": 1}, {\"id\": 5, \"generateCount\": 1}, {\"id\": 4, \"generateCount\": 1}, {\"id\": 3, \"generateCount\": 1}, {\"id\": 2, \"generateCount\": 1}, {\"id\": 1, \"generateCount\": 2}]}');
INSERT INTO `experiments` VALUES ('23', '学生版实验报告 -   ', '根据选中的数据库模式生成的学生版实验报告', '2025-03-06 23:37:35', '2025-03-06 23:37:35', 'draft', '\"{\\\"schema_ids\\\": [9], \\\"points\\\": [{\\\"id\\\": 22, \\\"generateCount\\\": 2}, {\\\"id\\\": 21, \\\"generateCount\\\": 1}, {\\\"id\\\": 20, \\\"generateCount\\\": 1}, {\\\"id\\\": 15, \\\"generateCount\\\": 1}, {\\\"id\\\": 14, \\\"generateCount\\\": 1}, {\\\"id\\\": 13, \\\"generateCount\\\": 1}, {\\\"id\\\": 12, \\\"generateCount\\\": 1}, {\\\"id\\\": 11, \\\"generateCount\\\": 1}, {\\\"id\\\": 10, \\\"generateCount\\\": 1}, {\\\"id\\\": 9, \\\"generateCount\\\": 1}, {\\\"id\\\": 8, \\\"generateCount\\\": 1}, {\\\"id\\\": 7, \\\"generateCount\\\": 1}, {\\\"id\\\": 6, \\\"generateCount\\\": 1}, {\\\"id\\\": 5, \\\"generateCount\\\": 1}, {\\\"id\\\": 4, \\\"generateCount\\\": 1}, {\\\"id\\\": 3, \\\"generateCount\\\": 1}, {\\\"id\\\": 2, \\\"generateCount\\\": 1}, {\\\"id\\\": 1, \\\"generateCount\\\": 2}]}\"', null, '# 学生版实验报告\n\n## 实验题目：数据库查询与操作练习\n\n### 实验目的\n本实验旨在帮助学生掌握SQL的基本语法和高级用法，包括创建临时表、视图、外键约束等知识点。通过一系列的SQL查询和操作，提高学生对数据库的理解和实际应用能力。\n\n---\n\n### 实验内容\n\n#### 1. 创建临时表\n**题目:** 创建一个临时表，包含人口超过100万的城市及其所属国家的名称和大洲信息。\n- **涉及知识点:** 创建临时表\n\n答题区：\n```sql\n-- 在这里输入你的SQL语句\n```\n\n**题目:** 创建一个临时表，统计每个大洲的国家数量，并按国家数量降序排列。\n- **涉及知识点:** 创建临时表\n\n答题区：\n```sql\n-- 在这里输入你的SQL语句\n```\n\n#### 2. 创建视图\n**题目:** 创建一个视图，显示每个国家的首都城市信息，包括国家名称、首都名称、所在大洲和首都人口。通过这个视图可以简化查询首都相关信息的操作。\n- **涉及知识点:** 创建视图\n\n答题区：\n```sql\n-- 在这里输入你的SQL语句\n```\n\n#### 3. 外键约束\n**题目:** 根据给定的数据库模式，描述如何设置`city`表中的`CountryCode`字段作为外键，引用`country`表中的`Code`字段。\n- **涉及知识点:** 外键约束\n\n答题区：\n```sql\n-- 在这里输入你的SQL语句\n```\n\n#### 4. 创建用户\n**题目:** 描述如何创建一个新用户，并授予该用户对`world`数据库的查询权限。\n- **涉及知识点:** 创建用户\n\n答题区：\n```sql\n-- 在这里输入你的SQL语句\n```\n\n#### 5. 主键约束\n**题目:** 根据给定的数据库模式，描述如何设置`city`表中的`ID`字段为主键。\n- **涉及知识点:** 主键约束\n\n答题区：\n```sql\n-- 在这里输入你的SQL语句\n```\n\n#### 6. 创建索引\n**题目:** 为`country`表中的`Name`字段创建索引，以加快查询速度。\n- **涉及知识点:** 创建索引\n\n答题区：\n```sql\n-- 在这里输入你的SQL语句\n```\n\n#### 7. 插入数据\n**题目:** 插入一个新的城市记录，并确保该城市的国家代码存在于国家表中。例如，插入一个名为“Newville”的城市，属于国家代码为“USA”的国家，位于“California”地区，人口为50000。\n- **涉及知识点:** 插入数据\n\n答题区：\n```sql\n-- 在这里输入你的SQL语句\n```\n\n#### 8. 创建表\n**题目:** 创建一个新的表`new_table`，包含以下字段：`id`（整数，主键）、`name`（字符串，最大长度50）和`population`（整数，默认值为0）。\n- **涉及知识点:** 创建表\n\n答题区：\n```sql\n-- 在这里输入你的SQL语句\n```\n\n#### 9. 单行子查询 编辑\n**题目:** 使用单行子查询查找独立年份最早的国家的名称、大洲和政府形式。\n- **涉及知识点:** 单行子查询 编辑\n\n答题区：\n```sql\n-- 在这里输入你的SQL语句\n```\n\n#### 10. 聚合函数\n**题目:** 统计每个大洲中人口最多的前5个城市及其所在国家的信息。\n- **涉及知识点:** 聚合函数\n\n答题区：\n```sql\n-- 在这里输入你的SQL语句\n```\n\n#### 11. 外连接\n**题目:** 查找所有城市及其所属国家的信息，包括那些没有城市的国家。\n- **涉及知识点:** 外连接\n\n答题区：\n```sql\n-- 在这里输入你的SQL语句\n```\n\n#### 12. 内连接\n**题目:** 查找官方语言为英语的国家，并显示这些国家的名称、所属大洲和政府形式。\n- **涉及知识点:** 内连接\n\n答题区：\n```sql\n-- 在这里输入你的SQL语句\n```\n\n#### 13. 日期函数\n**题目:** 统计每个大洲的城市数量和平均人口，并在结果中显示统计年份为当前年份。\n- **涉及知识点:** 日期函数\n\n答题区：\n```sql\n-- 在这里输入你的SQL语句\n```\n\n#### 14. 字符函数\n**题目:** 显示所有城市名称，其中城市名称中的第一个字母大写，其余字母小写，并按修改后的城市名称排序。\n- **涉及知识点:** 字符函数\n\n答题区：\n```sql\n-- 在这里输入你的SQL语句\n```\n\n#### 15. 复杂条件查询\n**题目:** 查找人口超过100万且所在国家独立年份在1950年之后的城市信息，包括城市名称、所属国家名称、所属大洲和城市人口。\n- **涉及知识点:** 复杂条件查询\n\n答题区：\n```sql\n-- 在这里输入你的SQL语句\n```\n\n#### 16. WHERE子句使用\n**题目:** 查询人口在50万到100万之间且所属国家代码以\'A\'开头的城市名称和人口数。\n- **涉及知识点:** WHERE子句使用\n\n答题区：\n```sql\n-- 在这里输入你的SQL语句\n```\n\n#### 17. 去除重复行\n**题目:** 获取所有官方语言，去除重复的语言条目。\n- **涉及知识点:** 去除重复行\n\n答题区：\n```sql\n-- 在这里输入你的SQL语句\n```\n\n#### 18. SELECT语句基础\n**题目:** 查询所有位于欧洲且人口超过200万的城市及其所属国家的名称、首都和所在区域。\n- **涉及知识点:** SELECT语句基础\n\n答题区：\n```sql\n-- 在这里输入你的SQL语句\n```\n\n**题目:** 查询城市表中人口超过1000万的城市名称和所属国家代码，并将人口数以百万为单位显示（列别名为人口_百万）。\n- **涉及知识点:** SELECT语句基础\n\n答题区：\n```sql\n-- 在这里输入你的SQL语句\n```\n\n---\n\n### 实验总结\n请在完成上述题目后，简要总结你所学到的知识点，并反思在实验过程中遇到的问题及解决方案。\n\n---\n\n### 注意事项\n1. 每个题目的答案应严格按照题目要求编写SQL语句。\n2. 确保SQL语句的正确性和完整性。\n3. 实验结束后，请提交完整的实验报告。\n\n---\n\n祝你实验顺利！\n\n---\n\n如有任何问题，请随时联系助教或老师。', null, null, null, null);
INSERT INTO `experiments` VALUES ('24', '教师版实验报告 - 2025-03-07-11-22-40', '根据选中的数据库模式生成的教师版实验报告', '2025-03-07 11:22:40', '2025-03-07 11:22:40', 'draft', null, null, '### 教师版实验报告\n\n#### 实验题目：基于World数据库的SQL查询练习\n\n#### 实验目的：\n通过一系列SQL查询操作，帮助学生掌握基础的SELECT语句使用方法，理解如何从多个表中提取和处理数据，以及如何进行简单的聚合和排序操作。\n\n---\n\n### 实验内容及解析\n\n#### 1. 查询所有人口超过1000万的城市名称和所属国家代码，并将城市人口命名为 `city_population`\n\n**知识点：**\n- SELECT语句基础（1）\n\n**答案：**\n```sql\nSELECT Name, CountryCode, Population AS city_population\nFROM city\nWHERE Population > 10000000;\n```\n\n**解题思路：**\n- 使用`SELECT`语句选择所需的字段。\n- 使用`FROM`指定表名。\n- 使用`WHERE`子句筛选出人口大于1000万的城市。\n- 使用`AS`关键字为`Population`字段重命名。\n\n**答案讲解：**\n此查询返回所有人口超过1000万的城市的名称、所属国家代码以及人口数量，并将人口数量字段重命名为`city_population`。\n\n---\n\n#### 2. 统计各大洲的国家数量，并按洲名排序，显示洲名和国家数量\n\n**知识点：**\n- SELECT语句基础（1）\n- 聚合函数与分组（GROUP BY）\n- 排序（ORDER BY）\n\n**答案：**\n```sql\nSELECT \n  Continent, \n  COUNT(Code) AS CountryCount\nFROM \n  country\nGROUP BY \n  Continent\nORDER BY \n  Continent;\n```\n\n**解题思路：**\n- 使用`COUNT`函数统计每个大洲的国家数量。\n- 使用`GROUP BY`子句按大洲分组。\n- 使用`ORDER BY`子句按大洲名称排序。\n\n**答案讲解：**\n此查询统计了各大洲的国家数量，并按大洲名称升序排列。结果包含两个字段：大洲名称（`Continent`）和国家数量（`CountryCount`）。\n\n---\n\n#### 3. 查找官方语言为英语的国家代码和该语言的使用百分比，并将百分比命名为 `english_speaking_percentage`\n\n**知识点：**\n- SELECT语句基础（1）\n- 条件过滤（WHERE）\n\n**答案：**\n```sql\nSELECT CountryCode, Percentage AS english_speaking_percentage\nFROM countrylanguage\nWHERE Language = \'English\' AND IsOfficial = \'T\';\n```\n\n**解题思路：**\n- 使用`SELECT`语句选择所需的字段。\n- 使用`FROM`指定表名。\n- 使用`WHERE`子句筛选出官方语言为英语的记录。\n- 使用`AS`关键字为`Percentage`字段重命名。\n\n**答案讲解：**\n此查询返回官方语言为英语的国家代码及其对应的使用百分比，并将百分比字段重命名为`english_speaking_percentage`。\n\n---\n\n#### 4. 找出首都人口超过500万的国家名称、首都名称和首都人口，并将首都人口命名为 `capital_population`\n\n**知识点：**\n- SELECT语句基础（1）\n- 表连接（JOIN）\n\n**答案：**\n```sql\nSELECT ctry.Name AS 国家名称, ct.Name AS 首都名称, ct.Population AS capital_population\nFROM country ctry\nJOIN city ct ON ctry.Capital = ct.ID\nWHERE ct.Population > 5000000;\n```\n\n**解题思路：**\n- 使用`JOIN`将`country`表和`city`表连接起来，条件是`country.Capital`等于`city.ID`。\n- 使用`SELECT`语句选择所需的字段。\n- 使用`WHERE`子句筛选出首都人口超过500万的记录。\n- 使用`AS`关键字为字段重命名。\n\n**答案讲解：**\n此查询返回首都人口超过500万的国家名称、首都名称及其人口数量，并将首都人口字段重命名为`capital_population`。\n\n---\n\n#### 5. 计算每个国家的人均GDP（GNP/Population），并筛选出人均GDP大于10000的国家，显示国家名称和人均GDP，将人均GDP命名为 `per_capita_GNP`\n\n**知识点：**\n- SELECT语句基础（1）\n- 数值计算（表达式）\n\n**答案：**\n```sql\nSELECT \n  Name, \n  (GNP / Population) AS per_capita_GNP\nFROM \n  country\nWHERE \n  (GNP / Population) > 10000;\n```\n\n**解题思路：**\n- 使用`SELECT`语句选择所需的字段。\n- 使用`FROM`指定表名。\n- 使用表达式`(GNP / Population)`计算人均GDP。\n- 使用`WHERE`子句筛选出人均GDP大于10000的国家。\n- 使用`AS`关键字为人均GDP字段重命名。\n\n**答案讲解：**\n此查询计算每个国家的人均GDP，并筛选出人均GDP大于10000的国家，结果显示国家名称和人均GDP，并将人均GDP字段重命名为`per_capita_GNP`。\n\n---\n\n### 总结\n\n本实验主要涉及基础的SQL查询操作，包括简单的`SELECT`语句、条件过滤、聚合函数、表连接和数值计算。通过这些练习，学生可以加深对SQL基本语法的理解，并掌握如何从多张表中提取和处理数据。每个题目都附有详细的解题思路和答案讲解，帮助学生更好地理解和掌握相关知识点。', null, null, null, '{\"schema_ids\": [11], \"points\": [{\"id\": 1, \"generateCount\": 1}]}');
INSERT INTO `experiments` VALUES ('25', '学生版实验报告 -   ', '根据选中的数据库模式生成的学生版实验报告', '2025-03-07 11:23:08', '2025-03-07 11:23:08', 'draft', '\"{\\\"schema_ids\\\": [11], \\\"points\\\": [{\\\"id\\\": 1, \\\"generateCount\\\": 1}]}\"', null, '### 学生版实验报告\n\n#### 实验题目：基于World数据库的SQL查询练习\n\n---\n\n**实验目的**：通过本实验，学生将掌握如何使用SQL语句进行数据查询和统计分析。本次实验主要涉及SELECT语句的基础用法。\n\n---\n\n### 1. 查询所有人口超过1000万的城市名称和所属国家代码，并将城市人口命名为 `city_population`\n\n**涉及知识点**：\n- SELECT语句基础\n\n**答题区**：\n\n```sql\n-- 请在此处编写SQL语句\n```\n\n---\n\n### 2. 统计各大洲的国家数量，并按洲名排序，显示洲名和国家数量\n\n**涉及知识点**：\n- SELECT语句基础\n\n**答题区**：\n\n```sql\n-- 请在此处编写SQL语句\n```\n\n---\n\n### 3. 查找官方语言为英语的国家代码和该语言的使用百分比，并将百分比命名为 `english_speaking_percentage`\n\n**涉及知识点**：\n- SELECT语句基础\n\n**答题区**：\n\n```sql\n-- 请在此处编写SQL语句\n```\n\n---\n\n### 4. 找出首都人口超过500万的国家名称、首都名称和首都人口，并将首都人口命名为 `capital_population`\n\n**涉及知识点**：\n- SELECT语句基础\n\n**答题区**：\n\n```sql\n-- 请在此处编写SQL语句\n```\n\n---\n\n### 5. 计算每个国家的人均GDP（GNP/Population），并筛选出人均GDP大于10000的国家，显示国家名称和人均GDP，将人均GDP命名为 `per_capita_GNP`\n\n**涉及知识点**：\n- SELECT语句基础\n\n**答题区**：\n\n```sql\n-- 请在此处编写SQL语句\n```\n\n---\n\n**注意事项**：\n- 每个题目后都提供了答题区，请在对应区域编写SQL语句。\n- 注意表之间的关联关系，合理使用JOIN操作。\n- 确保查询结果符合题目要求，字段命名准确无误。\n\n---\n\n**总结**：通过本次实验，学生应能够熟练掌握SELECT语句的基本用法，包括选择特定字段、使用条件过滤、分组统计以及连接多个表进行复杂查询。希望同学们认真完成每个题目，巩固所学知识。\n\n---\n\n**实验结束**\n\n---\n\n祝学习愉快！\n\n---\n\n**备注**：如遇问题或有任何疑问，请及时向老师或助教求助。', null, null, null, null);
INSERT INTO `experiments` VALUES ('26', '教师版实验报告 - 2025-03-07-11-24-07', '根据选中的数据库模式生成的教师版实验报告', '2025-03-07 11:24:07', '2025-03-07 11:24:07', 'draft', null, null, '# 《SQL查询实验报告》（教师版）\n\n## 实验目的\n本实验旨在通过一系列的SQL查询练习，帮助学生掌握基本的SQL语句编写技巧，特别是SELECT语句的使用。每个题目都针对特定的知识点进行设计，以加深对数据库操作的理解。\n\n## 实验内容\n\n### 题目1：查询人口超过1000万的城市信息\n**题目描述**\n查询所有人口超过1000万的城市名称和所属国家代码，并将城市人口命名为`city_population`。\n- **涉及知识点**：SELECT语句基础\n\n**答案**\n```sql\nSELECT Name, CountryCode, Population AS city_population\nFROM city\nWHERE Population > 10000000;\n```\n\n**解题思路及讲解**\n此题考查的是简单的SELECT语句用法。我们从`city`表中选择`Name`、`CountryCode`和`Population`三个字段，其中`Population`需要重命名为`city_population`。同时，添加一个条件筛选出人口大于1000万的城市。这是一道基础题目，主要目的是让学生熟悉如何从单个表中提取数据并应用简单的过滤条件。\n\n---\n\n### 题目2：统计各大洲的国家数量\n**题目描述**\n统计各大洲的国家数量，并按洲名排序，显示洲名和国家数量。\n- **涉及知识点**：SELECT语句基础、GROUP BY、ORDER BY\n\n**答案**\n```sql\nSELECT \n  Continent, \n  COUNT(Code) AS CountryCount\nFROM \n  country\nGROUP BY \n  Continent\nORDER BY \n  Continent;\n```\n\n**解题思路及讲解**\n本题不仅考察了基础的SELECT语句，还加入了分组（GROUP BY）和排序（ORDER BY）的概念。我们需要统计不同大洲上的国家数目，因此要先按照`Continent`字段进行分组，然后计算每个分组中的国家数量。最后，根据洲名进行升序排列输出结果。这对于理解如何在SQL中处理聚合函数和多条件查询非常有帮助。\n\n---\n\n### 题目3：查找官方语言为英语的国家信息\n**题目描述**\n查找官方语言为英语的国家代码和该语言的使用百分比，并将百分比命名为`english_speaking_percentage`。\n- **涉及知识点**：SELECT语句基础、WHERE子句复杂条件\n\n**答案**\n```sql\nSELECT CountryCode, Percentage AS english_speaking_percentage\nFROM countrylanguage\nWHERE Language = \'English\' AND IsOfficial = \'T\';\n```\n\n**解题思路及讲解**\n本题难度适中，要求学生能够正确理解和运用WHERE子句中的多个条件组合。这里的关键在于准确表达“官方语言”这一概念，即`IsOfficial=\'T\'`表示官方语言，同时还需要限定语言为英语。通过这个练习，可以进一步巩固学生对条件筛选的理解。\n\n---\n\n### 题目4：首都人口超过500万的国家信息\n**题目描述**\n找出首都人口超过500万的国家名称、首都名称和首都人口，并将首都人口命名为`capital_population`。\n- **涉及知识点**：多表连接（JOIN）、SELECT语句基础\n\n**答案**\n```sql\nSELECT ctry.Name AS 国家名称, ct.Name AS 首都名称, ct.Population AS capital_population\nFROM country ctry\nJOIN city ct ON ctry.Capital = ct.ID\nWHERE ct.Population > 5000000;\n```\n\n**解题思路及讲解**\n这是一个较为复杂的题目，涉及到两个表之间的关联查询。首先，我们需要明确`country`表中的`Capital`字段是指向`city`表中某条记录的外键，表示该国的首都。因此，我们可以通过JOIN操作将这两个表连接起来，进而获取所需的国家名称、首都名称以及首都人口等信息。此题有助于提高学生对多表联合查询的理解和应用能力。\n\n---\n\n### 题目5：人均GDP计算与筛选\n**题目描述**\n计算每个国家的人均GDP（GNP/Population），并筛选出人均GDP大于10000的国家，显示国家名称和人均GDP，将人均GDP命名为`per_capita_GNP`。\n- **涉及知识点**：SELECT语句基础、数学运算、条件筛选\n\n**答案**\n```sql\nSELECT \n  Name, \n  (GNP / Population) AS per_capita_GNP\nFROM \n  country\nWHERE \n  (GNP / Population) > 10000;\n```\n\n**解题思路及讲解**\n本题是一个综合性的练习，它结合了数学运算、条件筛选等多个知识点。题目要求计算每年人均GDP，并在此基础上进行条件筛选。这里的挑战在于正确地表达人均GDP的计算公式，并确保在WHERE子句中正确应用这个表达式作为筛选条件。这有助于培养学生解决实际问题的能力，同时也巩固了他们对SQL语句的理解。\n\n---\n\n## 总结\n本次实验涵盖了从简单到复杂的SQL查询技能训练，包括但不限于基本的SELECT语句、条件筛选、分组统计、多表连接等。通过这些练习，学生应该能够更加熟练地掌握SQL编程的基本方法，并为进一步学习更高级的数据库技术打下坚实的基础。', null, null, null, '{\"schema_ids\": [11], \"points\": [{\"id\": 1, \"generateCount\": 1}]}');
INSERT INTO `experiments` VALUES ('27', '学生版实验报告 -   ', '根据选中的数据库模式生成的学生版实验报告', '2025-03-07 11:24:40', '2025-03-07 11:24:40', 'draft', '\"{\\\"schema_ids\\\": [11], \\\"points\\\": [{\\\"id\\\": 1, \\\"generateCount\\\": 1}]}\"', null, '# 学生版实验报告\n\n## 实验题目：基于World数据库的SQL查询练习\n\n### 实验目的\n通过本实验，学生将掌握如何使用SQL语句对关系型数据库进行查询操作。具体包括基本的SELECT语句、多表连接查询、聚合函数和条件筛选等。\n\n---\n\n### 实验内容与要求\n\n#### 题目1: 查询人口超过1000万的城市信息\n**描述**: 查询所有人口超过1000万的城市名称和所属国家代码，并将城市人口命名为 `city_population`。\n- **涉及知识点**: SELECT语句基础\n\n答题区：\n```sql\n-- 请在此处编写SQL语句\n```\n\n---\n\n#### 题目2: 统计各大洲的国家数量\n**描述**: 统计各大洲的国家数量，并按洲名排序，显示洲名和国家数量。\n- **涉及知识点**: GROUP BY 和 ORDER BY 的使用\n\n答题区：\n```sql\n-- 请在此处编写SQL语句\n```\n\n---\n\n#### 题目3: 查找官方语言为英语的国家信息\n**描述**: 查找官方语言为英语的国家代码和该语言的使用百分比，并将百分比命名为 `english_speaking_percentage`。\n- **涉及知识点**: WHERE 条件过滤 和 别名使用\n\n答题区：\n```sql\n-- 请在此处编写SQL语句\n```\n\n---\n\n#### 题目4: 找出首都人口超过500万的国家信息\n**描述**: 找出首都人口超过500万的国家名称、首都名称和首都人口，并将首都人口命名为 `capital_population`。\n- **涉及知识点**: JOIN 连接查询 和 条件筛选\n\n答题区：\n```sql\n-- 请在此处编写SQL语句\n```\n\n---\n\n#### 题目5: 计算并筛选人均GDP高的国家\n**描述**: 计算每个国家的人均GDP（GNP/Population），并筛选出人均GDP大于10000的国家，显示国家名称和人均GDP，将人均GDP命名为 `per_capita_GNP`。\n- **涉及知识点**: 算术运算 和 条件筛选\n\n答题区：\n```sql\n-- 请在此处编写SQL语句\n```\n\n---\n\n### 注意事项\n1. 每个题目需根据题目描述准确编写SQL语句。\n2. 使用提供的数据库模式理解表结构及字段含义。\n3. 注意SQL语句的语法正确性，确保查询结果符合预期。\n4. 提交实验报告时，请附上完整的SQL语句及其运行结果截图。\n\n---\n\n### 总结\n本次实验旨在帮助同学们巩固SQL查询的基础知识，特别是对SELECT语句的灵活运用。希望同学们能够通过实际操作加深对SQL的理解，并在后续学习中进一步提升数据库查询能力。\n\n---\n\n**备注**: 涉及的知识点总结如下：\n- SELECT语句基础 (共5题)\n\n祝实验顺利！\n\n---\n\n此实验报告由专业实验报告生成器提供技术支持。', null, null, null, null);
INSERT INTO `experiments` VALUES ('28', '教师版实验报告 - 2025-03-07-11-30-26', '根据选中的数据库模式生成的教师版实验报告', '2025-03-07 11:30:26', '2025-03-07 11:30:26', 'draft', null, null, '### 教师版实验报告\n\n#### 实验题目：基于世界数据库的SQL查询练习\n\n---\n\n### 一、获取所有不同城市名称\n**题目：**\n获取所有不同的城市名称。\n\n**涉及知识点：**\n- 去除重复行\n\n**答案：**\n```sql\nSELECT DISTINCT Name \nFROM city;\n```\n\n**解题思路及讲解：**\n使用 `DISTINCT` 关键字可以去除查询结果中的重复项。在这个例子中，我们只需要获取城市表 (`city`) 中所有不同的城市名称 (`Name`)。`DISTINCT` 确保每个城市名称只出现一次。\n\n---\n\n### 二、统计各个大洲中不同的政府形式数量\n**题目：**\n统计各个大洲中不同的政府形式数量。\n\n**涉及知识点：**\n- WHERE子句使用\n\n**答案：**\n```sql\nSELECT \n  Continent, \n  COUNT(DISTINCT GovernmentForm) AS DifferentGovernmentForms\nFROM \n  country\nGROUP BY \n  Continent;\n```\n\n**解题思路及讲解：**\n1. 使用 `COUNT(DISTINCT GovernmentForm)` 来计算每个大洲 (`Continent`) 中不同的政府形式 (`GovernmentForm`) 的数量。\n2. `GROUP BY Continent` 按照大洲进行分组统计。\n3. 这里没有显式的 `WHERE` 子句，但可以根据需要添加条件来进一步筛选数据。\n\n---\n\n### 三、查找人口超过100万且位于欧洲的城市及其所属国家的名称和区域\n**题目：**\n查找人口超过100万且位于欧洲的城市及其所属国家的名称和区域。\n\n**涉及知识点：**\n- WHERE子句使用\n\n**答案：**\n```sql\nSELECT city.Name AS CityName, country.Name AS CountryName, country.Region \nFROM city \nJOIN country ON city.CountryCode = country.Code \nWHERE city.Population > 1000000 AND country.Continent = \'Europe\';\n```\n\n**解题思路及讲解：**\n1. 使用 `JOIN` 将 `city` 表和 `country` 表连接起来，通过 `CountryCode` 和 `Code` 字段进行关联。\n2. 使用 `WHERE` 子句设置两个条件：\n   - `city.Population > 1000000`：筛选出人口超过100万的城市。\n   - `country.Continent = \'Europe\'`：确保这些城市位于欧洲。\n3. 最后选择所需的字段：城市名称 (`city.Name`)、国家名称 (`country.Name`) 和区域 (`country.Region`)。\n\n---\n\n### 四、列出人口在500万到1000万之间的城市名称及其所在地区\n**题目：**\n列出人口在500万到1000万之间的城市名称及其所在地区。\n\n**涉及知识点：**\n- WHERE子句使用\n\n**答案：**\n```sql\nSELECT city.Name, city.District \nFROM city \nWHERE city.Population BETWEEN 5000000 AND 10000000;\n```\n\n**解题思路及讲解：**\n1. 使用 `BETWEEN` 关键字来限定人口范围，即人口在500万到1000万之间的城市。\n2. 选择所需字段：城市名称 (`city.Name`) 和所在地区 (`city.District`)。\n\n---\n\n### 五、找出面积大于500万平方公里并且人口超过1亿的国家，显示其名称、大洲、人口和人均寿命\n**题目：**\n找出面积大于500万平方公里并且人口超过1亿的国家，显示其名称、大洲、人口和人均寿命。\n\n**涉及知识点：**\n- WHERE子句使用\n\n**答案：**\n```sql\nSELECT \n  Name, \n  Continent, \n  Population, \n  LifeExpectancy \nFROM \n  country \nWHERE \n  SurfaceArea > 5000000 AND \n  Population > 100000000;\n```\n\n**解题思路及讲解：**\n1. 使用 `WHERE` 子句设置两个条件：\n   - `SurfaceArea > 5000000`：筛选出面积大于500万平方公里的国家。\n   - `Population > 100000000`：筛选出人口超过1亿的国家。\n2. 选择所需字段：国家名称 (`Name`)、大洲 (`Continent`)、人口 (`Population`) 和人均寿命 (`LifeExpectancy`)。\n\n---\n\n### 总结\n\n本实验报告涵盖了以下几个关键知识点：\n1. **去除重复行**：使用 `DISTINCT` 关键字来去除查询结果中的重复项。\n2. **WHERE子句使用**：通过 `WHERE` 子句设置查询条件，筛选符合特定条件的数据。\n\n每个题目都提供了详细的 SQL 查询语句，并附有简要的解题思路和答案讲解，帮助学生更好地理解和掌握 SQL 查询的基本用法。', null, null, null, '{\"schema_ids\": [11], \"points\": [{\"id\": 2, \"generateCount\": 1}, {\"id\": 3, \"generateCount\": 2}]}');
INSERT INTO `experiments` VALUES ('29', '学生版实验报告 -   ', '根据选中的数据库模式生成的学生版实验报告', '2025-03-07 11:30:45', '2025-03-07 11:30:45', 'draft', '\"{\\\"schema_ids\\\": [11], \\\"points\\\": [{\\\"id\\\": 2, \\\"generateCount\\\": 1}, {\\\"id\\\": 3, \\\"generateCount\\\": 2}]}\"', null, '# 学生版实验报告\n\n## 实验题目：基于世界数据库的SQL查询练习\n\n### 一、获取所有不同城市名称\n**涉及知识点：去除重复行**\n\n答题区：\n```\n-- 请在此处编写SQL语句\n```\n\n\n### 二、查找人口超过100万且位于欧洲的城市及其所属国家的名称和区域\n**涉及知识点：WHERE子句使用**\n\n答题区：\n```\n-- 请在此处编写SQL语句\n```\n\n\n### 三、列出人口在500万到1000万之间的城市名称及其所在地区\n**涉及知识点：WHERE子句使用**\n\n答题区：\n```\n-- 请在此处编写SQL语句\n```\n\n---\n\n### 实验说明：\n\n本实验旨在通过实际操作，帮助学生掌握以下SQL技能：\n\n1. **去除重复行**\n   - 使用`DISTINCT`关键字去除查询结果中的重复行。\n\n2. **WHERE子句使用**\n   - 掌握如何使用`WHERE`子句进行条件筛选。\n   - 包括单个条件、多个条件组合（如`AND`）以及范围条件（如`BETWEEN`）的使用。\n\n### 数据库结构简介：\n\n本次实验使用的数据库包含三个表：\n- `city`：存储城市信息，包括城市ID、名称、所属国家代码、所在地区及人口。\n- `country`：存储国家信息，包括国家代码、名称、所属大洲、政府形式等。\n- `countrylanguage`：存储国家语言信息，包括国家代码、语言、是否为官方语言及使用比例。\n\n希望同学们通过本次实验，能够加深对SQL查询的理解，并熟练掌握相关语法的应用。', null, null, null, null);
INSERT INTO `experiments` VALUES ('30', '教师版实验报告 - 2025-03-07-11-31-50', '根据选中的数据库模式生成的教师版实验报告', '2025-03-07 11:31:50', '2025-03-07 11:31:50', 'draft', null, null, '# 教师版实验报告\n\n## 实验题目：基于World数据库的SQL查询练习\n\n### 实验目的：\n通过一系列SQL查询题目的练习，帮助学生掌握MySQL的基本语法和常用操作，特别是去除重复行和WHERE子句的使用。\n\n### 数据库模式说明：\n本实验使用的数据库为`world`，包含以下三个表：\n1. `city`：城市信息表\n2. `country`：国家信息表\n3. `countrylanguage`：国家语言信息表\n\n### 实验内容及知识点解析：\n\n#### 1. 获取所有不同城市名称\n**题目：**\n获取所有不同城市名称。\n\n**答案：**\n```sql\nSELECT DISTINCT Name \nFROM city;\n```\n\n**涉及知识点：**\n- 去除重复行\n\n**解题思路：**\n使用`DISTINCT`关键字可以去除查询结果中的重复项。这里我们只需要获取不同的城市名称，因此在`SELECT`语句中添加`DISTINCT`即可。\n\n---\n\n#### 2. 统计各个大洲中不同的政府形式数量\n**题目：**\n统计各个大洲中不同的政府形式数量。\n\n**答案：**\n```sql\nSELECT Continent, COUNT(DISTINCT GovernmentForm) AS DifferentGovernmentForms\nFROM country\nGROUP BY Continent;\n```\n\n**涉及知识点：**\n- 去除重复行\n- WHERE子句使用（隐含在`COUNT(DISTINCT)`中）\n\n**解题思路：**\n为了统计每个大洲的不同政府形式数量，我们需要按大洲分组，并且对每个大洲的政府形式去重后进行计数。`COUNT(DISTINCT GovernmentForm)`用于计算不同政府形式的数量，`GROUP BY Continent`用于按大洲分组。\n\n---\n\n#### 3. 查询所有不同的官方语言\n**题目：**\n查询所有不同的官方语言。\n\n**答案：**\n```sql\nSELECT DISTINCT Language \nFROM countrylanguage \nWHERE IsOfficial = \'T\';\n```\n\n**涉及知识点：**\n- 去除重复行\n- WHERE子句使用\n\n**解题思路：**\n要查询所有不同的官方语言，首先需要筛选出官方语言（`IsOfficial = \'T\'`），然后使用`DISTINCT`去除重复的语言。`WHERE`子句用于筛选官方语言。\n\n---\n\n#### 4. 查找不同国家首都的城市名称，且结果不重复\n**题目：**\n查找不同国家首都的城市名称，且结果不重复。\n\n**答案：**\n```sql\nSELECT DISTINCT c.Name \nFROM city c \nJOIN country co ON c.CountryCode = co.Code \nWHERE c.ID = co.Capital;\n```\n\n**涉及知识点：**\n- 去除重复行\n- WHERE子句使用\n\n**解题思路：**\n通过`JOIN`连接`city`和`country`表，找到每个国家的首都城市（`c.ID = co.Capital`）。`DISTINCT`确保结果中没有重复的城市名称。`WHERE`子句用于筛选首都城市。\n\n---\n\n#### 5. 查找人口超过100万且位于欧洲的城市及其所属国家的名称和区域\n**题目：**\n查找人口超过100万且位于欧洲的城市及其所属国家的名称和区域。\n\n**答案：**\n```sql\nSELECT city.Name AS CityName, country.Name AS CountryName, country.Region \nFROM city \nJOIN country ON city.CountryCode = country.Code \nWHERE city.Population > 1000000 AND country.Continent = \'Europe\';\n```\n\n**涉及知识点：**\n- WHERE子句使用\n\n**解题思路：**\n通过`JOIN`连接`city`和`country`表，筛选出人口超过100万且位于欧洲的城市。`WHERE`子句用于设定两个条件：人口超过100万和所在大洲为欧洲。\n\n---\n\n#### 6. 列出人口在500万到1000万之间的城市名称及其所在地区\n**题目：**\n列出人口在500万到1000万之间的城市名称及其所在地区。\n\n**答案：**\n```sql\nSELECT city.Name, city.District \nFROM city \nWHERE city.Population BETWEEN 5000000 AND 10000000;\n```\n\n**涉及知识点：**\n- WHERE子句使用\n\n**解题思路：**\n使用`BETWEEN`关键字来筛选人口在500万到1000万之间的城市。`WHERE`子句用于设定人口范围。\n\n---\n\n### 总结：\n本次实验主要涵盖了两个重要知识点：\n1. **去除重复行**：通过`DISTINCT`关键字去除查询结果中的重复项。\n2. **WHERE子句使用**：通过`WHERE`子句设置查询条件，筛选特定的数据。\n\n希望同学们通过这些练习能够熟练掌握这两个知识点，并能够在实际应用中灵活运用。\n\n---\n\n### 注意事项：\n1. 在编写SQL语句时，注意表名、字段名的大小写敏感性。\n2. 确保SQL语句的逻辑正确，避免遗漏关键条件或拼写错误。\n3. 对于复杂的查询，建议先分解成简单步骤，逐步构建完整的查询语句。\n\n---\n\n### 参考资料：\n- MySQL官方文档\n- SQL基础教程\n\n---\n\n**教师点评：**\n本次实验报告详细列出了每个题目的答案，并附上了简要的解题思路和答案讲解，有助于学生理解SQL查询的逻辑和语法。希望同学们认真完成每个题目，并在实践中加深对SQL的理解。', null, null, null, '{\"schema_ids\": [11], \"points\": [{\"id\": 2, \"generateCount\": 1}, {\"id\": 3, \"generateCount\": 2}]}');
INSERT INTO `experiments` VALUES ('31', '学生版实验报告 -   ', '根据选中的数据库模式生成的学生版实验报告', '2025-03-07 11:32:13', '2025-03-07 11:32:13', 'draft', '\"{\\\"schema_ids\\\": [11], \\\"points\\\": [{\\\"id\\\": 2, \\\"generateCount\\\": 1}, {\\\"id\\\": 3, \\\"generateCount\\\": 2}]}\"', null, '# 学生版实验报告\n\n## 实验一：数据库查询基础练习\n\n### 实验目的\n通过本实验，学生将掌握如何使用SQL语句进行基本的数据查询操作，包括去除重复行和WHERE子句的使用。每个题目后均设有答题区供学生填写答案。\n\n---\n\n### 实验内容及要求\n\n#### 题目1: 获取所有不同城市名称\n**知识点:** 去除重复行  \n请编写SQL语句，查询`city`表中所有的不同城市名称。\n```\n答题区:\n----------------------------------------------\n----------------------------------------------\n----------------------------------------------\n```\n\n#### 题目2: 查找人口超过100万且位于欧洲的城市及其所属国家的名称和区域\n**知识点:** WHERE子句使用  \n请编写SQL语句，查询`city`表和`country`表，找出人口超过100万且位于欧洲的城市，并显示其城市名称、所属国家的名称以及该国所在的区域。\n```\n答题区:\n----------------------------------------------\n----------------------------------------------\n----------------------------------------------\n```\n\n#### 题目3: 列出人口在500万到1000万之间的城市名称及其所在地区\n**知识点:** WHERE子句使用  \n请编写SQL语句，查询`city`表，列出人口在500万到1000万之间的城市名称及其所在地区。\n```\n答题区:\n----------------------------------------------\n----------------------------------------------\n----------------------------------------------\n```\n\n---\n\n### 实验总结\n本次实验主要涉及以下知识点：\n- **去除重复行**: 使用DISTINCT关键字来确保查询结果中没有重复项。\n- **WHERE子句使用**: 用于设置查询条件，筛选符合条件的数据记录。\n\n请根据上述要求完成各题目的SQL语句编写，并思考每条语句的功能与实现方式。完成后请仔细检查语法是否正确，确保能够正常运行并得到预期结果。\n\n---\n\n**注意**: 每个题目后的答题区用于填写你的SQL查询语句，请务必按照题目要求准确作答。提交作业时，请保持格式整洁，便于教师批改。\n\n---\n\n希望同学们通过这次实验能够加深对SQL查询的理解，掌握基本的查询技巧，为后续更复杂的数据库操作打下坚实的基础。祝大家学习愉快！', null, null, null, null);
INSERT INTO `experiments` VALUES ('32', '教师版实验报告 - 2025-03-27-11-06-38', '根据选中的数据库模式生成的教师版实验报告', '2025-03-27 11:06:38', '2025-03-29 23:03:34', 'draft', null, null, '<h3>实验报告 - 教师版</h3><h2>dd</h2><p>编辑</p><p>ssw2<sup>2</sup></p><h4>实验题目：创建临时表与数据操作</h4><p>\n</p><p><strong>涉及知识点：创建临时表</strong></p><p>\n</p><p><br></p><p>\n</p><h3>实验目标</h3><p>\n</p><p><br></p><p>\n</p><p><br></p><p>\n</p><h3>实验要求</h3><p>\n</p><p><br></p><p>\n</p><p><br></p><p>\n</p><h3>实验步骤</h3><p>\n</p><p><br></p><p>\n</p><p><br></p><p>\n</p><h3>实验题目及答案</h3><p>\n</p><h4>题目 1：创建一个名为 <code>temp_employee</code> 的临时表，包含以下字段：</h4><p>\n</p><p><br></p><p>\n</p><p><strong>涉及知识点：创建临时表</strong></p><p>\n</p><p><strong>答案：</strong></p><p>\n</p><pre><code class=\"language-sql\">CREATE TEMPORARY TABLE temp_employee (\n    id INT PRIMARY KEY,\n    name VARCHAR(50),\n    salary DECIMAL(10, 2)\n);\n</code></pre><p>\n</p><p><strong>解题思路：</strong></p><p>\n</p><p><br></p><p>\n</p><p><strong>答案讲解：</strong></p><p>\n</p><p><br></p><p>\n</p><p><br></p><p>\n</p><h4>题目 2：向 <code>temp_employee</code> 表中插入以下数据：</h4><p>\n</p><p><br></p><p>\n</p><p><strong>答案：</strong></p><p>\n</p><pre><code class=\"language-sql\">INSERT INTO temp_employee (id, name, salary) VALUES\n(1, \'Alice\', 5000.00),\n(2, \'Bob\', 6000.00);\n</code></pre><p>\n</p><p><strong>解题思路：</strong></p><p>\n</p><p><br></p><p>\n</p><p><strong>答案讲解：</strong></p><p>\n</p><p><br></p><p>\n</p><p><br></p><p>\n</p><h4>题目 3：查询 <code>temp_employee</code> 表中的所有记录。</h4><p>\n</p><p><strong>答案：</strong></p><p>\n</p><pre><code class=\"language-sql\">SELECT * FROM temp_employee;\n</code></pre><p>\n</p><p><strong>解题思路：</strong></p><p>\n</p><p><br></p><p>\n</p><p><strong>答案讲解：</strong></p><p>\n</p><p><br></p><p>\n</p><p><br></p><p>\n</p><h4>题目 4：结束当前会话后，尝试再次查询 <code>temp_employee</code> 表，观察结果。</h4><p>\n</p><p><strong>答案：</strong></p><p>\n</p><p><br></p><p>\n</p><p><strong>解题思路：</strong></p><p>\n</p><p><br></p><p>\n</p><p><strong>答案讲解：</strong></p><p>\n</p><p><br></p><p>\n</p><p><br></p><p>\n</p><h3>实验注意事项</h3><p>\n</p><p><br></p><p>\n</p><p><br></p><p>\n</p><h3>总结</h3><p>\n</p><p>通过本次实验，学生能够熟练掌握 MySQL 中临时表的创建、使用及生命周期管理。临时表是数据库开发中的重要工具之一，适用于存储临时数据或中间结果，帮助简化复杂查询逻辑。</p><p>\n</p><p>如需进一步扩展实验内容，可尝试结合索引优化、数据更新等操作，深入理解临时表的应用场景。</p><p>\n</p>', null, null, null, '{\"schema_ids\": [12], \"points\": [{\"id\": 22, \"generateCount\": 1}]}');
INSERT INTO `experiments` VALUES ('33', '学生版实验报告 -   ', '根据选中的数据库模式生成的学生版实验报告', '2025-03-27 11:06:53', '2025-03-27 11:06:53', 'draft', '\"{\\\"schema_ids\\\": [12], \\\"points\\\": [{\\\"id\\\": 22, \\\"generateCount\\\": 1}]}\"', null, '### 实验报告\n\n#### 实验题目：创建临时表实验\n\n**涉及知识点：**\n- 创建临时表 (1)\n\n---\n\n#### 实验目标：\n通过本实验，学生将掌握如何在MySQL中创建和使用临时表。临时表是一种特殊类型的表，仅在当前会话中存在，退出会话后自动删除。\n\n#### 实验要求：\n1. 熟悉MySQL中临时表的创建语法。\n2. 能够在指定场景下创建并使用临时表。\n3. 理解临时表的特点及其应用场景。\n\n#### 实验步骤：\n1. 打开MySQL客户端，确保能够正常连接数据库。\n2. 根据实验题目要求，完成以下任务。\n3. 在答题区填写你的SQL语句。\n\n---\n\n#### 实验内容：\n\n**题目 1：创建一个名为`temp_employee`的临时表，包含以下字段：**\n- `id` (INT, 主键，自增)\n- `name` (VARCHAR(50))\n- `salary` (DECIMAL(10, 2))\n\n**答题区：**\n```sql\n-- 请在此处填写你的SQL语句\n```\n\n---\n\n#### 实验注意事项：\n1. 临时表只在当前会话中可见，退出会话后自动删除。\n2. 创建临时表时，请确保字段类型和约束符合实际需求。\n3. 如果需要在临时表中插入数据，请记得在实验步骤中完成相关操作。\n\n---\n\n**实验结束，请提交你的SQL语句及实验心得。**\n\n--- \n\n以上为学生版实验报告，请按照要求完成实验内容，并在答题区填写答案。', null, null, null, null);

-- ----------------------------
-- Table structure for knowledge_category
-- ----------------------------
DROP TABLE IF EXISTS `knowledge_category`;
CREATE TABLE `knowledge_category` (
  `id` int NOT NULL AUTO_INCREMENT,
  `category_name` varchar(255) NOT NULL,
  `description` text,
  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of knowledge_category
-- ----------------------------
INSERT INTO `knowledge_category` VALUES ('1', '基本查询', '主要涉及 SELECT 语句的基础使用，包括列选择、算术运算、空值处理、别名定义等', '2025-02-16 23:54:13', '2025-02-16 23:54:13');
INSERT INTO `knowledge_category` VALUES ('2', '约束与排序', '包括 WHERE 子句的条件查询和 ORDER BY 的排序功能', '2025-02-16 23:54:13', '2025-02-16 23:54:13');
INSERT INTO `knowledge_category` VALUES ('3', '函数使用', '涵盖字符函数、数字函数、日期函数、转换函数等各类函数的使用', '2025-02-16 23:54:13', '2025-02-16 23:54:13');
INSERT INTO `knowledge_category` VALUES ('4', '多表查询', '包括各种表连接查询方式，如等值连接、非等值连接、外连接、自连接等', '2025-02-16 23:54:13', '2025-02-16 23:54:13');
INSERT INTO `knowledge_category` VALUES ('5', '统计数据', '使用组函数进行数据统计和分组查询', '2025-02-16 23:54:13', '2025-02-16 23:54:13');
INSERT INTO `knowledge_category` VALUES ('6', '子查询', '在查询中嵌套使用子查询，包括单行和多行子查询', '2025-02-16 23:54:13', '2025-02-16 23:54:13');
INSERT INTO `knowledge_category` VALUES ('7', '表操作', '包括表的创建、修改、删除等 DDL 操作', '2025-02-16 23:54:13', '2025-02-16 23:54:13');
INSERT INTO `knowledge_category` VALUES ('8', '数据操纵', '包括数据的插入、更新、删除等 DML 操作', '2025-02-16 23:54:13', '2025-02-16 23:54:13');
INSERT INTO `knowledge_category` VALUES ('9', '索引与视图', '索引的创建和管理，以及视图的使用。编辑', '2025-02-16 23:54:13', '2025-02-17 05:13:22');
INSERT INTO `knowledge_category` VALUES ('10', '约束管理', '各类约束的定义和管理', '2025-02-16 23:54:13', '2025-02-16 23:54:13');
INSERT INTO `knowledge_category` VALUES ('11', '用户访问控制', '用户权限管理和访问控制', '2025-02-16 23:54:13', '2025-02-16 23:54:13');

-- ----------------------------
-- Table structure for knowledge_point
-- ----------------------------
DROP TABLE IF EXISTS `knowledge_point`;
CREATE TABLE `knowledge_point` (
  `id` int NOT NULL AUTO_INCREMENT,
  `category_id` int NOT NULL,
  `point_name` varchar(255) NOT NULL,
  `description` text,
  `example_sql` text,
  `explanation` text,
  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  KEY `category_id` (`category_id`),
  CONSTRAINT `knowledge_point_ibfk_1` FOREIGN KEY (`category_id`) REFERENCES `knowledge_category` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=24 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of knowledge_point
-- ----------------------------
INSERT INTO `knowledge_point` VALUES ('1', '1', 'SELECT语句基础', '使用 SELECT 语句查询表中的数据，可以选择特定的列，并可以使用别名', 'SELECT last_name, job_id, salary AS monthly_salary \r\nFROM employees;', 'SELECT 语句用于从表中检索数据。可以选择特定的列，使用 AS 关键字为列指定别名，使结果更易读。', '2025-02-16 23:54:13', '2025-02-16 23:54:13');
INSERT INTO `knowledge_point` VALUES ('2', '1', '去除重复行', '使用 DISTINCT 关键字去除查询结果中的重复行', 'SELECT DISTINCT department_id \r\nFROM employees;', 'DISTINCT 关键字用于去除查询结果中的重复行，只显示唯一的值。这在需要了解某个字段所有可能值时很有用。', '2025-02-16 23:54:13', '2025-02-16 23:54:13');
INSERT INTO `knowledge_point` VALUES ('3', '2', 'WHERE子句使用', '使用 WHERE 子句进行条件过滤', 'SELECT last_name, salary \r\nFROM employees \r\nWHERE salary > 12000;', 'WHERE 子句用于指定查询条件，只返回满足条件的行。可以使用比较运算符（>、<、=等）和逻辑运算符（AND、OR等）。', '2025-02-16 23:54:13', '2025-02-16 23:54:13');
INSERT INTO `knowledge_point` VALUES ('4', '2', '复杂条件查询', '使用多个条件组合进行查询', 'SELECT last_name, salary, department_id \r\nFROM employees \r\nWHERE salary >= 10000 \r\nAND department_id IN (20, 30);', '可以使用AND、OR组合多个条件，IN操作符用于匹配一组值中的任何一个。', '2025-02-16 23:54:13', '2025-02-16 23:54:13');
INSERT INTO `knowledge_point` VALUES ('5', '3', '字符函数', '使用字符处理函数操作字符串数据', 'SELECT employee_id, \r\n       CONCAT(first_name, \' \', last_name) AS full_name,\r\n       UPPER(last_name) AS upper_name,\r\n       LENGTH(last_name) AS name_length\r\nFROM employees;', 'CONCAT函数用于连接字符串，UPPER函数将字符转换为大写，LENGTH函数返回字符串长度。', '2025-02-16 23:54:13', '2025-02-16 23:54:13');
INSERT INTO `knowledge_point` VALUES ('6', '3', '日期函数', '使用日期处理函数处理时间数据', 'SELECT employee_id, hire_date,\r\n       YEAR(hire_date) AS hire_year,\r\n       MONTH(hire_date) AS hire_month,\r\n       DATEDIFF(NOW(), hire_date) AS days_employed\r\nFROM employees;', '日期函数用于处理日期时间数据。YEAR提取年份，MONTH提取月份，DATEDIFF计算日期差。', '2025-02-16 23:54:13', '2025-03-12 11:24:52');
INSERT INTO `knowledge_point` VALUES ('7', '4', '内连接', '使用 INNER JOIN 进行表连接查询', 'SELECT e.last_name, d.department_name\r\nFROM employees e\r\nINNER JOIN departments d \r\nON e.department_id = d.department_id;', '内连接返回两个表中满足连接条件的行。使用表别名（e和d）可以使查询更简洁。', '2025-02-16 23:54:13', '2025-02-16 23:54:13');
INSERT INTO `knowledge_point` VALUES ('8', '4', '外连接', '使用 LEFT/RIGHT JOIN 进行外连接查询', 'SELECT e.last_name, d.department_name\r\nFROM employees e\r\nLEFT JOIN departments d \r\nON e.department_id = d.department_id;', '左外连接返回左表的所有行，即使右表中没有匹配的行。右外连接则相反。', '2025-02-16 23:54:13', '2025-02-16 23:54:13');
INSERT INTO `knowledge_point` VALUES ('9', '5', '聚合函数', '使用聚合函数进行数据统计', 'SELECT department_id,\r\n       COUNT(*) AS emp_count,\r\n       AVG(salary) AS avg_salary,\r\n       MAX(salary) AS max_salary,\r\n       MIN(salary) AS min_salary\r\nFROM employees\r\nGROUP BY department_id;', '聚合函数用于计算统计值。COUNT计数，AVG计算平均值，MAX/MIN找出最大/最小值。GROUP BY子句用于分组。', '2025-02-16 23:54:13', '2025-02-16 23:54:13');
INSERT INTO `knowledge_point` VALUES ('10', '6', '单行子查询 编辑', '使用返回单个值的子查询', 'SELECT last_name, job_id, salary\r\nFROM employees\r\nWHERE salary > (\r\n    SELECT AVG(salary)\r\n    FROM employees\r\n);', '子查询可以嵌套在主查询中。这个例子找出薪资高于平均薪资的员工。', '2025-02-16 23:54:13', '2025-02-17 05:15:25');
INSERT INTO `knowledge_point` VALUES ('11', '7', '创建表', '创建新的数据库表', 'CREATE TABLE projects (\r\n    project_id INT PRIMARY KEY,\r\n    project_name VARCHAR(100) NOT NULL,\r\n    start_date DATE,\r\n    end_date DATE,\r\n    budget DECIMAL(10,2),\r\n    manager_id INT,\r\n    FOREIGN KEY (manager_id) REFERENCES employees(employee_id)\r\n);', '创建表时需要指定列名、数据类型和约束。可以设置主键、外键等约束。', '2025-02-16 23:54:13', '2025-02-16 23:54:13');
INSERT INTO `knowledge_point` VALUES ('12', '8', '插入数据', '向表中插入新数据', 'INSERT INTO departments \r\n(department_id, department_name, location_id)\r\nVALUES \r\n(280, \'Business Analytics\', 1700);', 'INSERT语句用于添加新行。可以指定列名和对应的值，未指定的列将使用默认值。', '2025-02-16 23:54:13', '2025-02-16 23:54:13');
INSERT INTO `knowledge_point` VALUES ('13', '9', '创建索引', '创建表索引提高查询性能', 'CREATE INDEX emp_name_idx \r\nON employees(last_name, first_name);', '索引可以提高查询性能。可以创建单列索引或多列索引。要考虑索引的维护成本。', '2025-02-16 23:54:13', '2025-02-16 23:54:13');
INSERT INTO `knowledge_point` VALUES ('14', '10', '主键约束', '设置和管理主键约束', 'ALTER TABLE employees\r\nADD CONSTRAINT emp_pk PRIMARY KEY (employee_id);', '主键约束确保表中的每一行都有唯一标识。一个表只能有一个主键，可以是单列或多列。', '2025-02-16 23:54:13', '2025-02-16 23:54:13');
INSERT INTO `knowledge_point` VALUES ('15', '11', '创建用户', '创建数据库用户并授权', 'CREATE USER \'john\'@\'localhost\' \r\nIDENTIFIED BY \'password\';\r\nGRANT SELECT, INSERT ON employees TO \'john\'@\'localhost\';', '创建用户并授予适当的权限。可以限制用户可以执行的操作和访问的对象。', '2025-02-16 23:54:13', '2025-02-16 23:54:13');
INSERT INTO `knowledge_point` VALUES ('20', '7', '外键约束', '使用 FOREIGN KEY 约束维护数据完整性，确保表之间的关联关系正确。\n', 'CREATE TABLE orders (\n    order_id INT PRIMARY KEY,\n    user_id INT,\n    order_date DATE,\n    FOREIGN KEY (user_id) REFERENCES users(id)\n);\n', '外键约束用于维护表之间的关系，确保子表的数据必须在父表中存在，避免孤立数据。', '2025-03-04 07:11:06', '2025-03-04 07:11:06');
INSERT INTO `knowledge_point` VALUES ('21', '9', '创建视图', '视图是一个虚拟表，可以简化复杂查询，提高数据安全性。', 'CREATE VIEW high_salary_employees AS\nSELECT id, name, salary FROM employees WHERE salary > 10000;\n', '视图可以隐藏敏感信息，限制用户访问某些字段。', '2025-03-04 07:27:25', '2025-03-04 07:27:25');
INSERT INTO `knowledge_point` VALUES ('22', '7', '创建临时表', '临时表用于存储临时数据，在会话结束时自动销毁。', 'CREATE TEMPORARY TABLE temp_users AS SELECT * FROM users WHERE age > 30;\n', '临时表适用于存储临时计算结果，提高查询效率。', '2025-03-04 07:29:18', '2025-03-04 07:29:18');

-- ----------------------------
-- Table structure for llm_models
-- ----------------------------
DROP TABLE IF EXISTS `llm_models`;
CREATE TABLE `llm_models` (
  `id` int NOT NULL AUTO_INCREMENT,
  `model_name` varchar(50) NOT NULL,
  `model_identifier` varchar(100) NOT NULL,
  `description` text,
  `is_active` tinyint(1) DEFAULT '1',
  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of llm_models
-- ----------------------------
INSERT INTO `llm_models` VALUES ('1', '通义千问7B', 'qwen-7b-chat', '基础对话模型', '1', '2025-02-11 17:44:49');
INSERT INTO `llm_models` VALUES ('2', '通义千问Plus', 'qwen-plus', '增强版对话模型', '1', '2025-02-11 17:44:49');
INSERT INTO `llm_models` VALUES ('3', '通义千问Turbo', 'qwen-turbo', '轻量快速版本', '1', '2025-02-11 17:44:49');
INSERT INTO `llm_models` VALUES ('4', '通义千问-Max', 'qwen-max', '旗舰模型，适合复杂任务，推理能力最强', '1', '2025-02-11 18:32:30');
INSERT INTO `llm_models` VALUES ('5', '通义千问-Plus', 'qwen-plus', '效果、速度、成本均衡', '1', '2025-02-11 18:32:30');
INSERT INTO `llm_models` VALUES ('6', '通义千问-Turbo', 'qwen-turbo', '适合简单任务，速度快、成本极低', '1', '2025-02-11 18:32:30');
INSERT INTO `llm_models` VALUES ('7', '通义千问-Long', 'qwen-long', '适合大规模文本分析，效果与速度均衡、成本较低', '1', '2025-02-11 18:32:30');

-- ----------------------------
-- Table structure for nl_queries
-- ----------------------------
DROP TABLE IF EXISTS `nl_queries`;
CREATE TABLE `nl_queries` (
  `id` int NOT NULL AUTO_INCREMENT,
  `query_text` text NOT NULL,
  `generated_sql` text,
  `involved_tables` text NOT NULL,
  `schema_ids` text NOT NULL,
  `knowledge_point_id` int DEFAULT NULL,
  `status` enum('pending','approved','rejected') DEFAULT 'pending',
  `created_at` datetime DEFAULT CURRENT_TIMESTAMP,
  `updated_at` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  KEY `fk_knowledge_point` (`knowledge_point_id`),
  CONSTRAINT `fk_knowledge_point` FOREIGN KEY (`knowledge_point_id`) REFERENCES `knowledge_point` (`id`) ON DELETE SET NULL ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=237 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of nl_queries
-- ----------------------------
INSERT INTO `nl_queries` VALUES ('1', '查询所有管理员用户的详细信息', null, 'users', '4', null, 'approved', '2025-02-03 15:27:31', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('2', '统计每个用户的登录次数，并按登录次数降序排列', null, 'users', '4', null, 'approved', '2025-02-03 15:27:31', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('3', '统计每个用户的最后一次登录时间，并按最后一次登录时间降序排列', null, 'users', '4', null, 'approved', '2025-02-03 15:27:31', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('4', '获取所有非管理员用户的用户名和电子邮件，并按用户名升序排列', null, 'users', '4', null, 'approved', '2025-02-03 15:27:31', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('5', '查找所有从未登录过的用户，并显示他们的用户名和注册日期', null, 'users', '4', null, 'approved', '2025-02-03 15:27:31', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('6', '统计每个注册月份的用户数量，并按月份排序', null, 'users', '4', null, 'approved', '2025-02-03 15:27:31', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('7', '查询所有在2025年1月19日之前创建的用户，并显示他们的用户名和创建日期', null, 'users', '4', null, 'approved', '2025-02-03 15:27:31', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('8', '更新所有非管理员用户的`is_active`状态为0，并返回受影响的行数', null, 'users', '4', null, 'approved', '2025-02-03 15:27:31', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('9', '查找所有电子邮件地址包含\"qq.com\"的用户，并显示他们的用户名和电子邮件', null, 'users', '4', null, 'approved', '2025-02-03 15:27:31', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('10', '统计所有用户的平均注册时长（从创建日期到当前日期），并以天为单位显示结果', null, 'users', '4', null, 'approved', '2025-02-03 15:27:31', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('21', '查询所有管理员用户的详细信息', null, 'users', '4,5', null, 'approved', '2025-02-04 01:58:33', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('22', '统计每个用户自注册以来的登录次数，并按登录次数降序排列', null, 'users', '4,5', null, 'approved', '2025-02-04 01:58:33', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('23', '查找最近一周内没有登录过的活跃用户', null, 'users', '4,5', null, 'approved', '2025-02-04 01:58:33', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('24', '更新所有非管理员用户的 `is_active` 状态为0，因为他们长时间未登录', null, 'users', '4,5', null, 'approved', '2025-02-04 01:58:33', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('25', '获取当前数据库版本号以及所有用户的数量', null, 'alembic_version,users', '4,5', null, 'approved', '2025-02-04 01:58:33', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('26', '查找用户名中包含\"test\"的所有用户，并显示他们的注册日期', '根据提供的数据库Schema和自然语言查询需求，以下是生成的SQL语句：\n\n```sql\nSELECT username, date_created\nFROM users\nWHERE username LIKE \'%test%\';\n```\n\n这条SQL语句会查找 `users` 表中用户名 (`username`) 包含 \"test\" 的所有用户，并显示他们的注册日期 (`date_created`)。 `%test%` 是一个通配符表达式，表示任意位置包含 \"test\" 的字符串。', 'users', '4,5', null, 'approved', '2025-02-04 01:58:33', '2025-02-04 03:28:43');
INSERT INTO `nl_queries` VALUES ('27', '统计每个小时段内用户注册的数量，以分析一天中哪个时间段注册人数最多', '要统计每个小时段内用户注册的数量，可以使用 `DATE_FORMAT` 函数来提取 `date_created` 字段中的小时部分，并按小时进行分组统计。以下是满足需求的 SQL 查询：\n\n```sql\nSELECT \n    DATE_FORMAT(date_created, \'%H\') AS hour_of_day,\n    COUNT(*) AS registration_count\nFROM \n    users\nWHERE \n    DATE(date_created) = CURDATE()  -- 只统计今天的注册数据，如果需要统计所有历史数据可以去掉这行\nGROUP BY \n    hour_of_day\nORDER BY \n    registration_count DESC;\n```\n\n如果你想要统计所有历史数据而不仅仅是今天的数据，可以去掉 `WHERE` 子句中的日期过滤条件：\n\n```sql\nSELECT \n    DATE_FORMAT(date_created, \'%H\') AS hour_of_day,\n    COUNT(*) AS registration_count\nFROM \n    users\nGROUP BY \n    hour_of_day\nORDER BY \n    registration_count DESC;\n```\n\n这个查询会返回每个小时内用户注册的数量，并按照注册数量从多到少排序。这样你可以分析一天中哪个时间段注册人数最多。', 'users', '4,5', null, 'approved', '2025-02-04 01:58:33', '2025-02-17 22:56:18');
INSERT INTO `nl_queries` VALUES ('28', '查询所有在过去24小时内注册的用户，并按注册时间升序排列', '根据提供的数据库Schema和自然语言查询需求，以下是生成的SQL语句：\n\n```sql\nSELECT id, username, email, date_created\nFROM users\nWHERE date_created >= NOW() - INTERVAL 1 DAY\nORDER BY date_created ASC;\n```\n\n解释：\n1. `SELECT id, username, email, date_created`：选择用户表中的相关字段。\n2. `FROM users`：指定查询的表为`users`。\n3. `WHERE date_created >= NOW() - INTERVAL 1 DAY`：筛选出在过去24小时内注册的用户。`NOW()`函数返回当前时间，`INTERVAL 1 DAY`表示过去24小时。\n4. `ORDER BY date_created ASC`：按注册时间升序排列结果。\n\n这条SQL语句将满足查询所有在过去24小时内注册的用户，并按注册时间升序排列的需求。', 'users', '4,5', null, 'approved', '2025-02-04 01:58:33', '2025-02-17 23:50:56');
INSERT INTO `nl_queries` VALUES ('29', '找出所有从未登录过的用户，并标记他们为不活跃用户（更新 `is_active` 为0）', null, 'users', '4,5', null, 'approved', '2025-02-04 01:58:33', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('30', '按月统计新注册用户的数量，并显示每个月的新用户增长趋势', null, 'users', '4,5', null, 'approved', '2025-02-04 01:58:33', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('31', '查找在过去一个月内活跃的用户及其聊天记录数量', '要查找在过去一个月内活跃的用户及其聊天记录数量，我们需要从 `users` 表和 `chat_history` 表中提取相关信息。具体来说，我们需要：\n\n1. 筛选出在过去一个月内有聊天记录的用户。\n2. 统计每个用户的聊天记录数量。\n\n以下是满足这些需求的 SQL 查询：\n\n```sql\nSELECT \n    u.id AS user_id,\n    u.username,\n    COUNT(ch.id) AS chat_count\nFROM \n    users u\nJOIN \n    chat_history ch ON u.id = ch.user_id\nWHERE \n    ch.created_at >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH)\nGROUP BY \n    u.id, u.username\nORDER BY \n    chat_count DESC;\n```\n\n### 解释：\n- **`JOIN`**: 我们使用 `JOIN` 将 `users` 表和 `chat_history` 表连接在一起，基于 `user_id` 字段。\n- **`WHERE`**: 使用 `DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH)` 来筛选出过去一个月内的聊天记录。\n- **`GROUP BY`**: 按照用户 ID 和用户名分组，以便统计每个用户的聊天记录数量。\n- **`COUNT(ch.id)`**: 统计每个用户的聊天记录数量。\n- **`ORDER BY chat_count DESC`**: 按照聊天记录数量降序排列结果。\n\n这个查询将返回在过去一个月内活跃的用户及其对应的聊天记录数量。', 'users,chat_history', '7', null, 'approved', '2025-02-11 11:46:42', '2025-02-11 11:48:02');
INSERT INTO `nl_queries` VALUES ('32', '列出所有当前激活的语言模型及其描述', null, 'llm_models', '7', null, 'approved', '2025-02-11 11:46:42', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('33', '统计每个状态（pending, approved, rejected）的自然语言查询数量', null, 'nl_queries', '7', null, 'approved', '2025-02-11 11:46:42', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('34', '找出每个用户的最新一次聊天记录，并显示该记录的时间和内容', null, 'users,chat_history', '7', null, 'approved', '2025-02-11 11:46:42', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('35', '查询在2025年1月创建的所有SQL文件及其内容', null, 'sqls', '7', null, 'approved', '2025-02-11 11:46:42', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('36', '查找使用特定语言模型进行聊天的用户及其聊天内容', null, 'users,chat_history,llm_models', '7', null, 'approved', '2025-02-11 11:46:42', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('37', '找出所有已批准的自然语言查询及其生成的SQL语句', null, 'nl_queries,sqls', '7', null, 'approved', '2025-02-11 11:46:42', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('38', '列出所有管理员用户及其最后一次登录时间', null, 'users', '7', null, 'approved', '2025-02-11 11:46:42', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('39', '统计每个语言模型在过去一周内的使用次数', null, 'chat_history,llm_models', '7', null, 'approved', '2025-02-11 11:46:42', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('40', '获取数据库的最新版本号以及对应的更新时间', '根据提供的数据库Schema，`alembic_version`表中只包含一个字段`version_num`，并且该表没有记录更新时间的字段。因此，我们无法直接从`alembic_version`表中获取更新时间。\n\n但是，如果假设每次版本更新时会插入或更新一条记录，并且我们可以使用`created_at`字段来近似表示更新时间（尽管这在实际的`alembic_version`表结构中并不存在），我们可以创建一个类似的查询来获取最新版本号及其创建时间。\n\n由于`alembic_version`表中没有时间字段，我们只能返回最新的`version_num`。如果你确实需要更新时间，可能需要修改表结构以包含时间字段。\n\n以下是基于现有表结构的SQL查询：\n\n```sql\nSELECT version_num, created_at AS update_time\nFROM alembic_version\nORDER BY version_num DESC\nLIMIT 1;\n```\n\n请注意，这个查询假设`alembic_version`表有一个`created_at`字段，但实际上该表并没有这个字段。为了准确实现你的需求，建议在`alembic_version`表中添加一个时间字段（如`created_at`或`updated_at`），以便能够记录版本更新的时间。\n\n如果你可以确认`alembic_version`表确实有时间字段，请提供更多信息，我可以调整查询以更好地满足需求。', 'alembic_version', '7', null, 'approved', '2025-02-11 11:46:42', '2025-02-18 00:14:03');
INSERT INTO `nl_queries` VALUES ('50', '创建索引以提高查询用户信息的性能，特别是根据用户名和邮箱进行查询时', '为了提高根据用户名和邮箱查询用户信息的性能，可以在 `users` 表的 `username` 和 `email` 字段上创建索引。由于这两个字段已经分别有唯一的约束（UNIQUE KEY），实际上这些唯一约束已经隐式地创建了索引。但是，如果你仍然希望显式地创建索引以确保性能优化，可以使用以下 SQL 语句：\n\n```sql\n-- 创建用户名上的索引\nCREATE INDEX idx_username ON users (username);\n\n-- 创建邮箱上的索引\nCREATE INDEX idx_email ON users (email);\n```\n\n然而，考虑到 `username` 和 `email` 字段已经有唯一约束，MySQL 会自动为这些字段创建唯一索引。因此，通常不需要再为这些字段创建额外的普通索引。你可以通过以下命令来确认现有的索引情况：\n\n```sql\nSHOW INDEX FROM users;\n```\n\n如果你确实需要进一步优化查询性能，并且希望确保索引存在，可以使用 `CREATE INDEX IF NOT EXISTS`（如果 MySQL 版本支持）或者先检查索引是否存在再创建：\n\n```sql\n-- 检查并创建用户名上的索引\nSET @idx_username_exists = (\n    SELECT COUNT(*) \n    FROM information_schema.statistics \n    WHERE table_schema = DATABASE() \n    AND table_name = \'users\' \n    AND index_name = \'idx_username\'\n);\n\nSET @create_idx_username = IF(\n    @idx_username_exists = 0,\n    \'CREATE INDEX idx_username ON users (username);\',\n    \'SELECT \"Index idx_username already exists\";\'\n);\n\nPREPARE stmt FROM @create_idx_username;\nEXECUTE stmt;\nDEALLOCATE PREPARE stmt;\n\n-- 检查并创建邮箱上的索引\nSET @idx_email_exists = (\n    SELECT COUNT(*) \n    FROM information_schema.statistics \n    WHERE table_schema = DATABASE() \n    AND table_name = \'users\' \n    AND index_name = \'idx_email\'\n);\n\nSET @create_idx_email = IF(\n    @idx_email_exists = 0,\n    \'CREATE INDEX idx_email ON users (email);\',\n    \'SELECT \"Index idx_email already exists\";\'\n);\n\nPREPARE stmt FROM @create_idx_email;\nEXECUTE stmt;\nDEALLOCATE PREPARE stmt;\n```\n\n这段代码会检查索引是否已经存在，如果不存在则创建索引。这样可以避免重复创建索引的问题。', 'users', '8', '13', 'approved', '2025-02-18 01:08:37', '2025-02-18 01:09:16');
INSERT INTO `nl_queries` VALUES ('51', '为用户表和聊天记录表创建组合索引以提高查询性能，特别是针对常用查询条件如用户名和创建时间的查询', null, 'users,chat_history', '8', '13', 'approved', '2025-02-18 01:08:37', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('52', '向用户表中插入一个新用户，包含用户名、电子邮件、密码哈希，并设置为活跃状态', null, 'users', '8', '12', 'approved', '2025-02-21 10:41:33', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('53', '向用户表中插入一个新的管理员用户，设置用户名为 \"admin_user\"，邮箱为 \"admin@example.com\"，并激活该用户账号', null, 'users', '8', '12', 'approved', '2025-02-21 10:41:33', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('54', '向用户表中插入一个新用户，包含用户名、电子邮件、密码哈希，并设置为活跃状态', null, 'users', '8', '12', 'approved', '2025-02-21 10:41:33', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('55', '查找所有活跃用户中，最后一次登录时间晚于平均最后一次登录时间的用户信息', null, 'users', '8', '10', 'approved', '2025-02-21 10:41:48', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('56', '查找所有用户中，最后一次登录时间晚于平均注册时间的用户信息', '要查找所有用户中，最后一次登录时间晚于平均注册时间的用户信息，可以使用以下SQL查询：\n\n```sql\nSELECT u.*\nFROM users u\nWHERE u.last_login > (SELECT AVG(date_created) FROM users);\n```\n\n这个查询的工作原理如下：\n1. 子查询 `(SELECT AVG(date_created) FROM users)` 计算所有用户的平均注册时间。\n2. 主查询选择 `users` 表中的所有列 (`u.*`)，并过滤出那些 `last_login` 时间晚于平均注册时间的用户。\n\n确保查询结果满足自然语言描述的需求，即只返回最后一次登录时间晚于平均注册时间的用户信息。', 'users', '8', '10', 'approved', '2025-02-21 10:41:48', '2025-02-21 10:42:28');
INSERT INTO `nl_queries` VALUES ('57', '查找每个用户最近一个月内与特定模型类型（如“gpt-3.5”）的聊天记录数量，仅包括活跃用户', null, 'users,chat_history', '8', '7', 'approved', '2025-02-23 14:27:45', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('58', '统计每个用户在过去一个月内的聊天记录数量，并按周展示聊天频率', null, 'chat_history', '8', '6', 'approved', '2025-02-23 14:27:53', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('59', '使用LEFT JOIN查询每个用户及其对应的聊天记录数量，包括没有聊天记录的用户', null, 'users,chat_history', '8', '8', 'approved', '2025-02-23 14:29:42', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('60', '使用内连接查询每个用户最近一次的聊天记录，包括用户ID、用户名和聊天内容', null, 'users,chat_history', '8', '7', 'approved', '2025-02-23 14:29:57', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('61', '查找每个用户最近一次聊天记录的模型类型和角色，仅包含有聊天记录的用户', null, 'users,chat_history', '8', '7', 'approved', '2025-02-23 14:29:57', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('62', '统计每个用户在过去一个月内每天的聊天记录数量，并按日期和用户ID排序', null, 'chat_history', '8', '6', 'approved', '2025-02-23 14:30:04', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('63', '使用字符函数生成用户信息摘要，包括用户名、邮箱域名大写以及用户名长度', null, 'users', '8', '5', 'approved', '2025-02-23 14:30:08', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('64', '查找在过去7天内使用过特定模型（model_type为\'gpt-3.5\'）进行聊天的活跃用户信息，包括用户名、邮箱和最后一次聊天的时间', null, 'users,chat_history', '8', '4', 'approved', '2025-02-23 14:30:41', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('65', '查找在过去7天内使用过特定模型（例如：model_type为\'gpt-3.5\'）进行对话且对话次数超过5次的活跃用户信息', null, 'users,chat_history', '8', '4', 'approved', '2025-02-23 14:30:41', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('66', '查找在过去7天内使用过特定模型类型（例如：\'gpt-3.5\'）进行聊天的活跃用户信息，并且这些用户的最后登录时间在30天之内', null, 'users,chat_history', '8', '4', 'approved', '2025-02-23 14:30:41', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('67', '查找在过去7天内使用过特定模型（model_type=\'gpt-3.5\'）进行对话且对话次数超过5次的活跃用户信息', null, 'users,chat_history', '8', '4', 'approved', '2025-02-23 14:30:41', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('68', '获取所有唯一的用户名', null, 'users', '8', '2', 'approved', '2025-02-23 15:01:43', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('69', '查询所有活跃用户的用户名和邮箱，并将邮箱列命名为 contact_email', null, 'users', '8', '1', 'approved', '2025-02-23 15:01:50', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('70', '使用字符函数处理用户信息，生成用户名的全大写版本和计算用户名长度', null, 'users', '8', '5', 'approved', '2025-02-23 15:02:03', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('71', '使用字符处理函数获取所有用户的用户名和邮箱的长度，并将用户名转换为大写', null, 'users', '8', '5', 'approved', '2025-02-23 15:02:03', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('72', '查询所有用户的用户名和邮箱，并将邮箱列命名为 contact_email', null, 'users', '8', '1', 'approved', '2025-02-23 15:16:40', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('73', '查询所有用户的用户名和邮箱，并将邮箱列命名为 contact_email', null, 'users', '8', '1', 'approved', '2025-02-23 15:16:40', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('74', '查询所有活跃用户的用户名和邮箱，并将邮箱列命名为 contact_email', null, 'users', '8', '1', 'approved', '2025-02-23 15:16:40', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('75', '查询所有用户的用户名、电子邮件，并将电子邮件列别名为 contact_email', null, 'users', '8', '1', 'approved', '2025-02-23 15:16:40', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('76', '查询所有活跃用户的用户名和电子邮件，并将电子邮件列别名为 contact_email', null, 'users', '8', '1', 'approved', '2025-02-23 15:16:40', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('77', '获取所有唯一的用户名', null, 'users', '8', '2', 'approved', '2025-02-23 15:17:07', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('78', '获取所有唯一的用户名', null, 'users', '8', '2', 'approved', '2025-02-23 15:17:07', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('79', '获取所有唯一的用户名，去除重复的用户名记录', null, 'users', '8', '2', 'approved', '2025-02-23 15:17:07', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('80', '获取所有唯一的用户名', null, 'users', '8', '2', 'approved', '2025-02-23 15:17:07', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('81', '获取所有唯一的用户名', null, 'users', '8', '2', 'approved', '2025-02-23 15:17:07', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('82', '查询所有用户的用户名和邮箱，并将邮箱列别名为 contact_email', null, 'users', '8', '1', 'approved', '2025-02-23 15:18:50', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('83', '查询所有活跃用户的用户名和邮箱，并将邮箱列命名为 contact_email', null, 'users', '8', '1', 'approved', '2025-02-23 15:18:50', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('84', '查询所有用户的用户名和邮箱，并将邮箱列别名为 contact_email', null, 'users', '8', '1', 'approved', '2025-02-23 15:18:50', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('85', '获取所有唯一用户名，去除重复项', null, 'users', '8', '2', 'approved', '2025-02-23 15:19:02', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('86', '获取所有唯一的用户名', null, 'users', '8', '2', 'approved', '2025-02-23 15:19:02', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('87', '获取所有唯一用户名，去除重复的用户名记录', null, 'users', '8', '2', 'approved', '2025-02-23 15:19:02', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('88', '创建一个新表以记录用户的学习进度，包括用户ID、课程ID、学习进度百分比和最后更新时间\n@[users] 创建一个新表 `user_progress` 来记录用户的学习进度，包含字段：用户ID（外键关联users.id）、课程ID、学习进度百分比（0-100）、最后更新时间。通过此表可以跟踪每个用户在不同课程中的学习进展。', null, 'users', '8', '11', 'approved', '2025-02-23 15:19:21', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('89', '统计每个用户在过去一个月内与不同模型类型的聊天记录数量，并按用户ID排序', null, 'users,chat_history', '8', '11', 'approved', '2025-02-23 15:19:21', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('90', '统计所有用户的活跃状态，包括活跃用户数量、非活跃用户数量以及每个状态的平均创建时间间隔', null, 'users', '8', '9', 'approved', '2025-02-23 15:19:45', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('91', '统计所有用户的活跃状态，包括总用户数、活跃用户数和非活跃用户数，并计算平均、最大和最小的创建时间间隔', null, 'users', '8', '9', 'approved', '2025-02-23 15:19:45', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('92', '统计所有用户的活跃状态，包括总用户数、活跃用户数和非活跃用户数，并计算平均注册时长', 'SELECT \n    COUNT(*) AS total_users,\n    SUM(CASE WHEN is_active = 1 THEN 1 ELSE 0 END) AS active_users,\n    SUM(CASE WHEN is_active = 0 THEN 1 ELSE 0 END) AS inactive_users,\n    AVG(TIMESTAMPDIFF(DAY, date_created, NOW())) AS avg_registration_duration\nFROM users;\n```', 'users', '8', '9', 'approved', '2025-02-23 15:19:45', '2025-02-27 23:45:27');
INSERT INTO `nl_queries` VALUES ('93', '向用户表中插入一条新用户记录，包括用户名、邮箱、密码哈希、创建时间和是否为管理员的信息', 'INSERT INTO users (username, email, password_hash, date_created, is_admin) VALUES (\'newuser\', \'newuser@example.com\', \'passwordhash123\', NOW(), 0);', 'users', '4', '12', 'approved', '2025-02-27 23:47:10', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('94', '向用户表中插入一条新用户记录，包含用户名、电子邮件、密码哈希等必要信息\n@[users] 向用户表中插入一条新用户记录，用户名为\'newuser\'，电子邮件为\'newuser@example.com\'，并设置初始密码和创建时间', 'INSERT INTO users (username, email, password_hash, date_created) \nVALUES (\'newuser\', \'newuser@example.com\', \'initial_password_hash\', NOW());', 'users', '4', '12', 'approved', '2025-02-27 23:47:10', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('95', '查询所有用户的用户名、邮箱以及注册时间，并将注册时间列命名为\"注册日期\"', 'SELECT username, email, date_created AS 注册日期\nFROM users', 'users', '4', '1', 'approved', '2025-02-27 23:59:00', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('96', '查询所有用户的用户名、邮箱以及创建日期，并将创建日期列命名为注册时间', null, 'users', '4', '1', 'approved', '2025-02-27 23:59:00', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('97', '查询所有用户的用户名、邮箱以及创建日期，并将创建日期列命名为注册时间', 'SELECT username, email, date_created AS 注册时间 \nFROM users', 'users', '4', '1', 'approved', '2025-02-27 23:59:00', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('98', '查询所有活跃用户的用户名和邮箱，并将邮箱列别名为 contact_email', null, 'users', '8', '1', 'approved', '2025-02-28 12:15:10', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('99', '查询所有活跃用户的用户名和邮箱，并将邮箱列命名为 contact_email', null, 'users', '8', '1', 'approved', '2025-02-28 12:15:10', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('100', '查询所有活跃用户的用户名和邮箱，并将邮箱列命名为 contact_email', null, 'users', '8', '1', 'approved', '2025-02-28 12:15:10', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('101', '获取所有唯一的用户名', null, 'users', '8', '2', 'approved', '2025-02-28 12:15:24', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('102', '获取所有唯一的用户名', '', 'users', '8', '2', 'approved', '2025-02-28 12:15:24', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('103', '获取所有唯一用户名，去除重复的用户名记录', 'SELECT DISTINCT username \nFROM users;', 'users', '8', '2', 'approved', '2025-02-28 12:15:24', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('104', '创建一个新用户并授予其对users表的SELECT和INSERT权限', 'CREATE USER \'newuser\'@\'localhost\' IDENTIFIED BY \'password\';\nGRANT SELECT, INSERT ON sqledu.users TO \'newuser\'@\'localhost\';', 'users', '8', '15', 'approved', '2025-03-01 19:48:49', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('105', '创建一个新用户并授权访问特定表的权限\n@[users] 创建一个新用户并授予对`users`表的SELECT和INSERT权限', null, 'users', '8', '15', 'approved', '2025-03-01 19:48:49', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('106', '查询城市表中人口超过1000万的城市名称和所属国家代码，并将人口数以百万为单位显示（列别名为人口_百万）', 'SELECT Name, CountryCode, Population / 1000000 AS 人口_百万\nFROM city\nWHERE Population > 10000000;', 'city', '9', '1', 'approved', '2025-03-04 17:16:17', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('107', '查询每个大洲中官方语言为英语的国家数量，结果显示大洲名称和对应的国家数量（列别名为英语国家数）', 'SELECT \n    c.Continent, \n    COUNT(DISTINCT c.Code) AS 英语国家数\nFROM \n    country c\nJOIN \n    countrylanguage cl \nON \n    c.Code = cl.CountryCode\nWHERE \n    cl.Language = \'English\' AND cl.IsOfficial = \'T\'\nGROUP BY \n    c.Continent;', 'country,countrylanguage', '9', '1', 'approved', '2025-03-04 17:16:17', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('108', '查找每个大洲中不同国家的数量，并去除重复的国家代码', 'SELECT \n  Continent, \n  COUNT(DISTINCT Code) AS CountryCount\nFROM \n  country\nGROUP BY \n  Continent;', 'city,country', '9', '2', 'approved', '2025-03-04 17:16:25', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('109', '获取所有官方语言，去除重复的语言条目', 'SELECT DISTINCT Language\nFROM countrylanguage\nWHERE IsOfficial = \'T\';', 'countrylanguage', '9', '2', 'approved', '2025-03-04 17:16:25', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('110', '查询所有独立年份（IndepYear）在1950年之后且人口数量大于1000万的国家信息', 'SELECT *\nFROM country\nWHERE IndepYear > 1950\n  AND Population > 10000000;', 'country', '9', '3', 'approved', '2025-03-04 17:16:32', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('111', '查找人口超过100万且所在国家独立年份在1950年之后的城市信息，包括城市名称、所属国家名称、所属大洲和城市人口', 'SELECT \n    city.Name AS CityName, \n    country.Name AS CountryName, \n    country.Continent AS Continent, \n    city.Population AS CityPopulation\nFROM \n    city\nJOIN \n    country ON city.CountryCode = country.Code\nWHERE \n    city.Population > 1000000 AND country.IndepYear > 1950;', 'city,country', '9', '4', 'approved', '2025-03-04 17:16:38', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('112', '查询每个国家的首都名称和所在城市的人口数量，并将人口数量以千为单位显示（列别名为人口_千）', 'SELECT c.Name AS 首都名称, ci.Population / 1000 AS 人口_千\nFROM country c\nJOIN city ci ON c.Capital = ci.ID;', 'city,country', '9', '1', 'approved', '2025-03-04 17:21:51', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('113', '查询每个国家的官方语言及其使用百分比，结果显示国家名称、语言名称和对应的使用百分比，仅显示官方语言（IsOfficial=\'T\'）', 'SELECT \n    c.Name AS 国家名称, \n    cl.Language AS 语言名称, \n    cl.Percentage AS 使用百分比\nFROM \n    country c\nJOIN \n    countrylanguage cl ON c.Code = cl.CountryCode\nWHERE \n    cl.IsOfficial = \'T\'', 'country,countrylanguage', '9', '1', 'approved', '2025-03-04 17:21:51', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('114', '查找每个国家的不同城市名称，去除重复的城市条目，并统计每个国家的城市数量', 'SELECT \n  c.CountryCode,\n  COUNT(DISTINCT ct.Name) AS CityCount\nFROM \n  country c\nJOIN \n  city ct ON c.Code = ct.CountryCode\nGROUP BY \n  c.CountryCode;', 'city,country', '9', '2', 'approved', '2025-03-04 17:21:58', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('115', '获取所有非官方语言的唯一语言条目，去除重复的语言记录，并按语言使用百分比降序排列', 'SELECT DISTINCT Language, Percentage\nFROM countrylanguage\nWHERE IsOfficial = \'F\'\nORDER BY Percentage DESC;', 'countrylanguage', '9', '2', 'approved', '2025-03-04 17:21:58', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('116', '查找位于亚洲且人口超过500万的城市及其所属国家的名称和首都', 'SELECT city.Name AS CityName, country.Name AS CountryName, country.Capital \nFROM city \nJOIN country ON city.CountryCode = country.Code \nWHERE country.Continent = \'Asia\' AND city.Population > 5000000;', 'city,country', '9', '3', 'approved', '2025-03-04 17:22:11', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('117', '查找位于欧洲且官方语言为德语的国家的城市信息，包括城市名称、所属国家名称、城市所在地区和人口数量', 'SELECT \n    city.Name AS CityName, \n    country.Name AS CountryName, \n    city.District, \n    city.Population\nFROM \n    city\nJOIN \n    country ON city.CountryCode = country.Code\nJOIN \n    countrylanguage ON country.Code = countrylanguage.CountryCode\nWHERE \n    country.Continent = \'Europe\' \n    AND countrylanguage.Language = \'German\' \n    AND countrylanguage.IsOfficial = \'T\';', 'city,country', '9', '4', 'approved', '2025-03-04 17:22:22', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('118', '查询每个国家中人口最多的城市，结果显示国家名称、城市名称和该城市的人口数量（列别名为最大城市人口）', 'SELECT ctry.Name AS 国家名称, ct.Name AS 城市名称, ct.Population AS 最大城市人口\nFROM country ctry\nJOIN city ct ON ctry.Code = ct.CountryCode\nWHERE (ct.CountryCode, ct.Population) IN (\n    SELECT CountryCode, MAX(Population)\n    FROM city\n    GROUP BY CountryCode\n)', 'city,country', '9', '1', 'approved', '2025-03-04 17:30:41', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('119', '查询每个大洲中官方语言的数量及对应的平均使用百分比，结果显示大洲名称、官方语言数量（列别名为官方语言数）和平均使用百分比（列别名为平均百分比），仅统计有官方语言的大洲', 'SELECT \n    c.Continent, \n    COUNT(cl.Language) AS 官方语言数, \n    AVG(cl.Percentage) AS 平均百分比\nFROM \n    country c\nJOIN \n    countrylanguage cl \nON \n    c.Code = cl.CountryCode\nWHERE \n    cl.IsOfficial = \'T\'\nGROUP BY \n    c.Continent\nHAVING \n    COUNT(cl.Language) > 0;', 'country,countrylanguage', '9', '1', 'approved', '2025-03-04 17:30:41', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('120', '统计每个大洲中不同城市的数量，去除重复的城市条目，并按城市数量降序排列', 'SELECT \n    c.Continent, \n    COUNT(DISTINCT ci.Name) AS CityCount\nFROM \n    country c\nJOIN \n    city ci ON c.Code = ci.CountryCode\nGROUP BY \n    c.Continent\nORDER BY \n    CityCount DESC;', 'city,country', '9', '2', 'approved', '2025-03-04 17:30:51', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('121', '获取每个国家的唯一官方语言和非官方语言条目，去除重复的语言记录，并显示每种语言在该国家的使用百分比，按国家代码排序', 'SELECT \n    cl.CountryCode, \n    cl.Language, \n    cl.IsOfficial, \n    cl.Percentage\nFROM \n    countrylanguage cl\nGROUP BY \n    cl.CountryCode, \n    cl.Language, \n    cl.IsOfficial\nORDER BY \n    cl.CountryCode, \n    cl.IsOfficial DESC, \n    cl.Percentage DESC;', 'countrylanguage,country', '9', '2', 'approved', '2025-03-04 17:30:51', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('122', '查询所有位于欧洲且人口超过200万的城市及其所属国家的名称、首都和所在区域', 'SELECT \n    city.Name AS CityName, \n    country.Name AS CountryName, \n    country.Capital, \n    country.Region\nFROM \n    city\nJOIN \n    country ON city.CountryCode = country.Code\nWHERE \n    country.Continent = \'Europe\' \n    AND city.Population > 2000000;', 'city,country', '9', '3', 'approved', '2025-03-04 17:31:00', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('123', '统计各大洲（Continent）中，每个大洲的国家数量，并按国家数量降序排列', 'SELECT \n  Continent, \n  COUNT(Code) AS CountryCount\nFROM \n  country\nGROUP BY \n  Continent\nORDER BY \n  CountryCount DESC;', 'country', '9', '3', 'approved', '2025-03-04 17:31:00', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('124', '查找独立年份（IndepYear）为空且GNP大于1000亿美元的国家信息', 'SELECT *\nFROM country\nWHERE IndepYear IS NULL AND GNP > 100000;', 'country', '9', '3', 'approved', '2025-03-04 17:31:00', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('125', '找出官方语言（IsOfficial=\'T\'）为英语的国家名称及其政府形式', 'SELECT c.Name, c.GovernmentForm\nFROM countrylanguage cl\nJOIN country c ON cl.CountryCode = c.Code\nWHERE cl.Language = \'English\' AND cl.IsOfficial = \'T\'', 'countrylanguage,country', '9', '3', 'approved', '2025-03-04 17:31:00', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('126', '查询人口在50万到100万之间且所属国家代码以\'A\'开头的城市名称和人口数', 'SELECT Name, Population \nFROM city \nWHERE Population BETWEEN 500000 AND 1000000 \nAND CountryCode LIKE \'A%\'', 'city', '9', '3', 'approved', '2025-03-04 17:31:00', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('127', '分析各个政府形式（GovernmentForm）下，平均预期寿命（LifeExpectancy）最高的前5个国家名称及对应的预期寿命值', 'SELECT \n    GovernmentForm, \n    Name, \n    LifeExpectancy\nFROM (\n    SELECT \n        GovernmentForm, \n        Name, \n        LifeExpectancy,\n        ROW_NUMBER() OVER (PARTITION BY GovernmentForm ORDER BY LifeExpectancy DESC) AS rn\n    FROM \n        country\n    WHERE \n        LifeExpectancy IS NOT NULL\n) t\nWHERE \n    rn <= 5\nORDER BY \n    GovernmentForm, \n    LifeExpectancy DESC;', 'country', '9', '3', 'approved', '2025-03-04 17:31:00', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('128', '查找人口超过500万且所在国家的预期寿命大于75岁的城市信息，包括城市名称、所属国家名称、所属大洲和城市人口', 'SELECT \n    city.Name AS CityName, \n    country.Name AS CountryName, \n    country.Continent AS Continent, \n    city.Population AS CityPopulation\nFROM \n    city\nJOIN \n    country ON city.CountryCode = country.Code\nWHERE \n    city.Population > 5000000 AND country.LifeExpectancy > 75;', 'city,country', '9', '4', 'approved', '2025-03-04 17:31:16', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('129', '统计每个大洲中官方语言为英语的国家数量，并按大洲进行分组显示', 'SELECT \n  c.Continent, \n  COUNT(c.Code) AS NumberOfCountries\nFROM \n  country c\nJOIN \n  countrylanguage cl \nON \n  c.Code = cl.CountryCode\nWHERE \n  cl.Language = \'English\' AND cl.IsOfficial = \'T\'\nGROUP BY \n  c.Continent;', 'country,countrylanguage', '9', '4', 'approved', '2025-03-04 17:31:16', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('130', '找出所有位于北美洲且所在国家独立年份在1900年至1950年之间的城市信息，包括城市名称、所属国家名称、城市所在地区和人口数量', 'SELECT \n    city.Name AS CityName, \n    country.Name AS CountryName, \n    city.District, \n    city.Population\nFROM \n    city\nJOIN \n    country ON city.CountryCode = country.Code\nWHERE \n    country.Continent = \'North America\' \n    AND country.IndepYear BETWEEN 1900 AND 1950;', 'city,country', '9', '4', 'approved', '2025-03-04 17:31:16', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('131', '计算各国的人均GNP（国民生产总值），并筛选出人均GNP超过10,000美元的国家，显示国家名称、人均GNP和所属大洲', 'SELECT \n    c.Name AS 国家名称,\n    (c.GNP / c.Population) AS 人均GNP,\n    c.Continent AS 所属大洲\nFROM \n    country c\nWHERE \n    c.GNP IS NOT NULL \n    AND c.Population > 0 \n    AND (c.GNP / c.Population) > 10000\nORDER BY \n    人均GNP DESC;', 'country', '9', '4', 'approved', '2025-03-04 17:31:16', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('132', '查找使用汉语作为官方语言的城市信息，包括城市名称、所属国家名称、城市所在地区和人口数量，同时显示该国的政府形式', 'SELECT \n    city.Name AS CityName, \n    country.Name AS CountryName, \n    city.District, \n    city.Population, \n    country.GovernmentForm\nFROM \n    city\nJOIN \n    country ON city.CountryCode = country.Code\nJOIN \n    countrylanguage ON country.Code = countrylanguage.CountryCode\nWHERE \n    countrylanguage.Language = \'Chinese\' AND countrylanguage.IsOfficial = \'T\';', 'city,country,countrylanguage', '9', '4', 'approved', '2025-03-04 17:31:16', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('133', '分析各国的GNP增长率（(GNP - GNPOld) / GNPOld * 100），并找出GNP增长率为正且增长率超过10%的国家，显示国家名称、GNP增长率和所属大洲', 'SELECT \n  c.Name AS 国家名称, \n  ((c.GNP - c.GNPOld) / c.GNPOld * 100) AS GNP增长率, \n  c.Continent AS 所属大洲\nFROM \n  country c\nWHERE \n  c.GNPOld IS NOT NULL AND \n  c.GNP IS NOT NULL AND \n  ((c.GNP - c.GNPOld) / c.GNPOld * 100) > 10;', 'country', '9', '4', 'approved', '2025-03-04 17:31:16', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('134', '查找每个大洲中人口最多的前5个城市，并显示城市名称、所属国家和大洲', 'SELECT \n    c.Name AS CityName, \n    co.Name AS CountryName, \n    co.Continent AS Continent\nFROM \n    city c\nJOIN \n    country co ON c.CountryCode = co.Code\nWHERE \n    (co.Continent, c.Population) IN (\n        SELECT \n            co2.Continent, \n            Population\n        FROM \n            city c2\n        JOIN \n            country co2 ON c2.CountryCode = co2.Code\n        WHERE \n            co2.Continent = co.Continent\n        ORDER BY \n            Population DESC\n        LIMIT 5\n    )\nORDER BY \n    co.Continent, \n    c.Population DESC;', 'city,country', '9', '5', 'approved', '2025-03-04 17:31:25', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('135', '统计每个大陆的国家数量，并将结果显示为“大陆名称 (国家数量)”', 'SELECT \n  CONCAT(Continent, \' (\', COUNT(*), \')\') AS Result\nFROM \n  country\nGROUP BY \n  Continent;', 'country', '9', '5', 'approved', '2025-03-04 17:31:25', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('136', '找出官方语言为英语的国家，并显示这些国家的名称、政府形式和首都市', 'SELECT c.Name, c.GovernmentForm, ci.Name AS CapitalCity\nFROM countrylanguage cl\nJOIN country c ON cl.CountryCode = c.Code\nLEFT JOIN city ci ON c.Capital = ci.ID\nWHERE cl.Language = \'English\' AND cl.IsOfficial = \'T\'', 'countrylanguage,country', '9', '5', 'approved', '2025-03-04 17:31:25', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('137', '显示所有城市名称，其中城市名称中的第一个字母大写，其余字母小写，并按修改后的城市名称排序', 'SELECT CONCAT(UPPER(LEFT(Name, 1)), LOWER(SUBSTRING(Name, 2))) AS CityName\nFROM city\nORDER BY CityName', 'city', '9', '5', 'approved', '2025-03-04 17:31:25', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('138', '计算每个国家的人均寿命（LifeExpectancy），并将结果四舍五入到整数，同时显示国家名称和所在大洲', 'SELECT \n  Name, \n  Continent, \n  ROUND(LifeExpectancy) AS LifeExpectancy\nFROM \n  country', 'country', '9', '5', 'approved', '2025-03-04 17:31:25', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('139', '找出使用频率最高的前10种语言，并显示这些语言及其使用该语言的国家百分比总和', 'SELECT \n  Language, \n  SUM(Percentage) AS TotalPercentage\nFROM \n  countrylanguage\nGROUP BY \n  Language\nORDER BY \n  TotalPercentage DESC\nLIMIT 10;', 'countrylanguage', '9', '5', 'approved', '2025-03-04 17:31:25', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('140', '查找每个大陆中人口最多的国家及其首都城市，显示国家名称、所属大陆、人口数量和首都名称', 'SELECT \n    c1.Name AS 国家名称, \n    c1.Continent AS 所属大陆, \n    c1.Population AS 人口数量, \n    c2.Name AS 首都名称\nFROM \n    country c1\nJOIN \n    city c2 ON c1.Code = c2.CountryCode AND c2.ID = c1.Capital\nWHERE \n    (c1.Continent, c1.Population) IN (\n        SELECT \n            Continent, MAX(Population)\n        FROM \n            country\n        GROUP BY \n            Continent\n    )', 'city,country', '9', '6', 'approved', '2025-03-04 17:31:39', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('141', '统计每个大洲的国家数量，并按国家数量降序排列，同时显示统计年份为当前年份', 'SELECT \n  Continent, \n  COUNT(Code) AS CountryCount, \n  YEAR(CURDATE()) AS StatYear\nFROM \n  country\nGROUP BY \n  Continent\nORDER BY \n  CountryCount DESC;', 'country', '9', '6', 'approved', '2025-03-04 17:31:39', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('142', '找出人口超过100万的城市，并按照所属国家代码分组，计算每个国家中符合条件的城市数量及这些城市总人口', 'SELECT \n  CountryCode, \n  COUNT(*) AS CityCount, \n  SUM(Population) AS TotalPopulation\nFROM \n  city\nWHERE \n  Population > 1000000\nGROUP BY \n  CountryCode;', 'city', '9', '6', 'approved', '2025-03-04 17:31:39', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('143', '列出官方语言使用比例最高的前5个国家，显示国家名称、官方语言及该语言的使用百分比，并标注数据更新时间为当前时间', 'SELECT \n    c.Name AS 国家名称, \n    cl.Language AS 官方语言, \n    cl.Percentage AS 使用百分比, \n    NOW() AS 数据更新时间\nFROM \n    countrylanguage cl\nJOIN \n    country c ON cl.CountryCode = c.Code\nWHERE \n    cl.IsOfficial = \'T\'\nORDER BY \n    cl.Percentage DESC\nLIMIT 5;', 'countrylanguage,country', '9', '6', 'approved', '2025-03-04 17:31:39', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('144', '计算每个国家的人均GDP（GNP/Population），并根据人均GDP进行降序排序，同时显示结果的生成日期', 'SELECT \n  c.Name AS CountryName,\n  (c.GNP / c.Population) AS GDP_Per_Capita,\n  CURDATE() AS Generated_Date\nFROM \n  country c\nWHERE \n  c.Population > 0\nORDER BY \n  GDP_Per_Capita DESC;', 'country', '9', '6', 'approved', '2025-03-04 17:31:39', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('145', '分析各地区（Region）的城市分布情况，统计每个地区拥有的城市数量以及平均城市人口，结果按照地区名称排序，并显示查询执行的日期', 'SELECT \n    c.Region, \n    COUNT(ci.ID) AS CityCount, \n    AVG(ci.Population) AS AvgCityPopulation,\n    CURDATE() AS QueryDate\nFROM \n    country c\nJOIN \n    city ci ON c.Code = ci.CountryCode\nGROUP BY \n    c.Region\nORDER BY \n    c.Region ASC;', 'city,country', '9', '6', 'approved', '2025-03-04 17:31:39', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('146', '查找每个国家的首都城市信息，并显示国家名称、首都名称和人口', 'SELECT ctry.Name AS 国家名称, ct.Name AS 首都名称, ct.Population AS 人口\nFROM country ctry\nJOIN city ct ON ctry.Code = ct.CountryCode\nWHERE ct.ID = ctry.Capital;', 'city,country', '9', '7', 'approved', '2025-03-04 17:31:50', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('147', '统计每个国家的官方语言及其使用百分比，仅显示官方语言', 'SELECT \n  c.Name AS CountryName, \n  cl.Language AS OfficialLanguage, \n  cl.Percentage AS Percentage\nFROM \n  country c\nJOIN \n  countrylanguage cl ON c.Code = cl.CountryCode\nWHERE \n  cl.IsOfficial = \'T\'', 'country,countrylanguage', '9', '7', 'approved', '2025-03-04 17:31:50', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('148', '找出人口超过100万的城市，并显示其所在国家的名称、城市名称和人口', 'SELECT ctry.Name AS 国家名称, city.Name AS 城市名称, city.Population AS 人口\nFROM city\nJOIN country ctry ON city.CountryCode = ctry.Code\nWHERE city.Population > 1000000;', 'city,country', '9', '7', 'approved', '2025-03-04 17:31:50', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('149', '计算各大洲的国家数量和平均预期寿命', 'SELECT \n  Continent, \n  COUNT(Code) AS 国家数量, \n  AVG(LifeExpectancy) AS 平均预期寿命\nFROM \n  country\nGROUP BY \n  Continent;', 'country', '9', '7', 'approved', '2025-03-04 17:31:50', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('150', '查找使用英语作为官方语言的国家，并显示这些国家的名称、政府形式和预期寿命', 'SELECT c.Name, c.GovernmentForm, c.LifeExpectancy\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE cl.Language = \'English\' AND cl.IsOfficial = \'T\'', 'country,countrylanguage', '9', '7', 'approved', '2025-03-04 17:31:50', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('151', '分析各国最大城市的人口占全国总人口的比例，并按比例降序排列', 'SELECT \n    ctry.Name AS CountryName,\n    ct.Name AS MaxCityName,\n    (ct.Population / ctry.Population) * 100 AS PopulationRatio\nFROM \n    country ctry\nJOIN \n    city ct ON ctry.Code = ct.CountryCode\nWHERE \n    ct.ID IN (\n        SELECT \n            c.ID\n        FROM \n            city c\n        WHERE \n            c.CountryCode = ctry.Code\n        ORDER BY \n            c.Population DESC\n        LIMIT 1\n    )\nORDER BY \n    PopulationRatio DESC;', 'city,country', '9', '7', 'approved', '2025-03-04 17:31:50', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('152', '查找所有城市及其所属国家的信息，包括那些没有城市的国家', 'SELECT \n    ctry.Name AS CountryName,\n    ctry.Code AS CountryCode,\n    city.ID AS CityID,\n    city.Name AS CityName,\n    city.District,\n    city.Population AS CityPopulation\nFROM \n    country ctry\nLEFT JOIN \n    city ON ctry.Code = city.CountryCode\nORDER BY \n    ctry.Name, city.Population DESC;', 'city,country', '9', '8', 'approved', '2025-03-04 17:32:04', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('153', '统计每个国家的官方语言数量，并显示没有官方语言的国家', 'SELECT \n  c.Code,\n  c.Name,\n  COUNT(cl.Language) AS OfficialLanguageCount\nFROM \n  country c\n  LEFT JOIN countrylanguage cl ON c.Code = cl.CountryCode AND cl.IsOfficial = \'T\'\nGROUP BY \n  c.Code, c.Name\nHAVING \n  OfficialLanguageCount = 0 OR OfficialLanguageCount IS NOT NULL\nORDER BY \n  OfficialLanguageCount ASC;', 'country,countrylanguage', '9', '8', 'approved', '2025-03-04 17:32:04', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('154', '找出人口超过100万的城市及其所在国家的名称和大洲', 'SELECT city.Name AS CityName, country.Name AS CountryName, country.Continent \nFROM city \nJOIN country ON city.CountryCode = country.Code \nWHERE city.Population > 1000000;', 'city,country', '9', '8', 'approved', '2025-03-04 17:32:04', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('155', '列出每个国家的主要语言（使用比例最高）以及该语言是否为官方语言', 'SELECT \n    c.Code,\n    c.Name AS CountryName,\n    cl.Language AS MainLanguage,\n    cl.IsOfficial\nFROM \n    country c\nJOIN \n    countrylanguage cl ON c.Code = cl.CountryCode\nWHERE \n    (c.Code, cl.Percentage) IN (\n        SELECT \n            CountryCode, MAX(Percentage)\n        FROM \n            countrylanguage\n        GROUP BY \n            CountryCode\n    )', 'country,countrylanguage', '9', '8', 'approved', '2025-03-04 17:32:04', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('156', '分析各大洲中人口最多的城市，并显示其所在国家和人口数', 'SELECT \n    c.Continent, \n    ci.Name AS CityName, \n    co.Name AS CountryName, \n    ci.Population\nFROM \n    country co\nJOIN \n    city ci ON co.Code = ci.CountryCode\nJOIN \n    (SELECT \n         Continent, MAX(Population) AS MaxPopulation\n     FROM \n         country co\n     JOIN \n         city ci ON co.Code = ci.CountryCode\n     GROUP BY \n         Continent) subq \nON \n    co.Continent = subq.Continent AND ci.Population = subq.MaxPopulation\nORDER BY \n    c.Continent;', 'city,country', '9', '8', 'approved', '2025-03-04 17:32:04', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('157', '查找所有非官方但使用比例超过50%的语言所在的国家及其使用比例', 'SELECT \n  c.Name AS CountryName, \n  cl.Language, \n  cl.Percentage\nFROM \n  countrylanguage cl\nJOIN \n  country c ON cl.CountryCode = c.Code\nWHERE \n  cl.IsOfficial = \'F\' AND cl.Percentage > 50;', 'country,countrylanguage', '9', '8', 'approved', '2025-03-04 17:32:04', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('158', '统计每个大洲的城市数量和平均人口', 'SELECT \n  c.Continent, \n  COUNT(ci.ID) AS CityCount, \n  AVG(ci.Population) AS AvgPopulation\nFROM \n  country c\nJOIN \n  city ci ON c.Code = ci.CountryCode\nGROUP BY \n  c.Continent;', 'city,country', '9', '9', 'approved', '2025-03-04 17:32:14', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('159', '查找每个区域（Region）的国家数量、总人口和平均寿命', 'SELECT \n  Region, \n  COUNT(Code) AS 国家数量, \n  SUM(Population) AS 总人口, \n  AVG(LifeExpectancy) AS 平均寿命\nFROM \n  country\nGROUP BY \n  Region;', 'country', '9', '9', 'approved', '2025-03-04 17:32:14', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('160', '分析每个官方语言的使用比例及其对应的国家数量', 'SELECT \n    cl.Language, \n    COUNT(DISTINCT cl.CountryCode) AS CountryCount, \n    AVG(cl.Percentage) AS AvgPercentage\nFROM \n    countrylanguage cl\nWHERE \n    cl.IsOfficial = \'T\'\nGROUP BY \n    cl.Language\nORDER BY \n    CountryCount DESC, \n    AvgPercentage DESC;', 'countrylanguage,country', '9', '9', 'approved', '2025-03-04 17:32:14', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('161', '找出人口最多的前10个城市，并显示它们所属的国家代码和省份', 'SELECT Name, CountryCode, District, Population\nFROM city\nORDER BY Population DESC\nLIMIT 10;', 'city', '9', '9', 'approved', '2025-03-04 17:32:14', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('162', '计算各国的人均GDP（GNP/Population），并按人均GDP降序排列，显示前20个国家', 'SELECT \n  Code, \n  Name, \n  GNP / Population AS GDP_Per_Capita\nFROM \n  country\nWHERE \n  Population > 0\nORDER BY \n  GDP_Per_Capita DESC\nLIMIT 20;', 'country', '9', '9', 'approved', '2025-03-04 17:32:14', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('163', '查找人口超过100万的城市及其所属国家的名称和大洲', 'SELECT city.Name AS CityName, country.Name AS CountryName, country.Continent \nFROM city \nJOIN country ON city.CountryCode = country.Code \nWHERE city.Population > 1000000;', 'city,country', '9', '10', 'approved', '2025-03-04 17:32:23', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('164', '获取独立年份最早的国家的名称、大洲和政府形式', 'SELECT Name, Continent, GovernmentForm\nFROM country\nWHERE IndepYear = (\n    SELECT MIN(IndepYear)\n    FROM country\n)\nLIMIT 1;', 'country', '9', '10', 'approved', '2025-03-04 17:32:23', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('165', '找出官方语言为英语的国家的名称及其首都', 'SELECT c.Name, c.Capital \nFROM countrylanguage cl\nJOIN country c ON cl.CountryCode = c.Code\nWHERE cl.Language = \'English\' AND cl.IsOfficial = \'T\'', 'countrylanguage,country', '9', '10', 'approved', '2025-03-04 17:32:23', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('166', '统计每个大洲中人口最多的城市的人口数和城市名称', 'SELECT \n    c.Continent, \n    ci.Name AS CityName, \n    ci.Population AS MaxPopulation\nFROM \n    country c\nJOIN \n    city ci ON c.Code = ci.CountryCode\nWHERE \n    (c.Continent, ci.Population) IN (\n        SELECT \n            c2.Continent, \n            MAX(ci2.Population)\n        FROM \n            country c2\n        JOIN \n            city ci2 ON c2.Code = ci2.CountryCode\n        GROUP BY \n            c2.Continent\n    )\nGROUP BY \n    c.Continent;', 'city', '9', '10', 'approved', '2025-03-04 17:32:23', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('167', '查询使用法语作为官方语言且使用比例最高的国家代码', 'SELECT CountryCode\nFROM countrylanguage\nWHERE Language = \'French\' AND IsOfficial = \'T\'\nORDER BY Percentage DESC\nLIMIT 1;', 'countrylanguage', '9', '10', 'approved', '2025-03-04 17:32:23', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('168', '找出人均国内生产总值（GNP/Population）最高的国家的名称、大洲和人均GDP值', 'SELECT \n  Name, \n  Continent, \n  (GNP / Population) AS PerCapitaGDP\nFROM \n  country\nWHERE \n  Population > 0\nORDER BY \n  PerCapitaGDP DESC\nLIMIT 1;', 'country', '9', '10', 'approved', '2025-03-04 17:32:23', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('169', '统计每个大洲中人口最多的前5个城市及其所属国家', 'SELECT \n    c.Continent,\n    ci.Name AS CityName,\n    co.Name AS CountryName,\n    ci.Population\nFROM \n    country co\nJOIN \n    city ci ON co.Code = ci.CountryCode\nWHERE \n    (c.Continent, ci.Population) IN (\n        SELECT \n            c.Continent, \n            Population\n        FROM (\n            SELECT \n                co.Continent, \n                ci.Name, \n                ci.Population,\n                ROW_NUMBER() OVER (PARTITION BY co.Continent ORDER BY ci.Population DESC) AS rn\n            FROM \n                country co\n            JOIN \n                city ci ON co.Code = ci.CountryCode\n        ) t\n        WHERE rn <= 5\n    )\nORDER BY \n    c.Continent, \n    ci.Population DESC;', 'city,country', '9', '11', 'approved', '2025-03-04 17:32:31', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('170', '查找独立年份（IndepYear）不为空且生命预期（LifeExpectancy）大于70岁的所有国家信息', 'SELECT *\nFROM country\nWHERE IndepYear IS NOT NULL AND LifeExpectancy > 70;', 'country', '9', '11', 'approved', '2025-03-04 17:32:31', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('171', '获取官方语言为英语的国家列表及其对应的政府形式和国家元首', 'SELECT c.Name, c.GovernmentForm, c.HeadOfState\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE cl.Language = \'English\' AND cl.IsOfficial = \'T\'', 'country,countrylanguage', '9', '11', 'approved', '2025-03-04 17:32:31', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('172', '分析人口超过100万的城市分布情况，按地区（District）统计城市数量', 'SELECT District, COUNT(*) AS CityCount\nFROM city\nWHERE Population > 1000000\nGROUP BY District;', 'city', '9', '11', 'approved', '2025-03-04 17:32:31', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('173', '计算各国的GNP增长率（(GNP - GNPOld) / GNPOld * 100），并筛选出增长率排名前十的国家', 'SELECT \n  Code, \n  Name, \n  ((GNP - GNPOld) / GNPOld * 100) AS GNP_Growth_Rate\nFROM \n  country\nWHERE \n  GNPOld != 0\nORDER BY \n  GNP_Growth_Rate DESC\nLIMIT 10;', 'country', '9', '11', 'approved', '2025-03-04 17:32:31', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('174', '查找每个大陆中人口最多的前5个城市，并显示其所属国家的名称和所在大洲', 'SELECT \n    c.Continent, \n    co.Name AS CountryName, \n    ci.Name AS CityName, \n    ci.Population\nFROM (\n    SELECT \n        Continent, \n        CountryCode, \n        Name, \n        Population,\n        ROW_NUMBER() OVER (PARTITION BY Continent ORDER BY Population DESC) AS rn\n    FROM city ci\n    JOIN country co ON ci.CountryCode = co.Code\n) ci\nJOIN country co ON ci.CountryCode = co.Code\nWHERE ci.rn <= 5\nORDER BY c.Continent, ci.Population DESC;', 'city,country', '9', '20', 'approved', '2025-03-04 17:32:41', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('175', '统计每个国家的官方语言数量，并按官方语言数量降序排列，显示国家名称、官方语言数量及所占比例', 'SELECT \n    c.Name AS 国家名称, \n    COUNT(cl.Language) AS 官方语言数量, \n    COUNT(cl.Language) / SUM(c.Population) * 100 AS 所占比例\nFROM \n    country c\nJOIN \n    countrylanguage cl ON c.Code = cl.CountryCode\nWHERE \n    cl.IsOfficial = \'T\'\nGROUP BY \n    c.Name\nORDER BY \n    官方语言数量 DESC;', 'country,countrylanguage', '9', '20', 'approved', '2025-03-04 17:32:41', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('176', '找出首都人口超过100万的国家，显示国家名称、首都名称和首都人口', 'SELECT ctry.Name AS 国家名称, ct.Name AS 首都名称, ct.Population AS 首都人口\nFROM country ctry\nJOIN city ct ON ctry.Code = ct.CountryCode AND ct.ID = ctry.Capital\nWHERE ct.Population > 1000000;', 'city,country', '9', '20', 'approved', '2025-03-04 17:32:41', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('177', '计算各国的人均GNP（国民生产总值），并按照人均GNP从高到低排序，显示国家名称、人均GNP、总人口和GNP', 'SELECT \n  Name AS 国家名称, \n  GNP / Population AS 人均GNP, \n  Population AS 总人口, \n  GNP AS 国民生产总值\nFROM \n  country\nWHERE \n  Population > 0\nORDER BY \n  人均GNP DESC;', 'country', '9', '20', 'approved', '2025-03-04 17:32:41', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('178', '分析使用英语作为官方语言的国家数量及其在各自大洲中的占比，显示大洲名称、使用英语作为官方语言的国家数量及占比百分比', 'SELECT \n    c.Continent,\n    COUNT(cl.CountryCode) AS EnglishSpeakingCountries,\n    ROUND(COUNT(cl.CountryCode) / COUNT(DISTINCT c.Code) * 100, 2) AS Percentage\nFROM \n    country c\nLEFT JOIN \n    countrylanguage cl ON c.Code = cl.CountryCode AND cl.Language = \'English\' AND cl.IsOfficial = \'T\'\nGROUP BY \n    c.Continent;', 'country,countrylanguage', '9', '20', 'approved', '2025-03-04 17:32:41', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('179', '创建一个临时表，包含人口超过100万的城市及其所属国家的名称和大洲信息', 'CREATE TEMPORARY TABLE LargeCities AS\nSELECT \n    c.Name AS CityName,\n    co.Name AS CountryName,\n    co.Continent\nFROM \n    city c\nJOIN \n    country co ON c.CountryCode = co.Code\nWHERE \n    c.Population > 1000000;', 'city,country', '9', '22', 'approved', '2025-03-04 17:32:54', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('180', '创建一个临时表，统计每个大洲的国家数量，并按国家数量降序排列', 'CREATE TEMPORARY TABLE continent_country_count AS\nSELECT \n  Continent, \n  COUNT(*) AS CountryCount\nFROM \n  country\nGROUP BY \n  Continent\nORDER BY \n  CountryCount DESC;', 'country', '9', '22', 'approved', '2025-03-04 17:32:54', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('181', '创建一个临时表，列出官方语言为英语的国家及其首都城市名称', 'CREATE TEMPORARY TABLE official_english_speaking_countries AS\nSELECT c.Name AS CountryName, cy.Name AS CapitalCity\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nJOIN city cy ON c.Capital = cy.ID\nWHERE cl.Language = \'English\' AND cl.IsOfficial = \'T\';', 'city,countrylanguage', '9', '22', 'approved', '2025-03-04 17:32:54', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('182', '创建一个临时表，计算各国官方语言的比例，并找出官方语言比例最高的前5个国家', 'CREATE TEMPORARY TABLE OfficialLanguageRatio AS\nSELECT \n    c.Code,\n    c.Name AS CountryName,\n    cl.Language,\n    cl.Percentage AS OfficialLanguagePercentage\nFROM \n    country c\nJOIN \n    countrylanguage cl ON c.Code = cl.CountryCode\nWHERE \n    cl.IsOfficial = \'T\';\n\nSELECT \n    CountryName, \n    OfficialLanguagePercentage\nFROM \n    OfficialLanguageRatio\nORDER BY \n    OfficialLanguagePercentage DESC\nLIMIT 5;', 'country,countrylanguage', '9', '22', 'approved', '2025-03-04 17:32:54', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('183', '创建一个临时表，包含人口密度（人口/面积）最高的前10个城市及其所属国家代码和区域信息', 'CREATE TEMPORARY TABLE Top10CityDensity AS\nSELECT \n    c.ID,\n    c.Name,\n    c.CountryCode,\n    co.Region,\n    (c.Population / co.SurfaceArea) AS PopulationDensity\nFROM \n    city c\nJOIN \n    country co ON c.CountryCode = co.Code\nORDER BY \n    PopulationDensity DESC\nLIMIT 10;', 'city', '9', '22', 'approved', '2025-03-04 17:32:54', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('184', '插入一个新的城市记录，并确保该城市的国家代码存在于国家表中。例如，插入一个名为“Newville”的城市，属于国家代码为“USA”的国家，位于“California”地区，人口为50000。', 'INSERT INTO city (Name, CountryCode, District, Population)\nSELECT \'Newville\', \'USA\', \'California\', 50000\nFROM dual\nWHERE EXISTS (SELECT 1 FROM country WHERE Code = \'USA\');', 'city,country', '9', '12', 'approved', '2025-03-04 17:33:06', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('185', '插入一条新的国家记录，包括国家代码、名称、所属大洲、地区、面积、独立年份、人口、预期寿命、GNP等信息。例如，插入一个名为“Atlantis”的新国家，位于“Oceania”，面积为100000平方公里，独立年份为2023，人口为1000000。', 'INSERT INTO country (Code, Name, Continent, Region, SurfaceArea, IndepYear, Population, LifeExpectancy, GNP, LocalName, GovernmentForm, HeadOfState, Code2)\nVALUES (\'ATL\', \'Atlantis\', \'Oceania\', \'South Pacific\', 100000.00, 2023, 1000000, NULL, NULL, \'Atlantis\', \'Republic\', NULL, \'AT\')', 'country', '9', '12', 'approved', '2025-03-04 17:33:06', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('186', '插入一种新的官方语言到国家语言表中，并确保该国家代码存在于国家表中。例如，插入“Klingon”作为国家代码为“KLG”的国家的官方语言，官方语言比例为5.0%，并且设置为官方语言（IsOfficial=\'T\'）。', 'INSERT INTO countrylanguage (CountryCode, Language, IsOfficial, Percentage)\nSELECT \'KLG\', \'Klingon\', \'T\', 5.0\nWHERE EXISTS (SELECT 1 FROM country WHERE Code = \'KLG\');', 'countrylanguage,country', '9', '12', 'approved', '2025-03-04 17:33:06', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('187', '查找每个大洲中人口最多的前5个城市，并显示其所属国家名称、城市名称、所在洲以及人口数量', 'SELECT \n    c.Continent, \n    co.Name AS CountryName, \n    ci.Name AS CityName, \n    ci.Population\nFROM \n    country co\nJOIN \n    city ci ON co.Code = ci.CountryCode\nWHERE \n    (c.Continent, ci.Population) IN (\n        SELECT \n            c2.Continent, \n            Population\n        FROM \n            city ci2\n        JOIN \n            country co2 ON ci2.CountryCode = co2.Code\n        WHERE \n            c2.Continent = c.Continent\n        ORDER BY \n            Population DESC\n        LIMIT 5\n    )\nORDER BY \n    c.Continent, \n    ci.Population DESC;', 'city,country', '9', '13', 'approved', '2025-03-04 17:33:10', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('188', '统计每个国家的官方语言数量，并按官方语言数量降序排列，显示国家代码、国家名称和官方语言数量', 'SELECT \n    c.Code, \n    c.Name, \n    COUNT(cl.Language) AS OfficialLanguageCount\nFROM \n    country c\nJOIN \n    countrylanguage cl \nON \n    c.Code = cl.CountryCode\nWHERE \n    cl.IsOfficial = \'T\'\nGROUP BY \n    c.Code, c.Name\nORDER BY \n    OfficialLanguageCount DESC;', 'country,countrylanguage', '9', '13', 'approved', '2025-03-04 17:33:10', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('189', '创建一个视图，显示每个国家的首都城市信息，包括国家名称、首都名称、所在大洲和首都人口。通过这个视图可以简化查询首都相关信息的操作。', 'CREATE VIEW CapitalCityInfo AS\nSELECT \n    ctry.Name AS CountryName, \n    cit.Name AS CapitalName, \n    ctry.Continent AS Continent, \n    cit.Population AS CapitalPopulation\nFROM \n    country ctry\nJOIN \n    city cit ON ctry.Capital = cit.ID;', 'city,country', '9', '21', 'approved', '2025-03-04 17:33:15', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('190', '创建一个视图，展示官方语言为英语的国家列表，包括国家名称、所在区域、政府形式以及英语作为官方语言的比例。这有助于分析使用英语作为官方语言的国家分布及其特征。', 'CREATE VIEW EnglishSpeakingCountries AS\nSELECT \n    c.Name AS CountryName,\n    c.Region AS Region,\n    c.GovernmentForm AS GovernmentForm,\n    cl.Percentage AS EnglishPercentage\nFROM \n    country c\nJOIN \n    countrylanguage cl ON c.Code = cl.CountryCode\nWHERE \n    cl.Language = \'English\' AND cl.IsOfficial = \'T\';', 'country,countrylanguage', '9', '21', 'approved', '2025-03-04 17:33:15', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('191', '查找每个大洲中人口最多的城市及其所在国家的信息', 'SELECT \n    c.Continent,\n    cy.Name AS CityName,\n    co.Name AS CountryName,\n    cy.Population\nFROM \n    country co\nJOIN \n    city cy ON co.Code = cy.CountryCode\nJOIN \n    (SELECT \n         Continent, MAX(Population) AS MaxPopulation\n     FROM \n         country co\n     JOIN \n         city cy ON co.Code = cy.CountryCode\n     GROUP BY \n         Continent) subq \nON \n    co.Continent = subq.Continent AND cy.Population = subq.MaxPopulation\nORDER BY \n    c.Continent;', 'city,country', '9', '14', 'approved', '2025-03-04 17:33:23', '2025-03-05 11:04:28');
INSERT INTO `nl_queries` VALUES ('192', '统计每个大陆的国家数量，并按国家数量降序排列', 'SELECT Continent, COUNT(Code) AS CountryCount\nFROM country\nGROUP BY Continent\nORDER BY CountryCount DESC;', 'country', '9', '14', 'approved', '2025-03-04 17:33:23', '2025-03-05 11:02:56');
INSERT INTO `nl_queries` VALUES ('193', '查找官方语言为英语的国家及其对应的政府形式和人口', 'SELECT c.Name, c.GovernmentForm, c.Population\nFROM countrylanguage cl\nJOIN country c ON cl.CountryCode = c.Code\nWHERE cl.Language = \'English\' AND cl.IsOfficial = \'T\';', 'countrylanguage,country', '9', '14', 'approved', '2025-03-04 17:33:23', '2025-03-05 11:02:56');
INSERT INTO `nl_queries` VALUES ('194', '找出人口超过1000万的城市，并显示其所在国家的代码和名称', 'SELECT city.Name, city.CountryCode, country.Name \nFROM city \nJOIN country ON city.CountryCode = country.Code \nWHERE city.Population > 10000000;', 'city', '9', '14', 'approved', '2025-03-04 17:33:23', '2025-03-05 11:02:54');
INSERT INTO `nl_queries` VALUES ('195', '计算各国的人均GNP（国民生产总值），并筛选出人均GNP大于10000美元的国家', 'SELECT \n  Name, \n  GNP / Population AS GNP_Per_Capita\nFROM \n  country\nWHERE \n  GNP / Population > 10000\nHAVING \n  GNP_Per_Capita IS NOT NULL;', 'country', '9', '14', 'approved', '2025-03-04 17:33:23', '2025-03-05 11:02:54');
INSERT INTO `nl_queries` VALUES ('196', '统计每种语言作为官方语言的国家数量，并找出使用最广泛的语言', 'SELECT \n  Language, \n  COUNT(CountryCode) AS OfficialCountryCount\nFROM \n  countrylanguage\nWHERE \n  IsOfficial = \'T\'\nGROUP BY \n  Language\nORDER BY \n  OfficialCountryCount DESC\nLIMIT 1;', 'countrylanguage', '9', '14', 'approved', '2025-03-04 17:33:23', '2025-03-05 11:02:52');
INSERT INTO `nl_queries` VALUES ('197', '统计每个大洲中人口最多的前5个城市及其所在国家', 'SELECT \n    c.Continent,\n    ci.Name AS CityName,\n    co.Name AS CountryName,\n    ci.Population\nFROM \n    country co\nJOIN \n    city ci ON co.Code = ci.CountryCode\nWHERE \n    (c.Continent, ci.Population) IN (\n        SELECT \n            c.Continent, \n            Population\n        FROM (\n            SELECT \n                co.Continent, \n                ci.Population, \n                ci.Name, \n                co.Name AS CountryName,\n                ROW_NUMBER() OVER (PARTITION BY co.Continent ORDER BY ci.Population DESC) AS rn\n            FROM \n                country co\n            JOIN \n                city ci ON co.Code = ci.CountryCode\n        ) t\n        WHERE t.rn <= 5\n    )\nORDER BY \n    c.Continent, \n    ci.Population DESC;', 'city,country', '9', '15', 'approved', '2025-03-04 17:33:30', '2025-03-05 11:02:50');
INSERT INTO `nl_queries` VALUES ('198', '查询独立年份（IndepYear）不为空的国家数量，并按独立年份升序排列', 'SELECT COUNT(*) AS CountryCount, IndepYear\nFROM country\nWHERE IndepYear IS NOT NULL\nGROUP BY IndepYear\nORDER BY IndepYear ASC;', 'country', '9', '15', 'approved', '2025-03-04 17:33:30', '2025-03-05 11:02:50');
INSERT INTO `nl_queries` VALUES ('199', '查找官方语言为英语的国家，并显示这些国家的名称、所属大洲和政府形式', 'SELECT c.Name, c.Continent, c.GovernmentForm\nFROM countrylanguage cl\nJOIN country c ON cl.CountryCode = c.Code\nWHERE cl.Language = \'English\' AND cl.IsOfficial = \'T\'', 'countrylanguage,country', '9', '15', 'approved', '2025-03-04 17:33:30', '2025-03-05 11:02:50');
INSERT INTO `nl_queries` VALUES ('200', '分析各国首都的城市人口占全国总人口的比例，仅显示比例大于1%的国家', 'SELECT \n    ctry.Name AS CountryName,\n    ct.Name AS CapitalCity,\n    (ct.Population / ctry.Population * 100) AS PopulationRatio\nFROM \n    country ctry\nJOIN \n    city ct ON ctry.Capital = ct.ID\nWHERE \n    (ct.Population / ctry.Population * 100) > 1;', 'city,country', '9', '15', 'approved', '2025-03-04 17:33:30', '2025-03-05 11:02:46');
INSERT INTO `nl_queries` VALUES ('201', '计算各个大洲的平均预期寿命（LifeExpectancy），并按平均预期寿命降序排列', 'SELECT Continent, AVG(LifeExpectancy) AS AvgLifeExpectancy\nFROM country\nGROUP BY Continent\nORDER BY AvgLifeExpectancy DESC;', 'country', '9', '15', 'approved', '2025-03-04 17:33:30', '2025-03-05 11:02:45');
INSERT INTO `nl_queries` VALUES ('202', '查询所有客户的姓名、地址和电话，并将客户姓名别名为客户名称', 'SELECT C_NAME AS 客户名称, C_ADDRESS, C_PHONE \nFROM customer', 'customer', '10', '1', 'approved', '2025-03-05 13:53:39', '2025-03-05 13:56:12');
INSERT INTO `nl_queries` VALUES ('203', '统计每个订单的总金额（包括折扣），并显示订单编号、客户编号和总金额，总金额列别名为订单总金额', 'SELECT \n  o.O_ORDERKEY, \n  o.O_CUSTKEY, \n  SUM(l.L_EXTENDEDPRICE * (1 - l.L_DISCOUNT)) AS 订单总金额\nFROM \n  orders o\nJOIN \n  lineitem l ON o.O_ORDERKEY = l.L_ORDERKEY\nGROUP BY \n  o.O_ORDERKEY, o.O_CUSTKEY;', 'orders,lineitem', '10', '1', 'approved', '2025-03-05 13:53:39', '2025-03-05 13:56:11');
INSERT INTO `nl_queries` VALUES ('204', '查找每个地区的国家数量，并显示地区名称和国家数量，国家数量列别名为国家数', 'SELECT r.R_NAME, COUNT(n.N_NATIONKEY) AS 国家数\nFROM region r\nJOIN nation n ON r.R_REGIONKEY = n.N_REGIONKEY\nGROUP BY r.R_NAME', 'nation,region', '10', '1', 'approved', '2025-03-05 13:53:39', '2025-03-05 13:56:11');
INSERT INTO `nl_queries` VALUES ('205', '查找来自不同国家的唯一客户，确保每个客户的国家只出现一次', 'SELECT DISTINCT c.C_CUSTKEY, c.C_NAME, n.N_NAME AS NATION_NAME\nFROM customer c\nJOIN nation n ON c.C_NATIONKEY = n.N_NATIONKEY;', 'customer,nation', '10', '2', 'approved', '2025-03-05 13:53:50', '2025-03-05 13:56:09');
INSERT INTO `nl_queries` VALUES ('206', '获取所有供应商提供的不同零件编号，确保每个零件编号只出现一次', 'SELECT DISTINCT PS_PARTKEY AS 零件编号\nFROM partsupp;', 'part,supplier', '10', '2', 'approved', '2025-03-05 13:53:50', '2025-03-05 13:56:09');
INSERT INTO `nl_queries` VALUES ('207', '统计订单中包含的不同产品线（L_LINENUMBER），确保每个产品线只出现一次，并显示对应的订单号', 'SELECT DISTINCT L_LINENUMBER, L_ORDERKEY\nFROM lineitem\nORDER BY L_ORDERKEY, L_LINENUMBER;', 'orders,lineitem', '10', '2', 'approved', '2025-03-05 13:53:50', '2025-03-05 13:56:07');
INSERT INTO `nl_queries` VALUES ('208', '查找账户余额大于1000元的客户信息', 'SELECT *\nFROM customer\nWHERE C_ACCTBAL > 1000;', 'customer', '10', '3', 'approved', '2025-03-05 13:53:56', '2025-03-05 13:56:07');
INSERT INTO `nl_queries` VALUES ('209', '统计订单状态为\'F\'且订单金额超过5000元的订单中，每条订单项的数量和总金额', 'SELECT \n    l.L_ORDERKEY, \n    COUNT(l.L_LINENUMBER) AS line_count, \n    SUM(l.L_EXTENDEDPRICE) AS total_amount\nFROM \n    orders o\nJOIN \n    lineitem l ON o.O_ORDERKEY = l.L_ORDERKEY\nWHERE \n    o.O_ORDERSTATUS = \'F\' AND o.O_TOTALPRICE > 5000\nGROUP BY \n    l.L_ORDERKEY;', 'orders,lineitem', '10', '3', 'approved', '2025-03-05 13:53:56', '2025-03-05 13:56:06');
INSERT INTO `nl_queries` VALUES ('210', '找出所在国家为\'CANADA\'的供应商名称及其联系方式', 'SELECT supplier.S_NAME, supplier.S_PHONE, supplier.S_ADDRESS\nFROM supplier\nJOIN nation ON supplier.S_NATIONKEY = nation.N_NATIONKEY\nWHERE nation.N_NAME = \'CANADA\'', 'supplier,nation', '10', '3', 'approved', '2025-03-05 13:53:56', '2025-03-05 13:56:05');
INSERT INTO `nl_queries` VALUES ('211', '查询零件类型为\'MEDIUM PLATED COPPER\'的零件供应商信息及其供应成本，并按供应成本升序排列', 'SELECT p.P_PARTKEY, ps.PS_SUPPKEY, s.S_NAME, ps.PS_SUPPLYCOST\nFROM part p\nJOIN partsupp ps ON p.P_PARTKEY = ps.PS_PARTKEY\nJOIN supplier s ON ps.PS_SUPPKEY = s.S_SUPPKEY\nWHERE p.P_TYPE = \'MEDIUM PLATED COPPER\'\nORDER BY ps.PS_SUPPLYCOST ASC;', 'part,partsupp', '10', '3', 'approved', '2025-03-05 13:53:56', '2025-03-05 13:56:03');
INSERT INTO `nl_queries` VALUES ('212', '查找订单总金额超过5000元且来自特定市场细分（如\'FURNITURE\'）的客户信息', 'SELECT c.*\nFROM customer c\nJOIN orders o ON c.C_CUSTKEY = o.O_CUSTKEY\nWHERE o.O_TOTALPRICE > 5000 AND c.C_MKTSEGMENT = \'FURNITURE\'', 'customer,orders', '10', '4', 'approved', '2025-03-05 13:54:03', '2025-03-05 13:56:03');
INSERT INTO `nl_queries` VALUES ('213', '统计每个零件在过去一年内被订购的数量，并筛选出订购量超过100件的零件', 'SELECT p.P_PARTKEY, p.P_NAME, SUM(l.L_QUANTITY) AS TOTAL_QUANTITY\nFROM part p\nJOIN partsupp ps ON p.P_PARTKEY = ps.PS_PARTKEY\nJOIN lineitem l ON ps.PS_SUPPKEY = l.L_SUPPKEY AND ps.PS_PARTKEY = l.L_PARTKEY\nWHERE l.L_SHIPDATE >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)\nGROUP BY p.P_PARTKEY, p.P_NAME\nHAVING TOTAL_QUANTITY > 100;', 'lineitem,part', '10', '4', 'approved', '2025-03-05 13:54:03', '2025-03-05 13:56:02');
INSERT INTO `nl_queries` VALUES ('214', '找出所在国家为\'UNITED STATES\'且账户余额大于等于10000的供应商信息', 'SELECT s.*\nFROM supplier s\nJOIN nation n ON s.S_NATIONKEY = n.N_NATIONKEY\nWHERE n.N_NAME = \'UNITED STATES\' AND s.S_ACCTBAL >= 10000;', 'supplier,nation', '10', '4', 'approved', '2025-03-05 13:54:03', '2025-03-05 13:56:01');
INSERT INTO `nl_queries` VALUES ('215', '分析每个订单的折扣情况，筛选出折扣率大于等于5%且订单状态为\'F\'（已完成）的订单详情', 'SELECT \n    o.O_ORDERKEY,\n    o.O_CUSTKEY,\n    o.O_ORDERSTATUS,\n    o.O_TOTALPRICE,\n    o.O_ORDERDATE,\n    o.O_ORDERPRIORITY,\n    o.O_CLERK,\n    o.O_SHIPPRIORITY,\n    o.O_COMMENT,\n    l.L_DISCOUNT,\n    l.L_EXTENDEDPRICE,\n    l.L_QUANTITY,\n    l.L_SHIPDATE,\n    l.L_COMMITDATE,\n    l.L_RECEIPTDATE,\n    l.L_SHIPINSTRUCT,\n    l.L_SHIPMODE,\n    l.L_COMMENT\nFROM \n    orders o\nJOIN \n    lineitem l ON o.O_ORDERKEY = l.L_ORDERKEY\nWHERE \n    l.L_DISCOUNT >= 0.05 AND o.O_ORDERSTATUS = \'F\';', 'orders,lineitem', '10', '4', 'approved', '2025-03-05 13:54:03', '2025-03-05 13:56:01');
INSERT INTO `nl_queries` VALUES ('216', '使用字符函数将客户姓名转换为大写，并显示客户的地址和电话', 'SELECT UPPER(C_NAME) AS C_NAME, C_ADDRESS, C_PHONE \nFROM customer', 'customer', '10', '5', 'approved', '2025-03-05 13:54:20', '2025-03-05 13:55:58');
INSERT INTO `nl_queries` VALUES ('217', '查找订单状态为\'F\'的订单，显示完整的客户姓名（使用CONCAT连接名和姓），并计算每个客户订单数量', 'SELECT \n    CONCAT(c.C_NAME, \' (\', c.C_ADDRESS, \')\') AS CustomerFullName,\n    COUNT(o.O_ORDERKEY) AS OrderCount\nFROM \n    orders o\nJOIN \n    customer c ON o.O_CUSTKEY = c.C_CUSTKEY\nWHERE \n    o.O_ORDERSTATUS = \'F\'\nGROUP BY \n    c.C_CUSTKEY, CustomerFullName\nORDER BY \n    OrderCount DESC;', 'orders,customer', '10', '5', 'approved', '2025-03-05 13:54:20', '2025-03-05 13:55:57');
INSERT INTO `nl_queries` VALUES ('218', '统计每个供应商提供的零件数量，并显示供应商名称和零件名称的首字母大写形式', 'SELECT \n  CONCAT(UPPER(LEFT(s.S_NAME, 1)), LOWER(SUBSTRING(s.S_NAME, 2))) AS SupplierName,\n  CONCAT(UPPER(LEFT(p.P_NAME, 1)), LOWER(SUBSTRING(p.P_NAME, 2))) AS PartName,\n  COUNT(*) AS PartCount\nFROM \n  supplier s\nJOIN \n  partsupp ps ON s.S_SUPPKEY = ps.PS_SUPPKEY\nJOIN \n  part p ON ps.PS_PARTKEY = p.P_PARTKEY\nGROUP BY \n  s.S_SUPPKEY, s.S_NAME, p.P_NAME;', 'part,supplier', '10', '5', 'approved', '2025-03-05 13:54:20', '2025-03-05 13:55:57');
INSERT INTO `nl_queries` VALUES ('219', '统计每个月的订单数量和总金额，并计算每个订单的平均折扣率，按年份和月份排序', 'SELECT \n    YEAR(o.O_ORDERDATE) AS order_year,\n    MONTH(o.O_ORDERDATE) AS order_month,\n    COUNT(o.O_ORDERKEY) AS order_count,\n    SUM(l.L_EXTENDEDPRICE) AS total_amount,\n    AVG(l.L_DISCOUNT) AS avg_discount\nFROM \n    orders o\nJOIN \n    lineitem l ON o.O_ORDERKEY = l.L_ORDERKEY\nGROUP BY \n    YEAR(o.O_ORDERDATE), MONTH(o.O_ORDERDATE)\nORDER BY \n    order_year, order_month;', 'orders,lineitem', '10', '6', 'approved', '2025-03-05 13:54:25', '2025-03-05 13:55:59');
INSERT INTO `nl_queries` VALUES ('220', '查找每个国家在过去一年内下单金额超过10,000元的客户信息，包括客户的名称、地址和联系方式，并按国家名称排序', 'SELECT \n    c.C_NAME, \n    c.C_ADDRESS, \n    c.C_PHONE, \n    n.N_NAME\nFROM \n    customer c\nJOIN \n    nation n ON c.C_NATIONKEY = n.N_NATIONKEY\nJOIN \n    orders o ON c.C_CUSTKEY = o.O_CUSTKEY\nWHERE \n    o.O_ORDERDATE >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)\nGROUP BY \n    c.C_CUSTKEY, n.N_NAME\nHAVING \n    SUM(o.O_TOTALPRICE) > 10000\nORDER BY \n    n.N_NAME;', 'customer,nation', '10', '6', 'approved', '2025-03-05 13:54:25', '2025-03-05 13:55:55');
INSERT INTO `nl_queries` VALUES ('221', '分析供应商在最近一个季度内的供货情况，统计每个供应商提供的零件总数、平均供货成本以及供货零件种类数量，并按供应商所在国家分组显示', 'SELECT \n    s.S_NAME,\n    n.N_NAME AS NATION,\n    COUNT(ps.PS_PARTKEY) AS TOTAL_PARTS_SUPPLIED,\n    AVG(ps.PS_SUPPLYCOST) AS AVERAGE_SUPPLY_COST,\n    COUNT(DISTINCT ps.PS_PARTKEY) AS DISTINCT_PARTS_SUPPLIED\nFROM \n    supplier s\nJOIN \n    partsupp ps ON s.S_SUPPKEY = ps.PS_SUPPKEY\nJOIN \n    nation n ON s.S_NATIONKEY = n.N_NATIONKEY\nWHERE \n    ps.PS_AVAILQTY > 0 AND \n    ps.PS_SUPPLYCOST IS NOT NULL AND \n    ps.PS_SUPPLYCOST > 0 AND \n    ps.PS_PARTKEY IS NOT NULL\nGROUP BY \n    s.S_NAME, n.N_NAME\nORDER BY \n    n.N_NAME, s.S_NAME;', 'supplier,partsupp', '10', '6', 'approved', '2025-03-05 13:54:25', '2025-03-05 13:55:54');
INSERT INTO `nl_queries` VALUES ('222', '查询所有人口超过1000万的城市名称和所属国家代码，并将城市人口命名为 city_population', 'SELECT Name, CountryCode, Population AS city_population\nFROM city\nWHERE Population > 10000000;', 'city', '11', '1', 'approved', '2025-03-06 14:46:36', '2025-03-06 14:48:55');
INSERT INTO `nl_queries` VALUES ('223', '统计各大洲的国家数量，并按洲名排序，显示洲名和国家数量', 'SELECT \n  Continent, \n  COUNT(Code) AS CountryCount\nFROM \n  country\nGROUP BY \n  Continent\nORDER BY \n  Continent;', 'country', '11', '1', 'approved', '2025-03-06 14:46:36', '2025-03-06 14:48:55');
INSERT INTO `nl_queries` VALUES ('224', '查找官方语言为英语的国家代码和该语言的使用百分比，并将百分比命名为 english_speaking_percentage', 'SELECT CountryCode, Percentage AS english_speaking_percentage\nFROM countrylanguage\nWHERE Language = \'English\' AND IsOfficial = \'T\'', 'countrylanguage', '11', '1', 'approved', '2025-03-06 14:46:36', '2025-03-06 14:48:56');
INSERT INTO `nl_queries` VALUES ('225', '找出首都人口超过500万的国家名称、首都名称和首都人口，并将首都人口命名为 capital_population', 'SELECT ctry.Name AS 国家名称, ct.Name AS 首都名称, ct.Population AS capital_population\nFROM country ctry\nJOIN city ct ON ctry.Capital = ct.ID\nWHERE ct.Population > 5000000;', 'country,city', '11', '1', 'approved', '2025-03-06 14:46:36', '2025-03-06 14:48:52');
INSERT INTO `nl_queries` VALUES ('226', '计算每个国家的人均GDP（GNP/Population），并筛选出人均GDP大于10000的国家，显示国家名称和人均GDP，将人均GDP命名为 per_capita_GNP', 'SELECT \n  Name, \n  (GNP / Population) AS per_capita_GNP\nFROM \n  country\nWHERE \n  (GNP / Population) > 10000;', 'country', '11', '1', 'approved', '2025-03-06 14:46:36', '2025-03-06 14:48:51');
INSERT INTO `nl_queries` VALUES ('227', '获取所有不同城市名称', 'SELECT DISTINCT Name \nFROM city', 'city', '11', '2', 'approved', '2025-03-06 14:46:40', '2025-03-06 14:48:53');
INSERT INTO `nl_queries` VALUES ('228', '统计各个大洲中不同的政府形式数量', 'SELECT \n  Continent, \n  COUNT(DISTINCT GovernmentForm) AS DifferentGovernmentForms\nFROM \n  country\nGROUP BY \n  Continent;', 'country', '11', '2', 'approved', '2025-03-06 14:46:40', '2025-03-06 14:48:49');
INSERT INTO `nl_queries` VALUES ('229', '查询所有不同的官方语言', 'SELECT DISTINCT Language \nFROM countrylanguage \nWHERE IsOfficial = \'T\'', 'countrylanguage', '11', '2', 'approved', '2025-03-06 14:46:40', '2025-03-06 14:48:48');
INSERT INTO `nl_queries` VALUES ('230', '查找不同国家首都的城市名称，且结果不重复', 'SELECT DISTINCT c.Name \nFROM city c \nJOIN country co ON c.CountryCode = co.Code \nWHERE c.ID = co.Capital', 'city,country', '11', '2', 'approved', '2025-03-06 14:46:40', '2025-03-06 14:48:47');
INSERT INTO `nl_queries` VALUES ('231', '获取每个国家不同语言的种类数量，并确保国家不重复', 'SELECT \n    c.Code, \n    c.Name, \n    COUNT(DISTINCT cl.Language) AS LanguageCount\nFROM \n    country c\nJOIN \n    countrylanguage cl \nON \n    c.Code = cl.CountryCode\nGROUP BY \n    c.Code, c.Name;', 'country,countrylanguage', '11', '2', 'approved', '2025-03-06 14:46:40', '2025-03-06 14:48:46');
INSERT INTO `nl_queries` VALUES ('232', '查找人口超过100万且位于欧洲的城市及其所属国家的名称和区域', 'SELECT city.Name AS CityName, country.Name AS CountryName, country.Region \nFROM city \nJOIN country ON city.CountryCode = country.Code \nWHERE city.Population > 1000000 AND country.Continent = \'Europe\'', 'city,country', '11', '3', 'approved', '2025-03-06 14:46:51', '2025-03-06 14:48:45');
INSERT INTO `nl_queries` VALUES ('233', '统计各大洲中独立年份早于1900年的国家数量', 'SELECT \n  Continent, \n  COUNT(*) AS CountryCount\nFROM \n  country\nWHERE \n  IndepYear < 1900\nGROUP BY \n  Continent;', 'country', '11', '3', 'approved', '2025-03-06 14:46:51', '2025-03-06 14:48:44');
INSERT INTO `nl_queries` VALUES ('234', '列出人口在500万到1000万之间的城市名称及其所在地区', 'SELECT city.Name, city.District \nFROM city \nWHERE city.Population BETWEEN 5000000 AND 10000000;', 'city', '11', '3', 'approved', '2025-03-06 14:46:51', '2025-03-06 14:48:43');
INSERT INTO `nl_queries` VALUES ('235', '查找官方语言为英语的国家，并显示这些国家的政府形式和首长姓名', 'SELECT c.GovernmentForm, c.HeadOfState\nFROM countrylanguage cl\nJOIN country c ON cl.CountryCode = c.Code\nWHERE cl.Language = \'English\' AND cl.IsOfficial = \'T\'', 'countrylanguage,country', '11', '3', 'approved', '2025-03-06 14:46:51', '2025-03-06 14:48:43');
INSERT INTO `nl_queries` VALUES ('236', '找出面积大于500万平方公里并且人口超过1亿的国家，显示其名称、大洲、人口和人均寿命', 'SELECT \n  Name, \n  Continent, \n  Population, \n  LifeExpectancy \nFROM \n  country \nWHERE \n  SurfaceArea > 5000000 AND \n  Population > 100000000;', 'country', '11', '3', 'approved', '2025-03-06 14:46:51', '2025-03-06 14:48:42');

-- ----------------------------
-- Table structure for sqls
-- ----------------------------
DROP TABLE IF EXISTS `sqls`;
CREATE TABLE `sqls` (
  `id` int NOT NULL AUTO_INCREMENT,
  `filename` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `file_content` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `created_at` datetime DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- ----------------------------
-- Records of sqls
-- ----------------------------
INSERT INTO `sqls` VALUES ('1', 'sqledu2.sql', '/*\r\nNavicat MySQL Data Transfer\r\n\r\nSource Server         : localhost\r\nSource Server Version : 80022\r\nSource Host           : localhost:3306\r\nSource Database       : sqledu\r\n\r\nTarget Server Type    : MYSQL\r\nTarget Server Version : 80022\r\nFile Encoding         : 65001\r\n\r\nDate: 2025-01-20 10:39:22\r\n*/\r\n\r\nSET FOREIGN_KEY_CHECKS=0;\r\n\r\n-- ----------------------------\r\n-- Table structure for alembic_version\r\n-- ----------------------------\r\nDROP TABLE IF EXISTS `alembic_version`;\r\nCREATE TABLE `alembic_version` (\r\n  `version_num` varchar(32) NOT NULL,\r\n  PRIMARY KEY (`version_num`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\r\n\r\n-- ----------------------------\r\n-- Records of alembic_version\r\n-- ----------------------------\r\n\r\n-- ----------------------------\r\n-- Table structure for users\r\n-- ----------------------------\r\nDROP TABLE IF EXISTS `users`;\r\nCREATE TABLE `users` (\r\n  `id` int NOT NULL AUTO_INCREMENT,\r\n  `username` varchar(150) NOT NULL,\r\n  `email` varchar(150) NOT NULL,\r\n  `password_hash` varchar(255) NOT NULL,\r\n  `date_created` timestamp NULL DEFAULT CURRENT_TIMESTAMP,\r\n  `last_login` timestamp NULL DEFAULT NULL,\r\n  `is_active` tinyint(1) DEFAULT \'1\',\r\n  `is_admin` tinyint(1) DEFAULT \'0\',\r\n  PRIMARY KEY (`id`),\r\n  UNIQUE KEY `username` (`username`),\r\n  UNIQUE KEY `email` (`email`)\r\n) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;\r\n\r\n-- ----------------------------\r\n-- Records of users\r\n-- ----------------------------\r\nINSERT INTO `users` VALUES (\'1\', \'w\', \'w@qq.com\', \'1\', \'2025-01-18 22:10:58\', \'2025-01-19 22:11:03\', \'1\', \'1\');\r\nINSERT INTO `users` VALUES (\'2\', \'test\', \'33@qq.com\', \'scrypt:32768:8:1$JdnQ4UFsb6CKDdAu$5f24b24e2f32ce80318729cbc2c416f43eab572cc3b2c06e73d188b949a624d5bf468eb1ce3f0d97e488e7824bd1fec4aef96676562fb50611b4de6aba952aac\', \'2025-01-19 23:58:25\', null, \'1\', \'0\');\r\nINSERT INTO `users` VALUES (\'4\', \'test2\', \'22\', \'scrypt:32768:8:1$sF64rLqqVanrbwOp$7da6a60ce950e93e13f7de8cdb9f67225d4ac116476b1c73f05f37539f1267c4b9fc82dcdb10d7b2be71b6bc5f5f2877eee030c6a85ef64c799ce368e634d31d\', \'2025-01-20 00:02:05\', null, \'1\', \'0\');\r\nINSERT INTO `users` VALUES (\'5\', \'t\', \'t\', \'scrypt:32768:8:1$VRNKj6XHm7nvIzl6$a679f2ba0543edc4117b85947c54bec8ffb13c7ed30a663b87a753771c30ce86e412103d3c704b0c0fb201b776cdb1088a423a563419086b139fe0ed5981423d\', \'2025-01-20 00:09:55\', null, \'1\', \'0\');\r\nINSERT INTO `users` VALUES (\'6\', \'tt\', \'tt\', \'scrypt:32768:8:1$w1xWuIhTI4rzacve$e1277c93acdc5ab1ab34dbb9b56dd75ce633d259c155ca7490d174721c1b11f7614eb3a4f3092a290dd8bddc546ad17e8fef5d35efd8e6e30cfbe1302efc4c70\', \'2025-01-20 00:26:57\', null, \'1\', \'0\');\r\n', '2025-02-03 19:42:01');
INSERT INTO `sqls` VALUES ('3', 'sqledu.sql', '/*\r\nNavicat MySQL Data Transfer\r\n\r\nSource Server         : localhost\r\nSource Server Version : 80022\r\nSource Host           : localhost:3306\r\nSource Database       : sqledu\r\n\r\nTarget Server Type    : MYSQL\r\nTarget Server Version : 80022\r\nFile Encoding         : 65001\r\n\r\nDate: 2025-01-19 22:12:29\r\n*/\r\n\r\nSET FOREIGN_KEY_CHECKS=0;\r\n\r\n-- ----------------------------\r\n-- Table structure for alembic_version\r\n-- ----------------------------\r\nDROP TABLE IF EXISTS `alembic_version`;\r\nCREATE TABLE `alembic_version` (\r\n  `version_num` varchar(32) NOT NULL,\r\n  PRIMARY KEY (`version_num`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\r\n\r\n-- ----------------------------\r\n-- Records of alembic_version\r\n-- ----------------------------\r\n\r\n-- ----------------------------\r\n-- Table structure for users\r\n-- ----------------------------\r\nDROP TABLE IF EXISTS `users`;\r\nCREATE TABLE `users` (\r\n  `id` int NOT NULL AUTO_INCREMENT,\r\n  `username` varchar(150) NOT NULL,\r\n  `email` varchar(150) NOT NULL,\r\n  `password_hash` varchar(255) NOT NULL,\r\n  `date_created` timestamp NULL DEFAULT CURRENT_TIMESTAMP,\r\n  `last_login` timestamp NULL DEFAULT NULL,\r\n  `is_active` tinyint(1) DEFAULT \'1\',\r\n  `is_admin` tinyint(1) DEFAULT \'0\',\r\n  PRIMARY KEY (`id`),\r\n  UNIQUE KEY `username` (`username`),\r\n  UNIQUE KEY `email` (`email`)\r\n) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;\r\n\r\n-- ----------------------------\r\n-- Records of users\r\n-- ----------------------------\r\nINSERT INTO `users` VALUES (\'1\', \'w\', \'w@qq.com\', \'1\', \'2025-01-18 22:10:58\', \'2025-01-19 22:11:03\', \'1\', \'1\');\r\n', '2025-02-03 19:47:53');
INSERT INTO `sqls` VALUES ('4', 'sqledu2.sql', '/*\r\nNavicat MySQL Data Transfer\r\n\r\nSource Server         : localhost\r\nSource Server Version : 80022\r\nSource Host           : localhost:3306\r\nSource Database       : sqledu\r\n\r\nTarget Server Type    : MYSQL\r\nTarget Server Version : 80022\r\nFile Encoding         : 65001\r\n\r\nDate: 2025-01-20 10:39:22\r\n*/\r\n\r\nSET FOREIGN_KEY_CHECKS=0;\r\n\r\n-- ----------------------------\r\n-- Table structure for alembic_version\r\n-- ----------------------------\r\nDROP TABLE IF EXISTS `alembic_version`;\r\nCREATE TABLE `alembic_version` (\r\n  `version_num` varchar(32) NOT NULL,\r\n  PRIMARY KEY (`version_num`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\r\n\r\n-- ----------------------------\r\n-- Records of alembic_version\r\n-- ----------------------------\r\n\r\n-- ----------------------------\r\n-- Table structure for users\r\n-- ----------------------------\r\nDROP TABLE IF EXISTS `users`;\r\nCREATE TABLE `users` (\r\n  `id` int NOT NULL AUTO_INCREMENT,\r\n  `username` varchar(150) NOT NULL,\r\n  `email` varchar(150) NOT NULL,\r\n  `password_hash` varchar(255) NOT NULL,\r\n  `date_created` timestamp NULL DEFAULT CURRENT_TIMESTAMP,\r\n  `last_login` timestamp NULL DEFAULT NULL,\r\n  `is_active` tinyint(1) DEFAULT \'1\',\r\n  `is_admin` tinyint(1) DEFAULT \'0\',\r\n  PRIMARY KEY (`id`),\r\n  UNIQUE KEY `username` (`username`),\r\n  UNIQUE KEY `email` (`email`)\r\n) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;\r\n\r\n-- ----------------------------\r\n-- Records of users\r\n-- ----------------------------\r\nINSERT INTO `users` VALUES (\'1\', \'w\', \'w@qq.com\', \'1\', \'2025-01-18 22:10:58\', \'2025-01-19 22:11:03\', \'1\', \'1\');\r\nINSERT INTO `users` VALUES (\'2\', \'test\', \'33@qq.com\', \'scrypt:32768:8:1$JdnQ4UFsb6CKDdAu$5f24b24e2f32ce80318729cbc2c416f43eab572cc3b2c06e73d188b949a624d5bf468eb1ce3f0d97e488e7824bd1fec4aef96676562fb50611b4de6aba952aac\', \'2025-01-19 23:58:25\', null, \'1\', \'0\');\r\nINSERT INTO `users` VALUES (\'4\', \'test2\', \'22\', \'scrypt:32768:8:1$sF64rLqqVanrbwOp$7da6a60ce950e93e13f7de8cdb9f67225d4ac116476b1c73f05f37539f1267c4b9fc82dcdb10d7b2be71b6bc5f5f2877eee030c6a85ef64c799ce368e634d31d\', \'2025-01-20 00:02:05\', null, \'1\', \'0\');\r\nINSERT INTO `users` VALUES (\'5\', \'t\', \'t\', \'scrypt:32768:8:1$VRNKj6XHm7nvIzl6$a679f2ba0543edc4117b85947c54bec8ffb13c7ed30a663b87a753771c30ce86e412103d3c704b0c0fb201b776cdb1088a423a563419086b139fe0ed5981423d\', \'2025-01-20 00:09:55\', null, \'1\', \'0\');\r\nINSERT INTO `users` VALUES (\'6\', \'tt\', \'tt\', \'scrypt:32768:8:1$w1xWuIhTI4rzacve$e1277c93acdc5ab1ab34dbb9b56dd75ce633d259c155ca7490d174721c1b11f7614eb3a4f3092a290dd8bddc546ad17e8fef5d35efd8e6e30cfbe1302efc4c70\', \'2025-01-20 00:26:57\', null, \'1\', \'0\');\r\n', '2025-02-03 19:51:54');
INSERT INTO `sqls` VALUES ('5', 'sqledu前端更新.sql', '/*hhh\nNavicat MySQL Data Transfer\n\nSource Server         : localhost\nSource Server Version : 80022\nSource Host           : localhost:3306\nSource Database       : sqledu\n\nTarget Server Type    : MYSQL\nTarget Server Version : 80022\nFile Encoding         : 65001\n\nDate: 2025-01-19 22:12:29\n*/\n\nSET FOREIGN_KEY_CHECKS=0;\n\n-- ----------------------------\n-- Table structure for alembic_version\n-- ----------------------------\nDROP TABLE IF EXISTS `alembic_version`;\nCREATE TABLE `alembic_version` (\n  `version_num` varchar(32) NOT NULL,\n  PRIMARY KEY (`version_num`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n-- ----------------------------\n-- Records of alembic_version\n-- ----------------------------\n\n-- ----------------------------\n-- Table structure for users\n-- ----------------------------\nDROP TABLE IF EXISTS `users`;\nCREATE TABLE `users` (\n  `id` int NOT NULL AUTO_INCREMENT,\n  `username` varchar(150) NOT NULL,\n  `email` varchar(150) NOT NULL,\n  `password_hash` varchar(255) NOT NULL,\n  `date_created` timestamp NULL DEFAULT CURRENT_TIMESTAMP,\n  `last_login` timestamp NULL DEFAULT NULL,\n  `is_active` tinyint(1) DEFAULT \'1\',\n  `is_admin` tinyint(1) DEFAULT \'0\',\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `username` (`username`),\n  UNIQUE KEY `email` (`email`)\n) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;\n\n-- ----------------------------\n-- Records of users\n-- ----------------------------\nINSERT INTO `users` VALUES (\'1\', \'w\', \'w@qq.com\', \'1\', \'2025-01-18 22:10:58\', \'2025-01-19 22:11:03\', \'1\', \'1\');\n', '2025-02-03 19:56:45');
INSERT INTO `sqls` VALUES ('7', 'sqledu4.sql', '/*\r\nNavicat MySQL Data Transfer\r\n\r\nSource Server         : localhost\r\nSource Server Version : 80022\r\nSource Host           : localhost:3306\r\nSource Database       : sqledu\r\n\r\nTarget Server Type    : MYSQL\r\nTarget Server Version : 80022\r\nFile Encoding         : 65001\r\n\r\nDate: 2025-02-11 18:44:45\r\n*/\r\n\r\nSET FOREIGN_KEY_CHECKS=0;\r\n\r\n-- ----------------------------\r\n-- Table structure for alembic_version\r\n-- ----------------------------\r\nDROP TABLE IF EXISTS `alembic_version`;\r\nCREATE TABLE `alembic_version` (\r\n  `version_num` varchar(32) NOT NULL,\r\n  PRIMARY KEY (`version_num`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\r\n\r\n-- ----------------------------\r\n-- Table structure for chat_history\r\n-- ----------------------------\r\nDROP TABLE IF EXISTS `chat_history`;\r\nCREATE TABLE `chat_history` (\r\n  `id` int NOT NULL AUTO_INCREMENT,\r\n  `user_id` int NOT NULL,\r\n  `model_type` varchar(50) NOT NULL,\r\n  `role` varchar(20) NOT NULL,\r\n  `content` text NOT NULL,\r\n  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP,\r\n  PRIMARY KEY (`id`),\r\n  KEY `user_id` (`user_id`),\r\n  CONSTRAINT `chat_history_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\r\n\r\n-- ----------------------------\r\n-- Table structure for llm_models\r\n-- ----------------------------\r\nDROP TABLE IF EXISTS `llm_models`;\r\nCREATE TABLE `llm_models` (\r\n  `id` int NOT NULL AUTO_INCREMENT,\r\n  `model_name` varchar(50) NOT NULL,\r\n  `model_identifier` varchar(100) NOT NULL,\r\n  `description` text,\r\n  `is_active` tinyint(1) DEFAULT \'1\',\r\n  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP,\r\n  PRIMARY KEY (`id`)\r\n) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;\r\n\r\n-- ----------------------------\r\n-- Table structure for nl_queries\r\n-- ----------------------------\r\nDROP TABLE IF EXISTS `nl_queries`;\r\nCREATE TABLE `nl_queries` (\r\n  `id` int NOT NULL AUTO_INCREMENT,\r\n  `query_text` text NOT NULL,\r\n  `involved_tables` text NOT NULL,\r\n  `schema_ids` text NOT NULL,\r\n  `status` enum(\'pending\',\'approved\',\'rejected\') DEFAULT \'pending\',\r\n  `generated_sql` text,\r\n  `created_at` datetime DEFAULT CURRENT_TIMESTAMP,\r\n  `updated_at` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\r\n  PRIMARY KEY (`id`)\r\n) ENGINE=InnoDB AUTO_INCREMENT=31 DEFAULT CHARSET=utf8;\r\n\r\n-- ----------------------------\r\n-- Table structure for sqls\r\n-- ----------------------------\r\nDROP TABLE IF EXISTS `sqls`;\r\nCREATE TABLE `sqls` (\r\n  `id` int NOT NULL AUTO_INCREMENT,\r\n  `filename` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,\r\n  `file_content` text COLLATE utf8mb4_unicode_ci NOT NULL,\r\n  `created_at` datetime DEFAULT CURRENT_TIMESTAMP,\r\n  PRIMARY KEY (`id`)\r\n) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\r\n\r\n-- ----------------------------\r\n-- Table structure for users\r\n-- ----------------------------\r\nDROP TABLE IF EXISTS `users`;\r\nCREATE TABLE `users` (\r\n  `id` int NOT NULL AUTO_INCREMENT,\r\n  `username` varchar(150) NOT NULL,\r\n  `email` varchar(150) NOT NULL,\r\n  `password_hash` varchar(255) NOT NULL,\r\n  `date_created` timestamp NULL DEFAULT CURRENT_TIMESTAMP,\r\n  `last_login` timestamp NULL DEFAULT NULL,\r\n  `is_active` tinyint(1) DEFAULT \'1\',\r\n  `is_admin` tinyint(1) DEFAULT \'0\',\r\n  PRIMARY KEY (`id`),\r\n  UNIQUE KEY `username` (`username`),\r\n  UNIQUE KEY `email` (`email`)\r\n) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;\r\n', '2025-02-11 19:26:19');
INSERT INTO `sqls` VALUES ('8', 'sqledu8_.sql', '/*\r\nNavicat MySQL Data Transfer\r\n\r\nSource Server         : localhost\r\nSource Server Version : 80022\r\nSource Host           : localhost:3306\r\nSource Database       : sqledu\r\n\r\nTarget Server Type    : MYSQL\r\nTarget Server Version : 80022\r\nFile Encoding         : 65001\r\n\r\nDate: 2025-02-17 22:57:11\r\n*/\r\n\r\nSET FOREIGN_KEY_CHECKS=0;\r\n\r\n-- ----------------------------\r\n-- Table structure for alembic_version\r\n-- ----------------------------\r\nDROP TABLE IF EXISTS `alembic_version`;\r\nCREATE TABLE `alembic_version` (\r\n  `version_num` varchar(32) NOT NULL,\r\n  PRIMARY KEY (`version_num`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\r\n\r\n-- ----------------------------\r\n-- Table structure for chat_history\r\n-- ----------------------------\r\nDROP TABLE IF EXISTS `chat_history`;\r\nCREATE TABLE `chat_history` (\r\n  `id` int NOT NULL AUTO_INCREMENT,\r\n  `user_id` int NOT NULL,\r\n  `model_type` varchar(50) NOT NULL,\r\n  `role` varchar(20) NOT NULL,\r\n  `content` text NOT NULL,\r\n  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP,\r\n  PRIMARY KEY (`id`),\r\n  KEY `user_id` (`user_id`),\r\n  CONSTRAINT `chat_history_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`)\r\n) ENGINE=InnoDB AUTO_INCREMENT=29 DEFAULT CHARSET=utf8;\r\n\r\n-- ----------------------------\r\n-- Table structure for knowledge_category\r\n-- ----------------------------\r\nDROP TABLE IF EXISTS `knowledge_category`;\r\nCREATE TABLE `knowledge_category` (\r\n  `id` int NOT NULL AUTO_INCREMENT,\r\n  `category_name` varchar(255) NOT NULL,\r\n  `description` text,\r\n  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP,\r\n  `updated_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\r\n  PRIMARY KEY (`id`)\r\n) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8;\r\n\r\n-- ----------------------------\r\n-- Table structure for knowledge_point\r\n-- ----------------------------\r\nDROP TABLE IF EXISTS `knowledge_point`;\r\nCREATE TABLE `knowledge_point` (\r\n  `id` int NOT NULL AUTO_INCREMENT,\r\n  `category_id` int NOT NULL,\r\n  `point_name` varchar(255) NOT NULL,\r\n  `description` text,\r\n  `example_sql` text,\r\n  `explanation` text,\r\n  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP,\r\n  `updated_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\r\n  PRIMARY KEY (`id`),\r\n  KEY `category_id` (`category_id`),\r\n  CONSTRAINT `knowledge_point_ibfk_1` FOREIGN KEY (`category_id`) REFERENCES `knowledge_category` (`id`)\r\n) ENGINE=InnoDB AUTO_INCREMENT=19 DEFAULT CHARSET=utf8;\r\n\r\n-- ----------------------------\r\n-- Table structure for llm_models\r\n-- ----------------------------\r\nDROP TABLE IF EXISTS `llm_models`;\r\nCREATE TABLE `llm_models` (\r\n  `id` int NOT NULL AUTO_INCREMENT,\r\n  `model_name` varchar(50) NOT NULL,\r\n  `model_identifier` varchar(100) NOT NULL,\r\n  `description` text,\r\n  `is_active` tinyint(1) DEFAULT \'1\',\r\n  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP,\r\n  PRIMARY KEY (`id`)\r\n) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;\r\n\r\n-- ----------------------------\r\n-- Table structure for nl_queries\r\n-- ----------------------------\r\nDROP TABLE IF EXISTS `nl_queries`;\r\nCREATE TABLE `nl_queries` (\r\n  `id` int NOT NULL AUTO_INCREMENT,\r\n  `query_text` text NOT NULL,\r\n  `generated_sql` text,\r\n  `involved_tables` text NOT NULL,\r\n  `schema_ids` text NOT NULL,\r\n  `knowledge_point_id` int DEFAULT NULL,\r\n  `status` enum(\'pending\',\'approved\',\'rejected\') DEFAULT \'pending\',\r\n  `created_at` datetime DEFAULT CURRENT_TIMESTAMP,\r\n  `updated_at` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\r\n  PRIMARY KEY (`id`),\r\n  KEY `fk_knowledge_point` (`knowledge_point_id`),\r\n  CONSTRAINT `fk_knowledge_point` FOREIGN KEY (`knowledge_point_id`) REFERENCES `knowledge_point` (`id`) ON DELETE SET NULL ON UPDATE CASCADE\r\n) ENGINE=InnoDB AUTO_INCREMENT=41 DEFAULT CHARSET=utf8;\r\n\r\n-- ----------------------------\r\n-- Table structure for sqls\r\n-- ----------------------------\r\nDROP TABLE IF EXISTS `sqls`;\r\nCREATE TABLE `sqls` (\r\n  `id` int NOT NULL AUTO_INCREMENT,\r\n  `filename` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,\r\n  `file_content` text COLLATE utf8mb4_unicode_ci NOT NULL,\r\n  `created_at` datetime DEFAULT CURRENT_TIMESTAMP,\r\n  PRIMARY KEY (`id`)\r\n) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\r\n\r\n-- ----------------------------\r\n-- Table structure for users\r\n-- ----------------------------\r\nDROP TABLE IF EXISTS `users`;\r\nCREATE TABLE `users` (\r\n  `id` int NOT NULL AUTO_INCREMENT,\r\n  `username` varchar(150) NOT NULL,\r\n  `email` varchar(150) NOT NULL,\r\n  `password_hash` varchar(255) NOT NULL,\r\n  `date_created` timestamp NULL DEFAULT CURRENT_TIMESTAMP,\r\n  `last_login` timestamp NULL DEFAULT NULL,\r\n  `is_active` tinyint(1) DEFAULT \'1\',\r\n  `is_admin` tinyint(1) DEFAULT \'0\',\r\n  PRIMARY KEY (`id`),\r\n  UNIQUE KEY `username` (`username`),\r\n  UNIQUE KEY `email` (`email`)\r\n) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;\r\n', '2025-02-17 22:57:34');
INSERT INTO `sqls` VALUES ('9', 'world.sql', '/*\r\nNavicat MySQL Data Transfer\r\n\r\nSource Server         : localhost\r\nSource Server Version : 80022\r\nSource Host           : localhost:3306\r\nSource Database       : world\r\n\r\nTarget Server Type    : MYSQL\r\nTarget Server Version : 80022\r\nFile Encoding         : 65001\r\n\r\nDate: 2025-03-03 14:13:53\r\n*/\r\n\r\nSET FOREIGN_KEY_CHECKS=0;\r\n\r\n-- ----------------------------\r\n-- Table structure for city\r\n-- ----------------------------\r\nDROP TABLE IF EXISTS `city`;\r\nCREATE TABLE `city` (\r\n  `ID` int NOT NULL AUTO_INCREMENT,\r\n  `Name` char(35) NOT NULL DEFAULT \'\',\r\n  `CountryCode` char(3) NOT NULL DEFAULT \'\',\r\n  `District` char(20) NOT NULL DEFAULT \'\',\r\n  `Population` int NOT NULL DEFAULT \'0\',\r\n  PRIMARY KEY (`ID`),\r\n  KEY `CountryCode` (`CountryCode`),\r\n  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\r\n) ENGINE=InnoDB AUTO_INCREMENT=4080 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\r\n\r\n-- ----------------------------\r\n-- Table structure for country\r\n-- ----------------------------\r\nDROP TABLE IF EXISTS `country`;\r\nCREATE TABLE `country` (\r\n  `Code` char(3) NOT NULL DEFAULT \'\',\r\n  `Name` char(52) NOT NULL DEFAULT \'\',\r\n  `Continent` enum(\'Asia\',\'Europe\',\'North America\',\'Africa\',\'Oceania\',\'Antarctica\',\'South America\') NOT NULL DEFAULT \'Asia\',\r\n  `Region` char(26) NOT NULL DEFAULT \'\',\r\n  `SurfaceArea` decimal(10,2) NOT NULL DEFAULT \'0.00\',\r\n  `IndepYear` smallint DEFAULT NULL,\r\n  `Population` int NOT NULL DEFAULT \'0\',\r\n  `LifeExpectancy` decimal(3,1) DEFAULT NULL,\r\n  `GNP` decimal(10,2) DEFAULT NULL,\r\n  `GNPOld` decimal(10,2) DEFAULT NULL,\r\n  `LocalName` char(45) NOT NULL DEFAULT \'\',\r\n  `GovernmentForm` char(45) NOT NULL DEFAULT \'\',\r\n  `HeadOfState` char(60) DEFAULT NULL,\r\n  `Capital` int DEFAULT NULL,\r\n  `Code2` char(2) NOT NULL DEFAULT \'\',\r\n  PRIMARY KEY (`Code`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\r\n\r\n-- ----------------------------\r\n-- Table structure for countrylanguage\r\n-- ----------------------------\r\nDROP TABLE IF EXISTS `countrylanguage`;\r\nCREATE TABLE `countrylanguage` (\r\n  `CountryCode` char(3) NOT NULL DEFAULT \'\',\r\n  `Language` char(30) NOT NULL DEFAULT \'\',\r\n  `IsOfficial` enum(\'T\',\'F\') NOT NULL DEFAULT \'F\',\r\n  `Percentage` decimal(4,1) NOT NULL DEFAULT \'0.0\',\r\n  PRIMARY KEY (`CountryCode`,`Language`),\r\n  KEY `CountryCode` (`CountryCode`),\r\n  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\r\n', '2025-03-03 20:34:41');
INSERT INTO `sqls` VALUES ('10', 'tpcd.sql', '/*\r\nNavicat MySQL Data Transfer\r\n\r\nSource Server         : localhost\r\nSource Server Version : 80022\r\nSource Host           : localhost:3306\r\nSource Database       : tpcd\r\n\r\nTarget Server Type    : MYSQL\r\nTarget Server Version : 80022\r\nFile Encoding         : 65001\r\n\r\nDate: 2025-03-03 14:13:32\r\n*/\r\n\r\nSET FOREIGN_KEY_CHECKS=0;\r\n\r\n-- ----------------------------\r\n-- Table structure for customer\r\n-- ----------------------------\r\nDROP TABLE IF EXISTS `customer`;\r\nCREATE TABLE `customer` (\r\n  `C_CUSTKEY` int NOT NULL,\r\n  `C_NAME` varchar(25) NOT NULL,\r\n  `C_ADDRESS` varchar(40) NOT NULL,\r\n  `C_NATIONKEY` int NOT NULL,\r\n  `C_PHONE` char(15) NOT NULL,\r\n  `C_ACCTBAL` decimal(15,2) NOT NULL,\r\n  `C_MKTSEGMENT` char(10) NOT NULL,\r\n  `C_COMMENT` varchar(117) NOT NULL,\r\n  PRIMARY KEY (`C_CUSTKEY`),\r\n  KEY `CUSTOMER_FK1` (`C_NATIONKEY`),\r\n  CONSTRAINT `customer_ibfk_1` FOREIGN KEY (`C_NATIONKEY`) REFERENCES `nation` (`N_NATIONKEY`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\r\n\r\n-- ----------------------------\r\n-- Table structure for lineitem\r\n-- ----------------------------\r\nDROP TABLE IF EXISTS `lineitem`;\r\nCREATE TABLE `lineitem` (\r\n  `L_ORDERKEY` int NOT NULL,\r\n  `L_PARTKEY` int NOT NULL,\r\n  `L_SUPPKEY` int NOT NULL,\r\n  `L_LINENUMBER` int NOT NULL,\r\n  `L_QUANTITY` decimal(15,2) NOT NULL,\r\n  `L_EXTENDEDPRICE` decimal(15,2) NOT NULL,\r\n  `L_DISCOUNT` decimal(15,2) NOT NULL,\r\n  `L_TAX` decimal(15,2) NOT NULL,\r\n  `L_RETURNFLAG` char(1) NOT NULL,\r\n  `L_LINESTATUS` char(1) NOT NULL,\r\n  `L_SHIPDATE` date NOT NULL,\r\n  `L_COMMITDATE` date NOT NULL,\r\n  `L_RECEIPTDATE` date NOT NULL,\r\n  `L_SHIPINSTRUCT` char(25) NOT NULL,\r\n  `L_SHIPMODE` char(10) NOT NULL,\r\n  `L_COMMENT` varchar(44) NOT NULL,\r\n  PRIMARY KEY (`L_ORDERKEY`,`L_LINENUMBER`),\r\n  KEY `LINEITEM_FK2` (`L_PARTKEY`,`L_SUPPKEY`),\r\n  CONSTRAINT `lineitem_ibfk_1` FOREIGN KEY (`L_ORDERKEY`) REFERENCES `orders` (`O_ORDERKEY`),\r\n  CONSTRAINT `lineitem_ibfk_2` FOREIGN KEY (`L_PARTKEY`, `L_SUPPKEY`) REFERENCES `partsupp` (`PS_PARTKEY`, `PS_SUPPKEY`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\r\n\r\n-- ----------------------------\r\n-- Table structure for nation\r\n-- ----------------------------\r\nDROP TABLE IF EXISTS `nation`;\r\nCREATE TABLE `nation` (\r\n  `N_NATIONKEY` int NOT NULL,\r\n  `N_NAME` char(25) NOT NULL,\r\n  `N_REGIONKEY` int NOT NULL,\r\n  `N_COMMENT` varchar(152) DEFAULT NULL,\r\n  PRIMARY KEY (`N_NATIONKEY`),\r\n  KEY `NATION_FK1` (`N_REGIONKEY`),\r\n  CONSTRAINT `nation_ibfk_1` FOREIGN KEY (`N_REGIONKEY`) REFERENCES `region` (`R_REGIONKEY`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\r\n\r\n-- ----------------------------\r\n-- Table structure for orders\r\n-- ----------------------------\r\nDROP TABLE IF EXISTS `orders`;\r\nCREATE TABLE `orders` (\r\n  `O_ORDERKEY` int NOT NULL,\r\n  `O_CUSTKEY` int NOT NULL,\r\n  `O_ORDERSTATUS` char(1) NOT NULL,\r\n  `O_TOTALPRICE` decimal(15,2) NOT NULL,\r\n  `O_ORDERDATE` date NOT NULL,\r\n  `O_ORDERPRIORITY` char(15) NOT NULL,\r\n  `O_CLERK` char(15) NOT NULL,\r\n  `O_SHIPPRIORITY` int NOT NULL,\r\n  `O_COMMENT` varchar(79) NOT NULL,\r\n  PRIMARY KEY (`O_ORDERKEY`),\r\n  KEY `ORDERS_FK1` (`O_CUSTKEY`),\r\n  CONSTRAINT `orders_ibfk_1` FOREIGN KEY (`O_CUSTKEY`) REFERENCES `customer` (`C_CUSTKEY`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\r\n\r\n-- ----------------------------\r\n-- Table structure for part\r\n-- ----------------------------\r\nDROP TABLE IF EXISTS `part`;\r\nCREATE TABLE `part` (\r\n  `P_PARTKEY` int NOT NULL,\r\n  `P_NAME` varchar(55) NOT NULL,\r\n  `P_MFGR` char(25) NOT NULL,\r\n  `P_BRAND` char(10) NOT NULL,\r\n  `P_TYPE` varchar(25) NOT NULL,\r\n  `P_SIZE` int NOT NULL,\r\n  `P_CONTAINER` char(10) NOT NULL,\r\n  `P_RETAILPRICE` decimal(15,2) NOT NULL,\r\n  `P_COMMENT` varchar(23) NOT NULL,\r\n  PRIMARY KEY (`P_PARTKEY`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\r\n\r\n-- ----------------------------\r\n-- Table structure for partsupp\r\n-- ----------------------------\r\nDROP TABLE IF EXISTS `partsupp`;\r\nCREATE TABLE `partsupp` (\r\n  `PS_PARTKEY` int NOT NULL,\r\n  `PS_SUPPKEY` int NOT NULL,\r\n  `PS_AVAILQTY` int NOT NULL,\r\n  `PS_SUPPLYCOST` decimal(15,2) NOT NULL,\r\n  `PS_COMMENT` varchar(199) NOT NULL,\r\n  PRIMARY KEY (`PS_PARTKEY`,`PS_SUPPKEY`),\r\n  KEY `PARTSUPP_FK1` (`PS_SUPPKEY`),\r\n  CONSTRAINT `partsupp_ibfk_1` FOREIGN KEY (`PS_SUPPKEY`) REFERENCES `supplier` (`S_SUPPKEY`),\r\n  CONSTRAINT `partsupp_ibfk_2` FOREIGN KEY (`PS_PARTKEY`) REFERENCES `part` (`P_PARTKEY`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\r\n\r\n-- ----------------------------\r\n-- Table structure for region\r\n-- ----------------------------\r\nDROP TABLE IF EXISTS `region`;\r\nCREATE TABLE `region` (\r\n  `R_REGIONKEY` int NOT NULL,\r\n  `R_NAME` char(25) NOT NULL,\r\n  `R_COMMENT` varchar(152) DEFAULT NULL,\r\n  PRIMARY KEY (`R_REGIONKEY`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\r\n\r\n-- ----------------------------\r\n-- Table structure for supplier\r\n-- ----------------------------\r\nDROP TABLE IF EXISTS `supplier`;\r\nCREATE TABLE `supplier` (\r\n  `S_SUPPKEY` int NOT NULL,\r\n  `S_NAME` char(25) NOT NULL,\r\n  `S_ADDRESS` varchar(40) NOT NULL,\r\n  `S_NATIONKEY` int NOT NULL,\r\n  `S_PHONE` char(15) NOT NULL,\r\n  `S_ACCTBAL` decimal(15,2) NOT NULL,\r\n  `S_COMMENT` varchar(101) NOT NULL,\r\n  PRIMARY KEY (`S_SUPPKEY`),\r\n  KEY `SUPPLIER_FK1` (`S_NATIONKEY`),\r\n  CONSTRAINT `supplier_ibfk_1` FOREIGN KEY (`S_NATIONKEY`) REFERENCES `nation` (`N_NATIONKEY`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\r\n', '2025-03-03 20:34:54');
INSERT INTO `sqls` VALUES ('11', 'world2.sql', '/*\r\nNavicat MySQL Data Transfer\r\n\r\nSource Server         : localhost\r\nSource Server Version : 80022\r\nSource Host           : localhost:3306\r\nSource Database       : world\r\n\r\nTarget Server Type    : MYSQL\r\nTarget Server Version : 80022\r\nFile Encoding         : 65001\r\n\r\nDate: 2025-03-03 14:13:53\r\n*/\r\n\r\nSET FOREIGN_KEY_CHECKS=0;\r\n\r\n-- ----------------------------\r\n-- Table structure for city\r\n-- ----------------------------\r\nDROP TABLE IF EXISTS `city`;\r\nCREATE TABLE `city` (\r\n  `ID` int NOT NULL AUTO_INCREMENT,\r\n  `Name` char(35) NOT NULL DEFAULT \'\',\r\n  `CountryCode` char(3) NOT NULL DEFAULT \'\',\r\n  `District` char(20) NOT NULL DEFAULT \'\',\r\n  `Population` int NOT NULL DEFAULT \'0\',\r\n  PRIMARY KEY (`ID`),\r\n  KEY `CountryCode` (`CountryCode`),\r\n  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\r\n) ENGINE=InnoDB AUTO_INCREMENT=4080 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\r\n\r\n-- ----------------------------\r\n-- Table structure for country\r\n-- ----------------------------\r\nDROP TABLE IF EXISTS `country`;\r\nCREATE TABLE `country` (\r\n  `Code` char(3) NOT NULL DEFAULT \'\',\r\n  `Name` char(52) NOT NULL DEFAULT \'\',\r\n  `Continent` enum(\'Asia\',\'Europe\',\'North America\',\'Africa\',\'Oceania\',\'Antarctica\',\'South America\') NOT NULL DEFAULT \'Asia\',\r\n  `Region` char(26) NOT NULL DEFAULT \'\',\r\n  `SurfaceArea` decimal(10,2) NOT NULL DEFAULT \'0.00\',\r\n  `IndepYear` smallint DEFAULT NULL,\r\n  `Population` int NOT NULL DEFAULT \'0\',\r\n  `LifeExpectancy` decimal(3,1) DEFAULT NULL,\r\n  `GNP` decimal(10,2) DEFAULT NULL,\r\n  `GNPOld` decimal(10,2) DEFAULT NULL,\r\n  `LocalName` char(45) NOT NULL DEFAULT \'\',\r\n  `GovernmentForm` char(45) NOT NULL DEFAULT \'\',\r\n  `HeadOfState` char(60) DEFAULT NULL,\r\n  `Capital` int DEFAULT NULL,\r\n  `Code2` char(2) NOT NULL DEFAULT \'\',\r\n  PRIMARY KEY (`Code`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\r\n\r\n-- ----------------------------\r\n-- Table structure for countrylanguage\r\n-- ----------------------------\r\nDROP TABLE IF EXISTS `countrylanguage`;\r\nCREATE TABLE `countrylanguage` (\r\n  `CountryCode` char(3) NOT NULL DEFAULT \'\',\r\n  `Language` char(30) NOT NULL DEFAULT \'\',\r\n  `IsOfficial` enum(\'T\',\'F\') NOT NULL DEFAULT \'F\',\r\n  `Percentage` decimal(4,1) NOT NULL DEFAULT \'0.0\',\r\n  PRIMARY KEY (`CountryCode`,`Language`),\r\n  KEY `CountryCode` (`CountryCode`),\r\n  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\r\n', '2025-03-06 14:44:40');
INSERT INTO `sqls` VALUES ('12', '准备实验报告.sql', '/*\r\nNavicat MySQL Data Transfer\r\n\r\nSource Server         : localhost\r\nSource Server Version : 80022\r\nSource Host           : localhost:3306\r\nSource Database       : sqledu\r\n\r\nTarget Server Type    : MYSQL\r\nTarget Server Version : 80022\r\nFile Encoding         : 65001\r\n\r\nDate: 2025-03-04 23:51:45\r\n*/\r\n\r\nSET FOREIGN_KEY_CHECKS=0;\r\n\r\n-- ----------------------------\r\n-- Table structure for alembic_version\r\n-- ----------------------------\r\nDROP TABLE IF EXISTS `alembic_version`;\r\nCREATE TABLE `alembic_version` (\r\n  `version_num` varchar(32) NOT NULL,\r\n  PRIMARY KEY (`version_num`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\r\n\r\n-- ----------------------------\r\n-- Table structure for chat_history\r\n-- ----------------------------\r\nDROP TABLE IF EXISTS `chat_history`;\r\nCREATE TABLE `chat_history` (\r\n  `id` int NOT NULL AUTO_INCREMENT,\r\n  `user_id` int NOT NULL,\r\n  `model_type` varchar(50) NOT NULL,\r\n  `role` varchar(20) NOT NULL,\r\n  `content` text NOT NULL,\r\n  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP,\r\n  PRIMARY KEY (`id`),\r\n  KEY `user_id` (`user_id`),\r\n  CONSTRAINT `chat_history_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`)\r\n) ENGINE=InnoDB AUTO_INCREMENT=29 DEFAULT CHARSET=utf8;\r\n\r\n-- ----------------------------\r\n-- Table structure for experiments\r\n-- ----------------------------\r\nDROP TABLE IF EXISTS `experiments`;\r\nCREATE TABLE `experiments` (\r\n  `id` int NOT NULL AUTO_INCREMENT,\r\n  `title` varchar(255) NOT NULL COMMENT \'实验标题\',\r\n  `description` text COMMENT \'实验描述\',\r\n  `created_at` datetime DEFAULT CURRENT_TIMESTAMP COMMENT \'创建时间\',\r\n  `updated_at` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT \'更新时间\',\r\n  `status` varchar(20) DEFAULT \'draft\' COMMENT \'状态：draft-草稿，published-已发布\',\r\n  `content` json DEFAULT NULL COMMENT \'实验内容，包含查询等信息\',\r\n  `knowledge_points` json DEFAULT NULL COMMENT \'关联的知识点信息\',\r\n  `report_content` text COMMENT \'实验报告内容，支持富文本格式\',\r\n  `objectives` text COMMENT \'实验目标\',\r\n  `requirements` text COMMENT \'实验要求\',\r\n  `steps` text COMMENT \'实验步骤\',\r\n  `notes` text COMMENT \'实验注意事项\',\r\n  PRIMARY KEY (`id`),\r\n  KEY `idx_status` (`status`),\r\n  KEY `idx_created_at` (`created_at`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT=\'实验报告表\';\r\n\r\n-- ----------------------------\r\n-- Table structure for knowledge_category\r\n-- ----------------------------\r\nDROP TABLE IF EXISTS `knowledge_category`;\r\nCREATE TABLE `knowledge_category` (\r\n  `id` int NOT NULL AUTO_INCREMENT,\r\n  `category_name` varchar(255) NOT NULL,\r\n  `description` text,\r\n  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP,\r\n  `updated_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\r\n  PRIMARY KEY (`id`)\r\n) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=utf8;\r\n\r\n-- ----------------------------\r\n-- Table structure for knowledge_point\r\n-- ----------------------------\r\nDROP TABLE IF EXISTS `knowledge_point`;\r\nCREATE TABLE `knowledge_point` (\r\n  `id` int NOT NULL AUTO_INCREMENT,\r\n  `category_id` int NOT NULL,\r\n  `point_name` varchar(255) NOT NULL,\r\n  `description` text,\r\n  `example_sql` text,\r\n  `explanation` text,\r\n  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP,\r\n  `updated_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\r\n  PRIMARY KEY (`id`),\r\n  KEY `category_id` (`category_id`),\r\n  CONSTRAINT `knowledge_point_ibfk_1` FOREIGN KEY (`category_id`) REFERENCES `knowledge_category` (`id`)\r\n) ENGINE=InnoDB AUTO_INCREMENT=23 DEFAULT CHARSET=utf8;\r\n\r\n-- ----------------------------\r\n-- Table structure for llm_models\r\n-- ----------------------------\r\nDROP TABLE IF EXISTS `llm_models`;\r\nCREATE TABLE `llm_models` (\r\n  `id` int NOT NULL AUTO_INCREMENT,\r\n  `model_name` varchar(50) NOT NULL,\r\n  `model_identifier` varchar(100) NOT NULL,\r\n  `description` text,\r\n  `is_active` tinyint(1) DEFAULT \'1\',\r\n  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP,\r\n  PRIMARY KEY (`id`)\r\n) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;\r\n\r\n-- ----------------------------\r\n-- Table structure for nl_queries\r\n-- ----------------------------\r\nDROP TABLE IF EXISTS `nl_queries`;\r\nCREATE TABLE `nl_queries` (\r\n  `id` int NOT NULL AUTO_INCREMENT,\r\n  `query_text` text NOT NULL,\r\n  `generated_sql` text,\r\n  `involved_tables` text NOT NULL,\r\n  `schema_ids` text NOT NULL,\r\n  `knowledge_point_id` int DEFAULT NULL,\r\n  `status` enum(\'pending\',\'approved\',\'rejected\') DEFAULT \'pending\',\r\n  `created_at` datetime DEFAULT CURRENT_TIMESTAMP,\r\n  `updated_at` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\r\n  PRIMARY KEY (`id`),\r\n  KEY `fk_knowledge_point` (`knowledge_point_id`),\r\n  CONSTRAINT `fk_knowledge_point` FOREIGN KEY (`knowledge_point_id`) REFERENCES `knowledge_point` (`id`) ON DELETE SET NULL ON UPDATE CASCADE\r\n) ENGINE=InnoDB AUTO_INCREMENT=202 DEFAULT CHARSET=utf8;\r\n\r\n-- ----------------------------\r\n-- Table structure for sqls\r\n-- ----------------------------\r\nDROP TABLE IF EXISTS `sqls`;\r\nCREATE TABLE `sqls` (\r\n  `id` int NOT NULL AUTO_INCREMENT,\r\n  `filename` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,\r\n  `file_content` text COLLATE utf8mb4_unicode_ci NOT NULL,\r\n  `created_at` datetime DEFAULT CURRENT_TIMESTAMP,\r\n  PRIMARY KEY (`id`)\r\n) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\r\n\r\n-- ----------------------------\r\n-- Table structure for users\r\n-- ----------------------------\r\nDROP TABLE IF EXISTS `users`;\r\nCREATE TABLE `users` (\r\n  `id` int NOT NULL AUTO_INCREMENT,\r\n  `username` varchar(150) NOT NULL,\r\n  `email` varchar(150) NOT NULL,\r\n  `password_hash` varchar(255) NOT NULL,\r\n  `date_created` timestamp NULL DEFAULT CURRENT_TIMESTAMP,\r\n  `last_login` timestamp NULL DEFAULT NULL,\r\n  `is_active` tinyint(1) DEFAULT \'1\',\r\n  `is_admin` tinyint(1) DEFAULT \'0\',\r\n  PRIMARY KEY (`id`),\r\n  UNIQUE KEY `username` (`username`),\r\n  UNIQUE KEY `email` (`email`)\r\n) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;\r\n', '2025-03-12 18:50:55');

-- ----------------------------
-- Table structure for users
-- ----------------------------
DROP TABLE IF EXISTS `users`;
CREATE TABLE `users` (
  `id` int NOT NULL AUTO_INCREMENT,
  `username` varchar(150) NOT NULL,
  `email` varchar(150) NOT NULL,
  `password_hash` varchar(255) NOT NULL,
  `date_created` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `last_login` timestamp NULL DEFAULT NULL,
  `is_active` tinyint(1) DEFAULT '1',
  `is_admin` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`),
  UNIQUE KEY `username` (`username`),
  UNIQUE KEY `email` (`email`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of users
-- ----------------------------
INSERT INTO `users` VALUES ('1', 'w', 'w@qq.com', '1', '2025-01-18 22:10:58', '2025-01-19 22:11:03', '1', '1');
INSERT INTO `users` VALUES ('2', 'test', '33@qq.com', 'scrypt:32768:8:1$JdnQ4UFsb6CKDdAu$5f24b24e2f32ce80318729cbc2c416f43eab572cc3b2c06e73d188b949a624d5bf468eb1ce3f0d97e488e7824bd1fec4aef96676562fb50611b4de6aba952aac', '2025-01-19 23:58:25', null, '1', '0');
INSERT INTO `users` VALUES ('4', 'test2', '22', 'scrypt:32768:8:1$sF64rLqqVanrbwOp$7da6a60ce950e93e13f7de8cdb9f67225d4ac116476b1c73f05f37539f1267c4b9fc82dcdb10d7b2be71b6bc5f5f2877eee030c6a85ef64c799ce368e634d31d', '2025-01-20 00:02:05', null, '1', '0');
INSERT INTO `users` VALUES ('5', 't', 't', 'scrypt:32768:8:1$VRNKj6XHm7nvIzl6$a679f2ba0543edc4117b85947c54bec8ffb13c7ed30a663b87a753771c30ce86e412103d3c704b0c0fb201b776cdb1088a423a563419086b139fe0ed5981423d', '2025-01-20 00:09:55', null, '1', '0');
INSERT INTO `users` VALUES ('6', 'tt', 'tt', 'scrypt:32768:8:1$w1xWuIhTI4rzacve$e1277c93acdc5ab1ab34dbb9b56dd75ce633d259c155ca7490d174721c1b11f7614eb3a4f3092a290dd8bddc546ad17e8fef5d35efd8e6e30cfbe1302efc4c70', '2025-01-20 00:26:57', null, '1', '1');
INSERT INTO `users` VALUES ('7', 'admin', 'admin@qq.com', 'scrypt:32768:8:1$iIBCwd0zd4Br6AM5$f512fd459c65c203f8501f7e7973c6f02e04d766e51be584c16c13ae9e1a3e8e00cff49e3bd6ed867c8095cba1263a79cf2b308a357d7edc219408b5988f63c2', '2025-01-20 10:46:06', null, '1', '1');
INSERT INTO `users` VALUES ('8', 'q', 'q', 'scrypt:32768:8:1$XDqUurFy2ZejHG63$b936077b9c70aa7e2b01cf0884de2f18a8db5090b91dae3276cf9a5aea6c94be08eeba56508250d5a5d0392e227ada99d4a60c1a936b9fa92b4e4b0824818e59', '2025-02-23 11:44:45', null, '1', '0');
